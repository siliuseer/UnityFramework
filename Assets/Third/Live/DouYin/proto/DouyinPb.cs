// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: douyin_pb.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DouyinPb {

  /// <summary>Holder for reflection information generated from douyin_pb.proto</summary>
  public static partial class DouyinPbReflection {

    #region Descriptor
    /// <summary>File descriptor for douyin_pb.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DouyinPbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9kb3V5aW5fcGIucHJvdG8SCWRvdXlpbl9wYiLuAQoLV3NzUmVzcG9uc2US",
            "DQoFc2VxaWQYASABKAQSDQoFbG9naWQYAiABKAQSDwoHc2VydmljZRgDIAEo",
            "BBIOCgZtZXRob2QYBCABKAQSNAoHaGVhZGVycxgFIAMoCzIjLmRvdXlpbl9w",
            "Yi5Xc3NSZXNwb25zZS5IZWFkZXJzRW50cnkSFwoPcGF5bG9hZEVuY29kaW5n",
            "GAYgASgJEhMKC3BheWxvYWRUeXBlGAcgASgJEgwKBGRhdGEYCCABKAwaLgoM",
            "SGVhZGVyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEi",
            "5gIKCFJlc3BvbnNlEiQKCG1lc3NhZ2VzGAEgAygLMhIuZG91eWluX3BiLk1l",
            "c3NhZ2USDgoGY3Vyc29yGAIgASgJEhUKDWZldGNoSW50ZXJ2YWwYAyABKAMS",
            "CwoDbm93GAQgASgDEhMKC2ludGVybmFsRXh0GAUgASgJEhEKCWZldGNoVHlw",
            "ZRgGIAEoBRI5Cgtyb3V0ZVBhcmFtcxgHIAMoCzIkLmRvdXlpbl9wYi5SZXNw",
            "b25zZS5Sb3V0ZVBhcmFtc0VudHJ5EhkKEWhlYXJ0YmVhdER1cmF0aW9uGAgg",
            "ASgDEg8KB25lZWRBY2sYCSABKAgSEgoKcHVzaFNlcnZlchgKIAEoCRISCgps",
            "aXZlQ3Vyc29yGAsgASgJEhUKDWhpc3RvcnlOb01vcmUYDCABKAgaMgoQUm91",
            "dGVQYXJhbXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgB",
            "IloKB01lc3NhZ2USDgoGbWV0aG9kGAEgASgJEg8KB3BheWxvYWQYAiABKAwS",
            "DQoFbXNnSWQYAyABKAMSDwoHbXNnVHlwZRgEIAEoBRIOCgZvZmZzZXQYBSAB",
            "KAMi7QMKElJvb21Vc2VyU2VxTWVzc2FnZRIhCgZjb21tb24YASABKAsyES5k",
            "b3V5aW5fcGIuQ29tbW9uEjgKBXJhbmtzGAIgAygLMikuZG91eWluX3BiLlJv",
            "b21Vc2VyU2VxTWVzc2FnZS5Db250cmlidXRvchINCgV0b3RhbBgDIAEoAxIO",
            "CgZwb3BTdHIYBCABKAkSOAoFc2VhdHMYBSADKAsyKS5kb3V5aW5fcGIuUm9v",
            "bVVzZXJTZXFNZXNzYWdlLkNvbnRyaWJ1dG9yEhIKCnBvcHVsYXJpdHkYBiAB",
            "KAMSEQoJdG90YWxVc2VyGAcgASgDEhQKDHRvdGFsVXNlclN0chgIIAEoCRIQ",
            "Cgh0b3RhbFN0chgJIAEoCRIbChNvbmxpbmVVc2VyRm9yQW5jaG9yGAogASgJ",
            "EhgKEHRvdGFsUHZGb3JBbmNob3IYCyABKAkamgEKC0NvbnRyaWJ1dG9yEg0K",
            "BXNjb3JlGAEgASgDEh0KBHVzZXIYAiABKAsyDy5kb3V5aW5fcGIuVXNlchIM",
            "CgRyYW5rGAMgASgDEg0KBWRlbHRhGAQgASgDEhAKCGlzSGlkZGVuGAUgASgI",
            "EhgKEHNjb3JlRGVzY3JpcHRpb24YBiABKAkSFAoMZXhhY3RseVNjb3JlGAcg",
            "ASgJIvoICgtHaWZ0TWVzc2FnZRIhCgZjb21tb24YASABKAsyES5kb3V5aW5f",
            "cGIuQ29tbW9uEg4KBmdpZnRJZBgCIAEoAxIWCg5mYW5UaWNrZXRDb3VudBgD",
            "IAEoAxISCgpncm91cENvdW50GAQgASgDEhMKC3JlcGVhdENvdW50GAUgASgD",
            "EhIKCmNvbWJvQ291bnQYBiABKAMSHQoEdXNlchgHIAEoCzIPLmRvdXlpbl9w",
            "Yi5Vc2VyEh8KBnRvVXNlchgIIAEoCzIPLmRvdXlpbl9wYi5Vc2VyEhEKCXJl",
            "cGVhdEVuZBgJIAEoBRI1Cgp0ZXh0RWZmZWN0GAogASgLMiEuZG91eWluX3Bi",
            "LkdpZnRNZXNzYWdlLlRleHRFZmZlY3QSDwoHZ3JvdXBJZBgLIAEoAxIXCg9p",
            "bmNvbWVUYXNrZ2lmdHMYDCABKAMSGgoScm9vbUZhblRpY2tldENvdW50GA0g",
            "ASgDEisKCHByaW9yaXR5GA4gASgLMhkuZG91eWluX3BiLkdpZnRJTVByaW9y",
            "aXR5EiMKBGdpZnQYDyABKAsyFS5kb3V5aW5fcGIuR2lmdFN0cnVjdBINCgVs",
            "b2dJZBgQIAEoCRIQCghzZW5kVHlwZRgRIAEoAxI1ChBwdWJsaWNBcmVhQ29t",
            "bW9uGBIgASgLMhsuZG91eWluX3BiLlB1YmxpY0FyZWFDb21tb24SKAoPdHJh",
            "eURpc3BsYXlUZXh0GBMgASgLMg8uZG91eWluX3BiLlRleHQSHAoUYmFubmVk",
            "RGlzcGxheUVmZmVjdHMYFCABKAMSKQoIdHJheUluZm8YFSABKAsyFy5kb3V5",
            "aW5fcGIuR2lmdFRyYXlJbmZvEjkKEmFzc2V0RWZmZWN0TWl4SW5mbxgYIAEo",
            "CzIdLmRvdXlpbl9wYi5Bc3NldEVmZmVjdE1peEluZm8augMKClRleHRFZmZl",
            "Y3QSOgoIcG9ydHJhaXQYASABKAsyKC5kb3V5aW5fcGIuR2lmdE1lc3NhZ2Uu",
            "VGV4dEVmZmVjdC5EZXRhaWwSOwoJbGFuZHNjYXBlGAIgASgLMiguZG91eWlu",
            "X3BiLkdpZnRNZXNzYWdlLlRleHRFZmZlY3QuRGV0YWlsGrICCgZEZXRhaWwS",
            "HQoEdGV4dBgBIAEoCzIPLmRvdXlpbl9wYi5UZXh0EhQKDHRleHRGb250U2l6",
            "ZRgCIAEoBRIkCgpiYWNrZ3JvdW5kGAMgASgLMhAuZG91eWluX3BiLkltYWdl",
            "Eg0KBXN0YXJ0GAQgASgFEhAKCGR1cmF0aW9uGAUgASgFEgkKAXgYBiABKAUS",
            "CQoBeRgHIAEoBRINCgV3aWR0aBgIIAEoBRIOCgZoZWlnaHQYCSABKAUSEAoI",
            "c2hhZG93RHgYCiABKAUSEAoIc2hhZG93RHkYCyABKAUSFAoMc2hhZG93UmFk",
            "aXVzGAwgASgFEhMKC3NoYWRvd0NvbG9yGA0gASgJEhMKC3N0cm9rZUNvbG9y",
            "GA4gASgJEhMKC3N0cm9rZVdpZHRoGA8gASgFIooBCgtMaWtlTWVzc2FnZRIh",
            "CgZjb21tb24YASABKAsyES5kb3V5aW5fcGIuQ29tbW9uEg0KBWNvdW50GAIg",
            "ASgDEg0KBXRvdGFsGAMgASgDEg0KBWNvbG9yGAQgASgDEh0KBHVzZXIYBSAB",
            "KAsyDy5kb3V5aW5fcGIuVXNlchIMCgRpY29uGAYgASgJIsoCCgtDaGF0TWVz",
            "c2FnZRIhCgZjb21tb24YASABKAsyES5kb3V5aW5fcGIuQ29tbW9uEh0KBHVz",
            "ZXIYAiABKAsyDy5kb3V5aW5fcGIuVXNlchIPCgdjb250ZW50GAMgASgJEhcK",
            "D3Zpc2libGVUb1NlbmRlchgEIAEoCBIpCg9iYWNrZ3JvdW5kSW1hZ2UYBSAB",
            "KAsyEC5kb3V5aW5fcGIuSW1hZ2USGwoTZnVsbFNjcmVlblRleHRDb2xvchgG",
            "IAEoCRIrChFiYWNrZ3JvdW5kSW1hZ2VWMhgHIAEoCzIQLmRvdXlpbl9wYi5J",
            "bWFnZRI1ChBwdWJsaWNBcmVhQ29tbW9uGAkgASgLMhsuZG91eWluX3BiLlB1",
            "YmxpY0FyZWFDb21tb24SIwoJZ2lmdEltYWdlGAogASgLMhAuZG91eWluX3Bi",
            "LkltYWdlItUBCg1Tb2NpYWxNZXNzYWdlEiEKBmNvbW1vbhgBIAEoCzIRLmRv",
            "dXlpbl9wYi5Db21tb24SHQoEdXNlchgCIAEoCzIPLmRvdXlpbl9wYi5Vc2Vy",
            "EhEKCXNoYXJlVHlwZRgDIAEoAxIOCgZhY3Rpb24YBCABKAMSEwoLc2hhcmVU",
            "YXJnZXQYBSABKAkSEwoLZm9sbG93Q291bnQYBiABKAMSNQoQcHVibGljQXJl",
            "YUNvbW1vbhgHIAEoCzIbLmRvdXlpbl9wYi5QdWJsaWNBcmVhQ29tbW9uIosI",
            "Cg1NZW1iZXJNZXNzYWdlEiEKBmNvbW1vbhgBIAEoCzIRLmRvdXlpbl9wYi5D",
            "b21tb24SHQoEdXNlchgCIAEoCzIPLmRvdXlpbl9wYi5Vc2VyEhMKC21lbWJl",
            "ckNvdW50GAMgASgDEiEKCG9wZXJhdG9yGAQgASgLMg8uZG91eWluX3BiLlVz",
            "ZXISFAoMaXNTZXRUb0FkbWluGAUgASgIEhEKCWlzVG9wVXNlchgGIAEoCBIR",
            "CglyYW5rU2NvcmUYByABKAMSEQoJdG9wVXNlck5vGAggASgDEhEKCWVudGVy",
            "VHlwZRgJIAEoAxIOCgZhY3Rpb24YCiABKAMSGQoRYWN0aW9uRGVzY3JpcHRp",
            "b24YCyABKAkSDgoGdXNlcklkGAwgASgDEjsKDGVmZmVjdENvbmZpZxgNIAEo",
            "CzIlLmRvdXlpbl9wYi5NZW1iZXJNZXNzYWdlLkVmZmVjdENvbmZpZxIOCgZw",
            "b3BTdHIYDiABKAkSQAoRZW50ZXJFZmZlY3RDb25maWcYDyABKAsyJS5kb3V5",
            "aW5fcGIuTWVtYmVyTWVzc2FnZS5FZmZlY3RDb25maWcSKQoPYmFja2dyb3Vu",
            "ZEltYWdlGBAgASgLMhAuZG91eWluX3BiLkltYWdlEisKEWJhY2tncm91bmRJ",
            "bWFnZVYyGBEgASgLMhAuZG91eWluX3BiLkltYWdlEioKEWFuY2hvckRpc3Bs",
            "YXlUZXh0GBIgASgLMg8uZG91eWluX3BiLlRleHQSNQoQcHVibGljQXJlYUNv",
            "bW1vbhgTIAEoCzIbLmRvdXlpbl9wYi5QdWJsaWNBcmVhQ29tbW9uGpgDCgxF",
            "ZmZlY3RDb25maWcSDAoEdHlwZRgBIAEoAxIeCgRpY29uGAIgASgLMhAuZG91",
            "eWluX3BiLkltYWdlEhEKCWF2YXRhclBvcxgDIAEoAxIdCgR0ZXh0GAQgASgL",
            "Mg8uZG91eWluX3BiLlRleHQSIgoIdGV4dEljb24YBSABKAsyEC5kb3V5aW5f",
            "cGIuSW1hZ2USEAoIc3RheVRpbWUYBiABKAUSEwoLYW5pbUFzc2V0SWQYByAB",
            "KAMSHwoFYmFkZ2UYCCABKAsyEC5kb3V5aW5fcGIuSW1hZ2USGAoQZmxleFNl",
            "dHRpbmdBcnJheRgJIAMoAxIpCg90ZXh0SWNvbk92ZXJsYXkYCiABKAsyEC5k",
            "b3V5aW5fcGIuSW1hZ2USJwoNYW5pbWF0ZWRCYWRnZRgLIAEoCzIQLmRvdXlp",
            "bl9wYi5JbWFnZRIVCg1oYXNTd2VlcExpZ2h0GAwgASgIEhwKFHRleHRGbGV4",
            "U2V0dGluZ0FycmF5GA0gAygDEhkKEWNlbnRlckFuaW1Bc3NldElkGA4gASgD",
            "IkMKDkNvbnRyb2xNZXNzYWdlEiEKBmNvbW1vbhgBIAEoCzIRLmRvdXlpbl9w",
            "Yi5Db21tb24SDgoGc3RhdHVzGAIgASgFInYKD0ZhbnNjbHViTWVzc2FnZRIl",
            "Cgpjb21tb25JbmZvGAEgASgLMhEuZG91eWluX3BiLkNvbW1vbhIMCgR0eXBl",
            "GAIgASgFEg8KB2NvbnRlbnQYAyABKAkSHQoEdXNlchgEIAEoCzIPLmRvdXlp",
            "bl9wYi5Vc2VyIqEDCgZDb21tb24SDgoGbWV0aG9kGAEgASgJEg0KBW1zZ0lk",
            "GAIgASgDEg4KBnJvb21JZBgDIAEoAxISCgpjcmVhdGVUaW1lGAQgASgDEg8K",
            "B21vbml0b3IYBSABKAUSEQoJaXNTaG93TXNnGAYgASgIEhAKCGRlc2NyaWJl",
            "GAcgASgJEiQKC2Rpc3BsYXlUZXh0GAggASgLMg8uZG91eWluX3BiLlRleHQS",
            "EAoIZm9sZFR5cGUYCSABKAMSFgoOYW5jaG9yRm9sZFR5cGUYCiABKAMSFQoN",
            "cHJpb3JpdHlTY29yZRgLIAEoAxINCgVsb2dJZBgMIAEoCRIZChFtc2dQcm9j",
            "ZXNzRmlsdGVySxgNIAEoCRIZChFtc2dQcm9jZXNzRmlsdGVyVhgOIAEoCRId",
            "CgR1c2VyGA8gASgLMg8uZG91eWluX3BiLlVzZXISHQoEcm9vbRgQIAEoCzIP",
            "LmRvdXlpbl9wYi5Sb29tEhgKEGFuY2hvckZvbGRUeXBlVjIYESABKAMSGgoS",
            "cHJvY2Vzc0F0U2VpVGltZU1zGBIgASgDIn8KBFRleHQSCwoDa2V5GAEgASgJ",
            "EhYKDmRlZmF1bHRQYXR0ZXJuGAIgASgJEiwKDWRlZmF1bHRGb3JtYXQYAyAB",
            "KAsyFS5kb3V5aW5fcGIuVGV4dEZvcm1hdBIkCgZwaWVjZXMYBCADKAsyFC5k",
            "b3V5aW5fcGIuVGV4dFBpZWNlIpQKCgRSb29tEgoKAmlkGAEgASgDEg0KBWlk",
            "U3RyGAIgASgJEg4KBnN0YXR1cxgDIAEoAxITCgtvd25lclVzZXJJZBgEIAEo",
            "AxINCgV0aXRsZRgFIAEoCRIRCgl1c2VyQ291bnQYBiABKAMSEgoKY3JlYXRl",
            "VGltZRgHIAEoAxIVCg1saW5rbWljTGF5b3V0GAggASgDEhIKCmZpbmlzaFRp",
            "bWUYCSABKAMSIwoFZXh0cmEYCiABKAsyFC5kb3V5aW5fcGIuUm9vbUV4dHJh",
            "EhcKD2R5bmFtaWNDb3ZlclVyaRgLIAEoCRI/ChBkeW5hbWljQ292ZXJEaWN0",
            "GAwgAygLMiUuZG91eWluX3BiLlJvb20uRHluYW1pY0NvdmVyRGljdEVudHJ5",
            "EhQKDGxhc3RQaW5nVGltZRgNIAEoAxIOCgZsaXZlSWQYDiABKAMSFgoOc3Ry",
            "ZWFtUHJvdmlkZXIYDyABKAMSDgoGb3NUeXBlGBAgASgDEhUKDWNsaWVudFZl",
            "cnNpb24YESABKAMSEwoLd2l0aExpbmttaWMYEiABKAgSHQoVZW5hYmxlUm9v",
            "bVBlcnNwZWN0aXZlGBMgASgIEh8KBWNvdmVyGBQgASgLMhAuZG91eWluX3Bi",
            "LkltYWdlEiYKDGR5bmFtaWNDb3ZlchgVIAEoCzIQLmRvdXlpbl9wYi5JbWFn",
            "ZRIpCg9keW5hbWljQ292ZXJMb3cYFiABKAsyEC5kb3V5aW5fcGIuSW1hZ2US",
            "EAoIc2hhcmVVcmwYFyABKAkSFwoPYW5jaG9yU2hhcmVUZXh0GBggASgJEhUK",
            "DXVzZXJTaGFyZVRleHQYGSABKAkSEAoIc3RyZWFtSWQYGiABKAMSEwoLc3Ry",
            "ZWFtSWRTdHIYGyABKAkSJwoJc3RyZWFtVXJsGBwgASgLMhQuZG91eWluX3Bi",
            "LlN0cmVhbVVybBIUCgxtb3NhaWNTdGF0dXMYHSABKAMSEQoJbW9zYWljVGlw",
            "GB4gASgJEhEKCWNlbGxTdHlsZRgfIAEoAxIjCgdsaW5rTWljGCAgASgLMhIu",
            "ZG91eWluX3BiLkxpbmtNaWMSFQoNbHVja3ltb25leU51bRghIAEoAxInCghk",
            "ZWNvTGlzdBgiIAMoCzIVLmRvdXlpbl9wYi5EZWNvcmF0aW9uEiIKB3RvcEZh",
            "bnMYIyADKAsyES5kb3V5aW5fcGIuVG9wRmFuEiMKBXN0YXRzGCQgASgLMhQu",
            "ZG91eWluX3BiLlJvb21TdGF0cxIbChNzdW5EYWlseUljb25Db250ZW50GCUg",
            "ASgJEhAKCGRpc3RhbmNlGCYgASgJEhQKDGRpc3RhbmNlQ2l0eRgnIAEoCRIQ",
            "Cghsb2NhdGlvbhgoIAEoCRIUCgxyZWFsRGlzdGFuY2UYKSABKAkSJwoNZmVl",
            "ZFJvb21MYWJlbBgqIAEoCzIQLmRvdXlpbl9wYi5JbWFnZRIXCg9jb21tb25M",
            "YWJlbExpc3QYKyABKAkSMAoPbGl2aW5nUm9vbUF0dHJzGCwgASgLMhcuZG91",
            "eWluX3BiLlJvb21Vc2VyQXR0chIUCgxhZG1pblVzZXJJZHMYLSADKAMSHgoF",
            "b3duZXIYLiABKAsyDy5kb3V5aW5fcGIuVXNlchITCgtwcml2YXRlSW5mbxgv",
            "IAEoCRo3ChVEeW5hbWljQ292ZXJEaWN0RW50cnkSCwoDa2V5GAEgASgDEg0K",
            "BXZhbHVlGAIgASgJOgI4ASILCglSb29tRXh0cmEiCwoJUm9vbVN0YXRzIg4K",
            "DFJvb21Vc2VyQXR0ciILCglTdHJlYW1VcmwiCQoHTGlua01pYyIMCgpEZWNv",
            "cmF0aW9uIggKBlRvcEZhbiLuFwoEVXNlchIKCgJpZBgBIAEoAxIPCgdzaG9y",
            "dElkGAIgASgDEhAKCG5pY2tuYW1lGAMgASgJEg4KBmdlbmRlchgEIAEoBRIR",
            "CglzaWduYXR1cmUYBSABKAkSDQoFbGV2ZWwYBiABKAUSEAoIYmlydGhkYXkY",
            "ByABKAMSEQoJdGVsZXBob25lGAggASgJEiUKC2F2YXRhclRodW1iGAkgASgL",
            "MhAuZG91eWluX3BiLkltYWdlEiYKDGF2YXRhck1lZGl1bRgKIAEoCzIQLmRv",
            "dXlpbl9wYi5JbWFnZRIlCgthdmF0YXJMYXJnZRgLIAEoCzIQLmRvdXlpbl9w",
            "Yi5JbWFnZRIQCgh2ZXJpZmllZBgMIAEoCBISCgpleHBlcmllbmNlGA0gASgF",
            "EgwKBGNpdHkYDiABKAkSDgoGc3RhdHVzGA8gASgFEhIKCmNyZWF0ZVRpbWUY",
            "ECABKAMSEgoKbW9kaWZ5VGltZRgRIAEoAxIOCgZzZWNyZXQYEiABKAUSFgoO",
            "c2hhcmVRcmNvZGVVcmkYEyABKAkSGgoSaW5jb21lU2hhcmVQZXJjZW50GBQg",
            "ASgFEigKDmJhZGdlSW1hZ2VMaXN0GBUgASgLMhAuZG91eWluX3BiLkltYWdl",
            "Ei4KCmZvbGxvd0luZm8YFiABKAsyGi5kb3V5aW5fcGIuVXNlci5Gb2xsb3dJ",
            "bmZvEioKCHBheUdyYWRlGBcgASgLMhguZG91eWluX3BiLlVzZXIuUGF5R3Jh",
            "ZGUSKgoIZmFuc0NsdWIYGCABKAsyGC5kb3V5aW5fcGIuVXNlci5GYW5zQ2x1",
            "YhImCgZib3JkZXIYGSABKAsyFi5kb3V5aW5fcGIuVXNlci5Cb3JkZXISEQoJ",
            "c3BlY2lhbElkGBogASgJEiYKDGF2YXRhckJvcmRlchgbIAEoCzIQLmRvdXlp",
            "bl9wYi5JbWFnZRIfCgVtZWRhbBgcIAEoCzIQLmRvdXlpbl9wYi5JbWFnZRIn",
            "Cg1yZWFsVGltZUljb25zGB0gAygLMhAuZG91eWluX3BiLkltYWdlEioKEG5l",
            "d1JlYWxUaW1lSWNvbnMYHiADKAsyEC5kb3V5aW5fcGIuSW1hZ2USEAoIdG9w",
            "VmlwTm8YHyABKAMSKgoIdXNlckF0dHIYICABKAsyGC5kb3V5aW5fcGIuVXNl",
            "ci5Vc2VyQXR0chIoCgdvd25Sb29tGCEgASgLMhcuZG91eWluX3BiLlVzZXIu",
            "T3duUm9vbRIQCghwYXlTY29yZRgiIAEoAxITCgt0aWNrZXRDb3VudBgjIAEo",
            "AxIuCgphbmNob3JJbmZvGCQgASgLMhouZG91eWluX3BiLlVzZXIuQW5jaG9y",
            "SW5mbxIUCgxsaW5rTWljU3RhdHMYJSABKAUSEQoJZGlzcGxheUlkGCYgASgJ",
            "GgoKCFVzZXJBdHRyGgkKB093blJvb20aDAoKQW5jaG9ySW5mbxp5CgpGb2xs",
            "b3dJbmZvEhYKDmZvbGxvd2luZ0NvdW50GAEgASgDEhUKDWZvbGxvd2VyQ291",
            "bnQYAiABKAMSFAoMZm9sbG93U3RhdHVzGAMgASgDEhIKCnB1c2hTdGF0dXMY",
            "BCABKAMSEgoKcmVtYXJrTmFtZRgFIAEoCRq5BAoIRmFuc0NsdWISMwoEZGF0",
            "YRgBIAEoCzIlLmRvdXlpbl9wYi5Vc2VyLkZhbnNDbHViLkZhbnNDbHViRGF0",
            "YRI8CgpwcmVmZXJEYXRhGAIgAygLMiguZG91eWluX3BiLlVzZXIuRmFuc0Ns",
            "dWIuUHJlZmVyRGF0YUVudHJ5GlgKD1ByZWZlckRhdGFFbnRyeRILCgNrZXkY",
            "ASABKAUSNAoFdmFsdWUYAiABKAsyJS5kb3V5aW5fcGIuVXNlci5GYW5zQ2x1",
            "Yi5GYW5zQ2x1YkRhdGE6AjgBGt8CCgxGYW5zQ2x1YkRhdGESEAoIY2x1Yk5h",
            "bWUYASABKAkSDQoFbGV2ZWwYAiABKAUSGgoSdXNlckZhbnNDbHViU3RhdHVz",
            "GAMgASgFEj4KBWJhZGdlGAQgASgLMi8uZG91eWluX3BiLlVzZXIuRmFuc0Ns",
            "dWIuRmFuc0NsdWJEYXRhLlVzZXJCYWRnZRIYChBhdmFpbGFibGVHaWZ0SWRz",
            "GAUgAygDEhAKCGFuY2hvcklkGAYgASgDGqUBCglVc2VyQmFkZ2USSQoFaWNv",
            "bnMYASADKAsyOi5kb3V5aW5fcGIuVXNlci5GYW5zQ2x1Yi5GYW5zQ2x1YkRh",
            "dGEuVXNlckJhZGdlLkljb25zRW50cnkSDQoFdGl0bGUYAiABKAkaPgoKSWNv",
            "bnNFbnRyeRILCgNrZXkYASABKAUSHwoFdmFsdWUYAiABKAsyEC5kb3V5aW5f",
            "cGIuSW1hZ2U6AjgBGggKBkJvcmRlchrbAQoNR3JhZGVCdWZmSW5mbxIRCgli",
            "dWZmTGV2ZWwYASABKAMSDgoGc3RhdHVzGAIgASgFEg8KB2VuZFRpbWUYAyAB",
            "KAMSPwoJc3RhdHNJbmZvGAQgAygLMiwuZG91eWluX3BiLlVzZXIuR3JhZGVC",
            "dWZmSW5mby5TdGF0c0luZm9FbnRyeRIjCglidWZmQmFkZ2UYBSABKAsyEC5k",
            "b3V5aW5fcGIuSW1hZ2UaMAoOU3RhdHNJbmZvRW50cnkSCwoDa2V5GAEgASgD",
            "Eg0KBXZhbHVlGAIgASgDOgI4ARqCCAoIUGF5R3JhZGUSGQoRdG90YWxEaWFt",
            "b25kQ291bnQYASABKAMSJQoLZGlhbW9uZEljb24YAiABKAsyEC5kb3V5aW5f",
            "cGIuSW1hZ2USDAoEbmFtZRgDIAEoCRIeCgRpY29uGAQgASgLMhAuZG91eWlu",
            "X3BiLkltYWdlEhAKCG5leHROYW1lGAUgASgJEg0KBWxldmVsGAYgASgDEiIK",
            "CG5leHRJY29uGAcgASgLMhAuZG91eWluX3BiLkltYWdlEhMKC25leHREaWFt",
            "b25kGAggASgDEhIKCm5vd0RpYW1vbmQYCSABKAMSGwoTdGhpc0dyYWRlTWlu",
            "RGlhbW9uZBgKIAEoAxIbChN0aGlzR3JhZGVNYXhEaWFtb25kGAsgASgDEhUK",
            "DXBheURpYW1vbmRCYWsYDCABKAMSFQoNZ3JhZGVEZXNjcmliZRgNIAEoCRI5",
            "Cg1ncmFkZUljb25MaXN0GA4gAygLMiIuZG91eWluX3BiLlVzZXIuUGF5R3Jh",
            "ZGUuR3JhZGVJY29uEhYKDnNjcmVlbkNoYXRUeXBlGA8gASgDEiAKBmltSWNv",
            "bhgQIAEoCzIQLmRvdXlpbl9wYi5JbWFnZRIpCg9pbUljb25XaXRoTGV2ZWwY",
            "ESABKAsyEC5kb3V5aW5fcGIuSW1hZ2USIgoIbGl2ZUljb24YEiABKAsyEC5k",
            "b3V5aW5fcGIuSW1hZ2USLAoSbmV3SW1JY29uV2l0aExldmVsGBMgASgLMhAu",
            "ZG91eWluX3BiLkltYWdlEiUKC25ld0xpdmVJY29uGBQgASgLMhAuZG91eWlu",
            "X3BiLkltYWdlEhoKEnVwZ3JhZGVOZWVkQ29uc3VtZRgVIAEoAxIWCg5uZXh0",
            "UHJpdmlsZWdlcxgWIAEoCRIkCgpiYWNrZ3JvdW5kGBcgASgLMhAuZG91eWlu",
            "X3BiLkltYWdlEigKDmJhY2tncm91bmRCYWNrGBggASgLMhAuZG91eWluX3Bi",
            "LkltYWdlEg0KBXNjb3JlGBkgASgDEi8KCGJ1ZmZJbmZvGBogASgLMh0uZG91",
            "eWluX3BiLlVzZXIuR3JhZGVCdWZmSW5mbxIUCgtncmFkZUJhbm5lchjpByAB",
            "KAkSKgoPcHJvZmlsZURpYWxvZ0JnGOoHIAEoCzIQLmRvdXlpbl9wYi5JbWFn",
            "ZRIuChNwcm9maWxlRGlhbG9nQmdCYWNrGOsHIAEoCzIQLmRvdXlpbl9wYi5J",
            "bWFnZRphCglHcmFkZUljb24SHgoEaWNvbhgBIAEoCzIQLmRvdXlpbl9wYi5J",
            "bWFnZRITCgtpY29uRGlhbW9uZBgCIAEoAxINCgVsZXZlbBgDIAEoAxIQCghs",
            "ZXZlbFN0chgEIAEoCSKlAQoKVGV4dEZvcm1hdBINCgVjb2xvchgBIAEoCRIM",
            "CgRib2xkGAIgASgIEg4KBml0YWxpYxgDIAEoCBIOCgZ3ZWlnaHQYBCABKAUS",
            "EwoLaXRhbGljQW5nbGUYBSABKAUSEAoIZm9udFNpemUYBiABKAUSHAoUdXNl",
            "ckhlaWdodExpZ2h0Q29sb3IYByABKAgSFQoNdXNlUmVtb3RlQ2xvchgIIAEo",
            "CCKCAQoJVGV4dFBpZWNlEgwKBHR5cGUYASABKAUSJQoGZm9ybWF0GAIgASgL",
            "MhUuZG91eWluX3BiLlRleHRGb3JtYXQSEwoLc3RyaW5nVmFsdWUYCyABKAkS",
            "KwoJdXNlclZhbHVlGBUgASgLMhguZG91eWluX3BiLlRleHRQaWVjZVVzZXIi",
            "kAIKBUltYWdlEg8KB3VybExpc3QYASADKAkSCwoDdXJpGAIgASgJEg4KBmhl",
            "aWdodBgDIAEoAxINCgV3aWR0aBgEIAEoAxIQCghhdmdDb2xvchgFIAEoCRIR",
            "CglpbWFnZVR5cGUYBiABKAUSEgoKb3BlbldlYlVybBgHIAEoCRIpCgdjb250",
            "ZW50GAggASgLMhguZG91eWluX3BiLkltYWdlLkNvbnRlbnQSEgoKaXNBbmlt",
            "YXRlZBgJIAEoCBpSCgdDb250ZW50EgwKBG5hbWUYASABKAkSEQoJZm9udENv",
            "bG9yGAIgASgJEg0KBWxldmVsGAMgASgDEhcKD2FsdGVybmF0aXZlVGV4dBgE",
            "IAEoCSJBCg1UZXh0UGllY2VVc2VyEh0KBHVzZXIYASABKAsyDy5kb3V5aW5f",
            "cGIuVXNlchIRCgl3aXRoQ29sb24YAiABKAgicQoQUHVibGljQXJlYUNvbW1v",
            "bhIjCgl1c2VyTGFiZWwYASABKAsyEC5kb3V5aW5fcGIuSW1hZ2USGQoRdXNl",
            "ckNvbnN1bWVJblJvb20YAiABKAMSHQoVdXNlclNlbmRHaWZ0Q250SW5Sb29t",
            "GAMgASgDIlEKDkdpZnRJTVByaW9yaXR5EhIKCnF1ZXVlU2l6ZXMYASABKAkS",
            "GQoRc2VsZlF1ZXVlUHJpb3JpdHkYAiABKAMSEAoIcHJpb3JpdHkYAyABKAMi",
            "6wEKDEdpZnRUcmF5SW5mbxIoCg90cmF5RGlzcGxheVRleHQYASABKAsyDy5k",
            "b3V5aW5fcGIuVGV4dBIlCgt0cmF5QmFzZUltZxgCIAEoCzIQLmRvdXlpbl9w",
            "Yi5JbWFnZRIlCgt0cmF5SGVhZEltZxgDIAEoCzIQLmRvdXlpbl9wYi5JbWFn",
            "ZRImCgx0cmF5UmlnaHRJbWcYBCABKAsyEC5kb3V5aW5fcGIuSW1hZ2USEQoJ",
            "dHJheUxldmVsGAUgASgDEigKDnRyYXlEeW5hbWljSW1nGAYgASgLMhAuZG91",
            "eWluX3BiLkltYWdlIpANCgpHaWZ0U3RydWN0Eh8KBWltYWdlGAEgASgLMhAu",
            "ZG91eWluX3BiLkltYWdlEhAKCGRlc2NyaWJlGAIgASgJEg4KBm5vdGlmeRgD",
            "IAEoCBIQCghkdXJhdGlvbhgEIAEoAxIKCgJpZBgFIAEoAxJCCgxmYW5zY2x1",
            "YkluZm8YBiABKAsyLC5kb3V5aW5fcGIuR2lmdFN0cnVjdC5HaWZ0U3RydWN0",
            "RmFuc0NsdWJJbmZvEhIKCmZvckxpbmttaWMYByABKAgSDgoGZG9vZGxlGAgg",
            "ASgIEhMKC2ZvckZhbnNjbHViGAkgASgIEg0KBWNvbWJvGAogASgIEgwKBHR5",
            "cGUYCyABKAUSFAoMZGlhbW9uZENvdW50GAwgASgFEhoKEmlzRGlzcGxheWVk",
            "T25QYW5lbBgNIAEoBRIXCg9wcmltYXJ5RWZmZWN0SWQYDiABKAMSJwoNZ2lm",
            "dExhYmVsSWNvbhgPIAEoCzIQLmRvdXlpbl9wYi5JbWFnZRIMCgRuYW1lGBAg",
            "ASgJEg4KBnJlZ2lvbhgRIAEoCRIOCgZtYW51YWwYEiABKAkSEQoJZm9yQ3Vz",
            "dG9tGBMgASgIEkEKDnNwZWNpYWxFZmZlY3RzGBQgAygLMikuZG91eWluX3Bi",
            "LkdpZnRTdHJ1Y3QuU3BlY2lhbEVmZmVjdHNFbnRyeRIeCgRpY29uGBUgASgL",
            "MhAuZG91eWluX3BiLkltYWdlEhIKCmFjdGlvblR5cGUYFiABKAUSFwoPd2F0",
            "ZXJtZWxvblNlZWRzGBcgASgFEhIKCmdvbGRFZmZlY3QYGCABKAkSKwoEc3Vi",
            "cxgZIAMoCzIdLmRvdXlpbl9wYi5MdWNreU1vbmV5R2lmdE1ldGESEwoLZ29s",
            "ZGVuQmVhbnMYGiABKAMSEgoKaG9ub3JMZXZlbBgbIAEoAxIQCghpdGVtVHlw",
            "ZRgcIAEoBRIRCglzY2hlbWVVcmwYHSABKAkSNAoNZ2lmdE9wZXJhdGlvbhge",
            "IAEoCzIdLmRvdXlpbl9wYi5HaWZ0UGFuZWxPcGVyYXRpb24SEQoJZXZlbnRO",
            "YW1lGB8gASgJEhIKCm5vYmxlTGV2ZWwYICABKAMSEAoIZ3VpZGVVcmwYISAB",
            "KAkSFgoOcHVuaXNoTWVkaWNpbmUYIiABKAgSEQoJZm9yUG9ydGFsGCMgASgI",
            "EhQKDGJ1c2luZXNzVGV4dBgkIAEoCRIPCgdjbnlHaWZ0GCUgASgIEg0KBWFw",
            "cElkGCYgASgDEhAKCHZpcExldmVsGCcgASgDEg4KBmlzR3JheRgoIAEoCBIV",
            "Cg1ncmF5U2NoZW1lVXJsGCkgASgJEhEKCWdpZnRTY2VuZRgqIAEoAxIpCgpn",
            "aWZ0QmFubmVyGCsgASgLMhUuZG91eWluX3BiLkdpZnRCYW5uZXISFAoMdHJp",
            "Z2dlcldvcmRzGCwgAygJEi4KDWdpZnRCdWZmSW5mb3MYLSADKAsyFy5kb3V5",
            "aW5fcGIuR2lmdEJ1ZmZJbmZvEhgKEGZvckZpcnN0UmVjaGFyZ2UYLiABKAgS",
            "LwoVZHluYW1pY0ltZ0ZvclNlbGVjdGVkGC8gASgLMhAuZG91eWluX3BiLklt",
            "YWdlEhcKD2FmdGVyU2VuZEFjdGlvbhgwIAEoBRIXCg9naWZ0T2ZmbGluZVRp",
            "bWUYMSABKAMSEgoKdG9wQmFyVGV4dBgyIAEoCRIoCg50b3BSaWdodEF2YXRh",
            "chgzIAEoCzIQLmRvdXlpbl9wYi5JbWFnZRIXCg9iYW5uZXJTY2hlbWVVcmwY",
            "NCABKAkSEAoIaXNMb2NrZWQYNSABKAgSFAoMcmVxRXh0cmFUeXBlGDYgASgD",
            "EhAKCGFzc2V0SWRzGDcgAygDEjMKD2dpZnRQcmV2aWV3SW5mbxg4IAEoCzIa",
            "LmRvdXlpbl9wYi5HaWZ0UHJldmlld0luZm8SIwoHZ2lmdFRpcBg5IAEoCzIS",
            "LmRvdXlpbl9wYi5HaWZ0VGlwEhsKE25lZWRTd2VlcExpZ2h0Q291bnQYOiAB",
            "KAUSKwoJZ3JvdXBJbmZvGDsgAygLMhguZG91eWluX3BiLkdpZnRHcm91cElu",
            "Zm8aNQoTU3BlY2lhbEVmZmVjdHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAM6AjgBGj0KFkdpZnRTdHJ1Y3RGYW5zQ2x1YkluZm8SEAoIbWlu",
            "TGV2ZWwYASABKAUSEQoJaW5zZXJ0UG9zGAIgASgFIhQKEkFzc2V0RWZmZWN0",
            "TWl4SW5mbyIUChJMdWNreU1vbmV5R2lmdE1ldGEiFAoSR2lmdFBhbmVsT3Bl",
            "cmF0aW9uIgwKCkdpZnRCYW5uZXIiDgoMR2lmdEJ1ZmZJbmZvIhEKD0dpZnRQ",
            "cmV2aWV3SW5mbyIJCgdHaWZ0VGlwIg8KDUdpZnRHcm91cEluZm8iFAoSRWZm",
            "ZWN0TWl4SW1hZ2VJbmZvImIKEFJvb21TdGF0c01lc3NhZ2USIQoGY29tbW9u",
            "GAEgASgLMhEuZG91eWluX3BiLkNvbW1vbhIQCghkZXNjcmliZRgEIAEoCRIL",
            "CgNudW0YBSABKAUSDAoEdGltZRgGIAEoAyKhAQoQQXVkaW9DaGF0TWVzc2Fn",
            "ZRIhCgZjb21tb24YASABKAsyES5kb3V5aW5fcGIuQ29tbW9uEh0KBHVzZXIY",
            "AiABKAsyDy5kb3V5aW5fcGIuVXNlchIPCgdjb250ZW50GAMgASgJEgsKA3Vy",
            "aRgEIAEoCRIMCgRzaXplGAUgASgFEh8KBWltYWdzGAYgAygLMhAuZG91eWlu",
            "X3BiLkltYWdlIl0KEkJpbmRpbmdHaWZ0TWVzc2FnZRIkCgRnaWZ0GAEgASgL",
            "MhYuZG91eWluX3BiLkdpZnRNZXNzYWdlEiEKBmNvbW1vbhgCIAEoCzIRLmRv",
            "dXlpbl9wYi5Db21tb24iWQoVRXhoaWJpdGlvbkNoYXRNZXNzYWdlEiEKBmNv",
            "bW1vbhgBIAEoCzIRLmRvdXlpbl9wYi5Db21tb24SHQoEdGV4dBgCIAEoCzIP",
            "LmRvdXlpbl9wYi5UZXh0IlQKD1Jvb21SYW5rTWVzc2FnZRIhCgZjb21tb24Y",
            "ASABKAsyES5kb3V5aW5fcGIuQ29tbW9uEh4KBXVzZXJzGAIgAygLMg8uZG91",
            "eWluX3BiLlVzZXIiVAoQSGlnaGxpZ2h0Q29tbWVudBIhCgZjb21tb24YASAB",
            "KAsyES5kb3V5aW5fcGIuQ29tbW9uEg8KB2NvbnRlbnQYByABKAkSDAoEbmFt",
            "ZRgPIAEoCSJTChNJblJvb21CYW5uZXJNZXNzYWdlEiEKBmNvbW1vbhgBIAEo",
            "CzIRLmRvdXlpbl9wYi5Db21tb24SDAoEanNvbhgCIAEoCRILCgNudW0YAyAB",
            "KAUinwEKEVNjcmVlbkNoYXRNZXNzYWdlEiEKBmNvbW1vbhgBIAEoCzIRLmRv",
            "dXlpbl9wYi5Db21tb24SHQoEdXNlchgCIAEoCzIPLmRvdXlpbl9wYi5Vc2Vy",
            "Eg8KB2NvbnRlbnQYBCABKAkSKQoEYXJlYRgKIAEoCzIbLmRvdXlpbl9wYi5Q",
            "dWJsaWNBcmVhQ29tbW9uEgwKBHRpbWUYDCABKAMiQgoLUm9vbU1lc3NhZ2US",
            "IQoGY29tbW9uGAEgASgLMhEuZG91eWluX3BiLkNvbW1vbhIQCghkZXNjcmli",
            "ZRgCIAEoCSJiCg5Ib3RDaGF0TWVzc2FnZRIhCgZjb21tb24YASABKAsyES5k",
            "b3V5aW5fcGIuQ29tbW9uEhAKCGRlc2NyaWJlGAIgASgJEg8KB2NvbnRlbnQY",
            "AyABKAkSCgoCZDMYBiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.WssResponse), global::DouyinPb.WssResponse.Parser, new[]{ "Seqid", "Logid", "Service", "Method", "Headers", "PayloadEncoding", "PayloadType", "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Response), global::DouyinPb.Response.Parser, new[]{ "Messages", "Cursor", "FetchInterval", "Now", "InternalExt", "FetchType", "RouteParams", "HeartbeatDuration", "NeedAck", "PushServer", "LiveCursor", "HistoryNoMore" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Message), global::DouyinPb.Message.Parser, new[]{ "Method", "Payload", "MsgId", "MsgType", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomUserSeqMessage), global::DouyinPb.RoomUserSeqMessage.Parser, new[]{ "Common", "Ranks", "Total", "PopStr", "Seats", "Popularity", "TotalUser", "TotalUserStr", "TotalStr", "OnlineUserForAnchor", "TotalPvForAnchor" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomUserSeqMessage.Types.Contributor), global::DouyinPb.RoomUserSeqMessage.Types.Contributor.Parser, new[]{ "Score", "User", "Rank", "Delta", "IsHidden", "ScoreDescription", "ExactlyScore" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftMessage), global::DouyinPb.GiftMessage.Parser, new[]{ "Common", "GiftId", "FanTicketCount", "GroupCount", "RepeatCount", "ComboCount", "User", "ToUser", "RepeatEnd", "TextEffect", "GroupId", "IncomeTaskgifts", "RoomFanTicketCount", "Priority", "Gift", "LogId", "SendType", "PublicAreaCommon", "TrayDisplayText", "BannedDisplayEffects", "TrayInfo", "AssetEffectMixInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftMessage.Types.TextEffect), global::DouyinPb.GiftMessage.Types.TextEffect.Parser, new[]{ "Portrait", "Landscape" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail), global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail.Parser, new[]{ "Text", "TextFontSize", "Background", "Start", "Duration", "X", "Y", "Width", "Height", "ShadowDx", "ShadowDy", "ShadowRadius", "ShadowColor", "StrokeColor", "StrokeWidth" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.LikeMessage), global::DouyinPb.LikeMessage.Parser, new[]{ "Common", "Count", "Total", "Color", "User", "Icon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.ChatMessage), global::DouyinPb.ChatMessage.Parser, new[]{ "Common", "User", "Content", "VisibleToSender", "BackgroundImage", "FullScreenTextColor", "BackgroundImageV2", "PublicAreaCommon", "GiftImage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.SocialMessage), global::DouyinPb.SocialMessage.Parser, new[]{ "Common", "User", "ShareType", "Action", "ShareTarget", "FollowCount", "PublicAreaCommon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.MemberMessage), global::DouyinPb.MemberMessage.Parser, new[]{ "Common", "User", "MemberCount", "Operator", "IsSetToAdmin", "IsTopUser", "RankScore", "TopUserNo", "EnterType", "Action", "ActionDescription", "UserId", "EffectConfig", "PopStr", "EnterEffectConfig", "BackgroundImage", "BackgroundImageV2", "AnchorDisplayText", "PublicAreaCommon" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.MemberMessage.Types.EffectConfig), global::DouyinPb.MemberMessage.Types.EffectConfig.Parser, new[]{ "Type", "Icon", "AvatarPos", "Text", "TextIcon", "StayTime", "AnimAssetId", "Badge", "FlexSettingArray", "TextIconOverlay", "AnimatedBadge", "HasSweepLight", "TextFlexSettingArray", "CenterAnimAssetId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.ControlMessage), global::DouyinPb.ControlMessage.Parser, new[]{ "Common", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.FansclubMessage), global::DouyinPb.FansclubMessage.Parser, new[]{ "CommonInfo", "Type", "Content", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Common), global::DouyinPb.Common.Parser, new[]{ "Method", "MsgId", "RoomId", "CreateTime", "Monitor", "IsShowMsg", "Describe", "DisplayText", "FoldType", "AnchorFoldType", "PriorityScore", "LogId", "MsgProcessFilterK", "MsgProcessFilterV", "User", "Room", "AnchorFoldTypeV2", "ProcessAtSeiTimeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Text), global::DouyinPb.Text.Parser, new[]{ "Key", "DefaultPattern", "DefaultFormat", "Pieces" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Room), global::DouyinPb.Room.Parser, new[]{ "Id", "IdStr", "Status", "OwnerUserId", "Title", "UserCount", "CreateTime", "LinkmicLayout", "FinishTime", "Extra", "DynamicCoverUri", "DynamicCoverDict", "LastPingTime", "LiveId", "StreamProvider", "OsType", "ClientVersion", "WithLinkmic", "EnableRoomPerspective", "Cover", "DynamicCover", "DynamicCoverLow", "ShareUrl", "AnchorShareText", "UserShareText", "StreamId", "StreamIdStr", "StreamUrl", "MosaicStatus", "MosaicTip", "CellStyle", "LinkMic", "LuckymoneyNum", "DecoList", "TopFans", "Stats", "SunDailyIconContent", "Distance", "DistanceCity", "Location", "RealDistance", "FeedRoomLabel", "CommonLabelList", "LivingRoomAttrs", "AdminUserIds", "Owner", "PrivateInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomExtra), global::DouyinPb.RoomExtra.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomStats), global::DouyinPb.RoomStats.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomUserAttr), global::DouyinPb.RoomUserAttr.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.StreamUrl), global::DouyinPb.StreamUrl.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.LinkMic), global::DouyinPb.LinkMic.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Decoration), global::DouyinPb.Decoration.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.TopFan), global::DouyinPb.TopFan.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User), global::DouyinPb.User.Parser, new[]{ "Id", "ShortId", "Nickname", "Gender", "Signature", "Level", "Birthday", "Telephone", "AvatarThumb", "AvatarMedium", "AvatarLarge", "Verified", "Experience", "City", "Status", "CreateTime", "ModifyTime", "Secret", "ShareQrcodeUri", "IncomeSharePercent", "BadgeImageList", "FollowInfo", "PayGrade", "FansClub", "Border", "SpecialId", "AvatarBorder", "Medal", "RealTimeIcons", "NewRealTimeIcons", "TopVipNo", "UserAttr", "OwnRoom", "PayScore", "TicketCount", "AnchorInfo", "LinkMicStats", "DisplayId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.UserAttr), global::DouyinPb.User.Types.UserAttr.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.OwnRoom), global::DouyinPb.User.Types.OwnRoom.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.AnchorInfo), global::DouyinPb.User.Types.AnchorInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.FollowInfo), global::DouyinPb.User.Types.FollowInfo.Parser, new[]{ "FollowingCount", "FollowerCount", "FollowStatus", "PushStatus", "RemarkName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.FansClub), global::DouyinPb.User.Types.FansClub.Parser, new[]{ "Data", "PreferData" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.FansClub.Types.FansClubData), global::DouyinPb.User.Types.FansClub.Types.FansClubData.Parser, new[]{ "ClubName", "Level", "UserFansClubStatus", "Badge", "AvailableGiftIds", "AnchorId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.FansClub.Types.FansClubData.Types.UserBadge), global::DouyinPb.User.Types.FansClub.Types.FansClubData.Types.UserBadge.Parser, new[]{ "Icons", "Title" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.Border), global::DouyinPb.User.Types.Border.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.GradeBuffInfo), global::DouyinPb.User.Types.GradeBuffInfo.Parser, new[]{ "BuffLevel", "Status", "EndTime", "StatsInfo", "BuffBadge" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.PayGrade), global::DouyinPb.User.Types.PayGrade.Parser, new[]{ "TotalDiamondCount", "DiamondIcon", "Name", "Icon", "NextName", "Level", "NextIcon", "NextDiamond", "NowDiamond", "ThisGradeMinDiamond", "ThisGradeMaxDiamond", "PayDiamondBak", "GradeDescribe", "GradeIconList", "ScreenChatType", "ImIcon", "ImIconWithLevel", "LiveIcon", "NewImIconWithLevel", "NewLiveIcon", "UpgradeNeedConsume", "NextPrivileges", "Background", "BackgroundBack", "Score", "BuffInfo", "GradeBanner", "ProfileDialogBg", "ProfileDialogBgBack" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.User.Types.PayGrade.Types.GradeIcon), global::DouyinPb.User.Types.PayGrade.Types.GradeIcon.Parser, new[]{ "Icon", "IconDiamond", "Level", "LevelStr" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.TextFormat), global::DouyinPb.TextFormat.Parser, new[]{ "Color", "Bold", "Italic", "Weight", "ItalicAngle", "FontSize", "UserHeightLightColor", "UseRemoteClor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.TextPiece), global::DouyinPb.TextPiece.Parser, new[]{ "Type", "Format", "StringValue", "UserValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Image), global::DouyinPb.Image.Parser, new[]{ "UrlList", "Uri", "Height", "Width", "AvgColor", "ImageType", "OpenWebUrl", "Content", "IsAnimated" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.Image.Types.Content), global::DouyinPb.Image.Types.Content.Parser, new[]{ "Name", "FontColor", "Level", "AlternativeText" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.TextPieceUser), global::DouyinPb.TextPieceUser.Parser, new[]{ "User", "WithColon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.PublicAreaCommon), global::DouyinPb.PublicAreaCommon.Parser, new[]{ "UserLabel", "UserConsumeInRoom", "UserSendGiftCntInRoom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftIMPriority), global::DouyinPb.GiftIMPriority.Parser, new[]{ "QueueSizes", "SelfQueuePriority", "Priority" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftTrayInfo), global::DouyinPb.GiftTrayInfo.Parser, new[]{ "TrayDisplayText", "TrayBaseImg", "TrayHeadImg", "TrayRightImg", "TrayLevel", "TrayDynamicImg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftStruct), global::DouyinPb.GiftStruct.Parser, new[]{ "Image", "Describe", "Notify", "Duration", "Id", "FansclubInfo", "ForLinkmic", "Doodle", "ForFansclub", "Combo", "Type", "DiamondCount", "IsDisplayedOnPanel", "PrimaryEffectId", "GiftLabelIcon", "Name", "Region", "Manual", "ForCustom", "SpecialEffects", "Icon", "ActionType", "WatermelonSeeds", "GoldEffect", "Subs", "GoldenBeans", "HonorLevel", "ItemType", "SchemeUrl", "GiftOperation", "EventName", "NobleLevel", "GuideUrl", "PunishMedicine", "ForPortal", "BusinessText", "CnyGift", "AppId", "VipLevel", "IsGray", "GraySchemeUrl", "GiftScene", "GiftBanner", "TriggerWords", "GiftBuffInfos", "ForFirstRecharge", "DynamicImgForSelected", "AfterSendAction", "GiftOfflineTime", "TopBarText", "TopRightAvatar", "BannerSchemeUrl", "IsLocked", "ReqExtraType", "AssetIds", "GiftPreviewInfo", "GiftTip", "NeedSweepLightCount", "GroupInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftStruct.Types.GiftStructFansClubInfo), global::DouyinPb.GiftStruct.Types.GiftStructFansClubInfo.Parser, new[]{ "MinLevel", "InsertPos" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.AssetEffectMixInfo), global::DouyinPb.AssetEffectMixInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.LuckyMoneyGiftMeta), global::DouyinPb.LuckyMoneyGiftMeta.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftPanelOperation), global::DouyinPb.GiftPanelOperation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftBanner), global::DouyinPb.GiftBanner.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftBuffInfo), global::DouyinPb.GiftBuffInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftPreviewInfo), global::DouyinPb.GiftPreviewInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftTip), global::DouyinPb.GiftTip.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.GiftGroupInfo), global::DouyinPb.GiftGroupInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.EffectMixImageInfo), global::DouyinPb.EffectMixImageInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomStatsMessage), global::DouyinPb.RoomStatsMessage.Parser, new[]{ "Common", "Describe", "Num", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.AudioChatMessage), global::DouyinPb.AudioChatMessage.Parser, new[]{ "Common", "User", "Content", "Uri", "Size", "Imags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.BindingGiftMessage), global::DouyinPb.BindingGiftMessage.Parser, new[]{ "Gift", "Common" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.ExhibitionChatMessage), global::DouyinPb.ExhibitionChatMessage.Parser, new[]{ "Common", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomRankMessage), global::DouyinPb.RoomRankMessage.Parser, new[]{ "Common", "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.HighlightComment), global::DouyinPb.HighlightComment.Parser, new[]{ "Common", "Content", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.InRoomBannerMessage), global::DouyinPb.InRoomBannerMessage.Parser, new[]{ "Common", "Json", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.ScreenChatMessage), global::DouyinPb.ScreenChatMessage.Parser, new[]{ "Common", "User", "Content", "Area", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.RoomMessage), global::DouyinPb.RoomMessage.Parser, new[]{ "Common", "Describe" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DouyinPb.HotChatMessage), global::DouyinPb.HotChatMessage.Parser, new[]{ "Common", "Describe", "Content", "D3" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WssResponse : pb::IMessage<WssResponse> {
    private static readonly pb::MessageParser<WssResponse> _parser = new pb::MessageParser<WssResponse>(() => new WssResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WssResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WssResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WssResponse(WssResponse other) : this() {
      seqid_ = other.seqid_;
      logid_ = other.logid_;
      service_ = other.service_;
      method_ = other.method_;
      headers_ = other.headers_.Clone();
      payloadEncoding_ = other.payloadEncoding_;
      payloadType_ = other.payloadType_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WssResponse Clone() {
      return new WssResponse(this);
    }

    /// <summary>Field number for the "seqid" field.</summary>
    public const int SeqidFieldNumber = 1;
    private ulong seqid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seqid {
      get { return seqid_; }
      set {
        seqid_ = value;
      }
    }

    /// <summary>Field number for the "logid" field.</summary>
    public const int LogidFieldNumber = 2;
    private ulong logid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Logid {
      get { return logid_; }
      set {
        logid_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 3;
    private ulong service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 4;
    private ulong method_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Method {
      get { return method_; }
      set {
        method_ = value;
      }
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_headers_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> headers_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "payloadEncoding" field.</summary>
    public const int PayloadEncodingFieldNumber = 6;
    private string payloadEncoding_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayloadEncoding {
      get { return payloadEncoding_; }
      set {
        payloadEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payloadType" field.</summary>
    public const int PayloadTypeFieldNumber = 7;
    private string payloadType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayloadType {
      get { return payloadType_; }
      set {
        payloadType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WssResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WssResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seqid != other.Seqid) return false;
      if (Logid != other.Logid) return false;
      if (Service != other.Service) return false;
      if (Method != other.Method) return false;
      if (!Headers.Equals(other.Headers)) return false;
      if (PayloadEncoding != other.PayloadEncoding) return false;
      if (PayloadType != other.PayloadType) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seqid != 0UL) hash ^= Seqid.GetHashCode();
      if (Logid != 0UL) hash ^= Logid.GetHashCode();
      if (Service != 0UL) hash ^= Service.GetHashCode();
      if (Method != 0UL) hash ^= Method.GetHashCode();
      hash ^= Headers.GetHashCode();
      if (PayloadEncoding.Length != 0) hash ^= PayloadEncoding.GetHashCode();
      if (PayloadType.Length != 0) hash ^= PayloadType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seqid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Seqid);
      }
      if (Logid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Logid);
      }
      if (Service != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Service);
      }
      if (Method != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Method);
      }
      headers_.WriteTo(output, _map_headers_codec);
      if (PayloadEncoding.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PayloadEncoding);
      }
      if (PayloadType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PayloadType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seqid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seqid);
      }
      if (Logid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Logid);
      }
      if (Service != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Service);
      }
      if (Method != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Method);
      }
      size += headers_.CalculateSize(_map_headers_codec);
      if (PayloadEncoding.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadEncoding);
      }
      if (PayloadType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WssResponse other) {
      if (other == null) {
        return;
      }
      if (other.Seqid != 0UL) {
        Seqid = other.Seqid;
      }
      if (other.Logid != 0UL) {
        Logid = other.Logid;
      }
      if (other.Service != 0UL) {
        Service = other.Service;
      }
      if (other.Method != 0UL) {
        Method = other.Method;
      }
      headers_.Add(other.headers_);
      if (other.PayloadEncoding.Length != 0) {
        PayloadEncoding = other.PayloadEncoding;
      }
      if (other.PayloadType.Length != 0) {
        PayloadType = other.PayloadType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seqid = input.ReadUInt64();
            break;
          }
          case 16: {
            Logid = input.ReadUInt64();
            break;
          }
          case 24: {
            Service = input.ReadUInt64();
            break;
          }
          case 32: {
            Method = input.ReadUInt64();
            break;
          }
          case 42: {
            headers_.AddEntriesFrom(input, _map_headers_codec);
            break;
          }
          case 50: {
            PayloadEncoding = input.ReadString();
            break;
          }
          case 58: {
            PayloadType = input.ReadString();
            break;
          }
          case 66: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      messages_ = other.messages_.Clone();
      cursor_ = other.cursor_;
      fetchInterval_ = other.fetchInterval_;
      now_ = other.now_;
      internalExt_ = other.internalExt_;
      fetchType_ = other.fetchType_;
      routeParams_ = other.routeParams_.Clone();
      heartbeatDuration_ = other.heartbeatDuration_;
      needAck_ = other.needAck_;
      pushServer_ = other.pushServer_;
      liveCursor_ = other.liveCursor_;
      historyNoMore_ = other.historyNoMore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DouyinPb.Message> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::DouyinPb.Message.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.Message> messages_ = new pbc::RepeatedField<global::DouyinPb.Message>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.Message> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fetchInterval" field.</summary>
    public const int FetchIntervalFieldNumber = 3;
    private long fetchInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FetchInterval {
      get { return fetchInterval_; }
      set {
        fetchInterval_ = value;
      }
    }

    /// <summary>Field number for the "now" field.</summary>
    public const int NowFieldNumber = 4;
    private long now_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    /// <summary>Field number for the "internalExt" field.</summary>
    public const int InternalExtFieldNumber = 5;
    private string internalExt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalExt {
      get { return internalExt_; }
      set {
        internalExt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fetchType" field.</summary>
    public const int FetchTypeFieldNumber = 6;
    private int fetchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FetchType {
      get { return fetchType_; }
      set {
        fetchType_ = value;
      }
    }

    /// <summary>Field number for the "routeParams" field.</summary>
    public const int RouteParamsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_routeParams_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 58);
    private readonly pbc::MapField<string, string> routeParams_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RouteParams {
      get { return routeParams_; }
    }

    /// <summary>Field number for the "heartbeatDuration" field.</summary>
    public const int HeartbeatDurationFieldNumber = 8;
    private long heartbeatDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeartbeatDuration {
      get { return heartbeatDuration_; }
      set {
        heartbeatDuration_ = value;
      }
    }

    /// <summary>Field number for the "needAck" field.</summary>
    public const int NeedAckFieldNumber = 9;
    private bool needAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedAck {
      get { return needAck_; }
      set {
        needAck_ = value;
      }
    }

    /// <summary>Field number for the "pushServer" field.</summary>
    public const int PushServerFieldNumber = 10;
    private string pushServer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushServer {
      get { return pushServer_; }
      set {
        pushServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveCursor" field.</summary>
    public const int LiveCursorFieldNumber = 11;
    private string liveCursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LiveCursor {
      get { return liveCursor_; }
      set {
        liveCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "historyNoMore" field.</summary>
    public const int HistoryNoMoreFieldNumber = 12;
    private bool historyNoMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HistoryNoMore {
      get { return historyNoMore_; }
      set {
        historyNoMore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      if (Cursor != other.Cursor) return false;
      if (FetchInterval != other.FetchInterval) return false;
      if (Now != other.Now) return false;
      if (InternalExt != other.InternalExt) return false;
      if (FetchType != other.FetchType) return false;
      if (!RouteParams.Equals(other.RouteParams)) return false;
      if (HeartbeatDuration != other.HeartbeatDuration) return false;
      if (NeedAck != other.NeedAck) return false;
      if (PushServer != other.PushServer) return false;
      if (LiveCursor != other.LiveCursor) return false;
      if (HistoryNoMore != other.HistoryNoMore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (FetchInterval != 0L) hash ^= FetchInterval.GetHashCode();
      if (Now != 0L) hash ^= Now.GetHashCode();
      if (InternalExt.Length != 0) hash ^= InternalExt.GetHashCode();
      if (FetchType != 0) hash ^= FetchType.GetHashCode();
      hash ^= RouteParams.GetHashCode();
      if (HeartbeatDuration != 0L) hash ^= HeartbeatDuration.GetHashCode();
      if (NeedAck != false) hash ^= NeedAck.GetHashCode();
      if (PushServer.Length != 0) hash ^= PushServer.GetHashCode();
      if (LiveCursor.Length != 0) hash ^= LiveCursor.GetHashCode();
      if (HistoryNoMore != false) hash ^= HistoryNoMore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (FetchInterval != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FetchInterval);
      }
      if (Now != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Now);
      }
      if (InternalExt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InternalExt);
      }
      if (FetchType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FetchType);
      }
      routeParams_.WriteTo(output, _map_routeParams_codec);
      if (HeartbeatDuration != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(HeartbeatDuration);
      }
      if (NeedAck != false) {
        output.WriteRawTag(72);
        output.WriteBool(NeedAck);
      }
      if (PushServer.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PushServer);
      }
      if (LiveCursor.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LiveCursor);
      }
      if (HistoryNoMore != false) {
        output.WriteRawTag(96);
        output.WriteBool(HistoryNoMore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (FetchInterval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FetchInterval);
      }
      if (Now != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Now);
      }
      if (InternalExt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalExt);
      }
      if (FetchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchType);
      }
      size += routeParams_.CalculateSize(_map_routeParams_codec);
      if (HeartbeatDuration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeartbeatDuration);
      }
      if (NeedAck != false) {
        size += 1 + 1;
      }
      if (PushServer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushServer);
      }
      if (LiveCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiveCursor);
      }
      if (HistoryNoMore != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.FetchInterval != 0L) {
        FetchInterval = other.FetchInterval;
      }
      if (other.Now != 0L) {
        Now = other.Now;
      }
      if (other.InternalExt.Length != 0) {
        InternalExt = other.InternalExt;
      }
      if (other.FetchType != 0) {
        FetchType = other.FetchType;
      }
      routeParams_.Add(other.routeParams_);
      if (other.HeartbeatDuration != 0L) {
        HeartbeatDuration = other.HeartbeatDuration;
      }
      if (other.NeedAck != false) {
        NeedAck = other.NeedAck;
      }
      if (other.PushServer.Length != 0) {
        PushServer = other.PushServer;
      }
      if (other.LiveCursor.Length != 0) {
        LiveCursor = other.LiveCursor;
      }
      if (other.HistoryNoMore != false) {
        HistoryNoMore = other.HistoryNoMore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
          case 24: {
            FetchInterval = input.ReadInt64();
            break;
          }
          case 32: {
            Now = input.ReadInt64();
            break;
          }
          case 42: {
            InternalExt = input.ReadString();
            break;
          }
          case 48: {
            FetchType = input.ReadInt32();
            break;
          }
          case 58: {
            routeParams_.AddEntriesFrom(input, _map_routeParams_codec);
            break;
          }
          case 64: {
            HeartbeatDuration = input.ReadInt64();
            break;
          }
          case 72: {
            NeedAck = input.ReadBool();
            break;
          }
          case 82: {
            PushServer = input.ReadString();
            break;
          }
          case 90: {
            LiveCursor = input.ReadString();
            break;
          }
          case 96: {
            HistoryNoMore = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      method_ = other.method_;
      payload_ = other.payload_;
      msgId_ = other.msgId_;
      msgType_ = other.msgType_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 3;
    private long msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 4;
    private int msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Payload != other.Payload) return false;
      if (MsgId != other.MsgId) return false;
      if (MsgType != other.MsgType) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (MsgId != 0L) hash ^= MsgId.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (MsgId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MsgId);
      }
      if (MsgType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgType);
      }
      if (Offset != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (MsgId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MsgId);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.MsgId != 0L) {
        MsgId = other.MsgId;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 24: {
            MsgId = input.ReadInt64();
            break;
          }
          case 32: {
            MsgType = input.ReadInt32();
            break;
          }
          case 40: {
            Offset = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomUserSeqMessage : pb::IMessage<RoomUserSeqMessage> {
    private static readonly pb::MessageParser<RoomUserSeqMessage> _parser = new pb::MessageParser<RoomUserSeqMessage>(() => new RoomUserSeqMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomUserSeqMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessage(RoomUserSeqMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      ranks_ = other.ranks_.Clone();
      total_ = other.total_;
      popStr_ = other.popStr_;
      seats_ = other.seats_.Clone();
      popularity_ = other.popularity_;
      totalUser_ = other.totalUser_;
      totalUserStr_ = other.totalUserStr_;
      totalStr_ = other.totalStr_;
      onlineUserForAnchor_ = other.onlineUserForAnchor_;
      totalPvForAnchor_ = other.totalPvForAnchor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessage Clone() {
      return new RoomUserSeqMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "ranks" field.</summary>
    public const int RanksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DouyinPb.RoomUserSeqMessage.Types.Contributor> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(18, global::DouyinPb.RoomUserSeqMessage.Types.Contributor.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.RoomUserSeqMessage.Types.Contributor> ranks_ = new pbc::RepeatedField<global::DouyinPb.RoomUserSeqMessage.Types.Contributor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.RoomUserSeqMessage.Types.Contributor> Ranks {
      get { return ranks_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "popStr" field.</summary>
    public const int PopStrFieldNumber = 4;
    private string popStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PopStr {
      get { return popStr_; }
      set {
        popStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DouyinPb.RoomUserSeqMessage.Types.Contributor> _repeated_seats_codec
        = pb::FieldCodec.ForMessage(42, global::DouyinPb.RoomUserSeqMessage.Types.Contributor.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.RoomUserSeqMessage.Types.Contributor> seats_ = new pbc::RepeatedField<global::DouyinPb.RoomUserSeqMessage.Types.Contributor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.RoomUserSeqMessage.Types.Contributor> Seats {
      get { return seats_; }
    }

    /// <summary>Field number for the "popularity" field.</summary>
    public const int PopularityFieldNumber = 6;
    private long popularity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Popularity {
      get { return popularity_; }
      set {
        popularity_ = value;
      }
    }

    /// <summary>Field number for the "totalUser" field.</summary>
    public const int TotalUserFieldNumber = 7;
    private long totalUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalUser {
      get { return totalUser_; }
      set {
        totalUser_ = value;
      }
    }

    /// <summary>Field number for the "totalUserStr" field.</summary>
    public const int TotalUserStrFieldNumber = 8;
    private string totalUserStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalUserStr {
      get { return totalUserStr_; }
      set {
        totalUserStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalStr" field.</summary>
    public const int TotalStrFieldNumber = 9;
    private string totalStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalStr {
      get { return totalStr_; }
      set {
        totalStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlineUserForAnchor" field.</summary>
    public const int OnlineUserForAnchorFieldNumber = 10;
    private string onlineUserForAnchor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OnlineUserForAnchor {
      get { return onlineUserForAnchor_; }
      set {
        onlineUserForAnchor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalPvForAnchor" field.</summary>
    public const int TotalPvForAnchorFieldNumber = 11;
    private string totalPvForAnchor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalPvForAnchor {
      get { return totalPvForAnchor_; }
      set {
        totalPvForAnchor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomUserSeqMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomUserSeqMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if(!ranks_.Equals(other.ranks_)) return false;
      if (Total != other.Total) return false;
      if (PopStr != other.PopStr) return false;
      if(!seats_.Equals(other.seats_)) return false;
      if (Popularity != other.Popularity) return false;
      if (TotalUser != other.TotalUser) return false;
      if (TotalUserStr != other.TotalUserStr) return false;
      if (TotalStr != other.TotalStr) return false;
      if (OnlineUserForAnchor != other.OnlineUserForAnchor) return false;
      if (TotalPvForAnchor != other.TotalPvForAnchor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      hash ^= ranks_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (PopStr.Length != 0) hash ^= PopStr.GetHashCode();
      hash ^= seats_.GetHashCode();
      if (Popularity != 0L) hash ^= Popularity.GetHashCode();
      if (TotalUser != 0L) hash ^= TotalUser.GetHashCode();
      if (TotalUserStr.Length != 0) hash ^= TotalUserStr.GetHashCode();
      if (TotalStr.Length != 0) hash ^= TotalStr.GetHashCode();
      if (OnlineUserForAnchor.Length != 0) hash ^= OnlineUserForAnchor.GetHashCode();
      if (TotalPvForAnchor.Length != 0) hash ^= TotalPvForAnchor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      ranks_.WriteTo(output, _repeated_ranks_codec);
      if (Total != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Total);
      }
      if (PopStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PopStr);
      }
      seats_.WriteTo(output, _repeated_seats_codec);
      if (Popularity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Popularity);
      }
      if (TotalUser != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalUser);
      }
      if (TotalUserStr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TotalUserStr);
      }
      if (TotalStr.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TotalStr);
      }
      if (OnlineUserForAnchor.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OnlineUserForAnchor);
      }
      if (TotalPvForAnchor.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TotalPvForAnchor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (PopStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PopStr);
      }
      size += seats_.CalculateSize(_repeated_seats_codec);
      if (Popularity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Popularity);
      }
      if (TotalUser != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalUser);
      }
      if (TotalUserStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalUserStr);
      }
      if (TotalStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalStr);
      }
      if (OnlineUserForAnchor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OnlineUserForAnchor);
      }
      if (TotalPvForAnchor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalPvForAnchor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomUserSeqMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      ranks_.Add(other.ranks_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.PopStr.Length != 0) {
        PopStr = other.PopStr;
      }
      seats_.Add(other.seats_);
      if (other.Popularity != 0L) {
        Popularity = other.Popularity;
      }
      if (other.TotalUser != 0L) {
        TotalUser = other.TotalUser;
      }
      if (other.TotalUserStr.Length != 0) {
        TotalUserStr = other.TotalUserStr;
      }
      if (other.TotalStr.Length != 0) {
        TotalStr = other.TotalStr;
      }
      if (other.OnlineUserForAnchor.Length != 0) {
        OnlineUserForAnchor = other.OnlineUserForAnchor;
      }
      if (other.TotalPvForAnchor.Length != 0) {
        TotalPvForAnchor = other.TotalPvForAnchor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt64();
            break;
          }
          case 34: {
            PopStr = input.ReadString();
            break;
          }
          case 42: {
            seats_.AddEntriesFrom(input, _repeated_seats_codec);
            break;
          }
          case 48: {
            Popularity = input.ReadInt64();
            break;
          }
          case 56: {
            TotalUser = input.ReadInt64();
            break;
          }
          case 66: {
            TotalUserStr = input.ReadString();
            break;
          }
          case 74: {
            TotalStr = input.ReadString();
            break;
          }
          case 82: {
            OnlineUserForAnchor = input.ReadString();
            break;
          }
          case 90: {
            TotalPvForAnchor = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RoomUserSeqMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Contributor : pb::IMessage<Contributor> {
        private static readonly pb::MessageParser<Contributor> _parser = new pb::MessageParser<Contributor>(() => new Contributor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contributor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.RoomUserSeqMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contributor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contributor(Contributor other) : this() {
          score_ = other.score_;
          user_ = other.user_ != null ? other.user_.Clone() : null;
          rank_ = other.rank_;
          delta_ = other.delta_;
          isHidden_ = other.isHidden_;
          scoreDescription_ = other.scoreDescription_;
          exactlyScore_ = other.exactlyScore_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contributor Clone() {
          return new Contributor(this);
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 1;
        private long score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 2;
        private global::DouyinPb.User user_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 3;
        private long rank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Rank {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        /// <summary>Field number for the "delta" field.</summary>
        public const int DeltaFieldNumber = 4;
        private long delta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Delta {
          get { return delta_; }
          set {
            delta_ = value;
          }
        }

        /// <summary>Field number for the "isHidden" field.</summary>
        public const int IsHiddenFieldNumber = 5;
        private bool isHidden_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsHidden {
          get { return isHidden_; }
          set {
            isHidden_ = value;
          }
        }

        /// <summary>Field number for the "scoreDescription" field.</summary>
        public const int ScoreDescriptionFieldNumber = 6;
        private string scoreDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScoreDescription {
          get { return scoreDescription_; }
          set {
            scoreDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "exactlyScore" field.</summary>
        public const int ExactlyScoreFieldNumber = 7;
        private string exactlyScore_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExactlyScore {
          get { return exactlyScore_; }
          set {
            exactlyScore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contributor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contributor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Score != other.Score) return false;
          if (!object.Equals(User, other.User)) return false;
          if (Rank != other.Rank) return false;
          if (Delta != other.Delta) return false;
          if (IsHidden != other.IsHidden) return false;
          if (ScoreDescription != other.ScoreDescription) return false;
          if (ExactlyScore != other.ExactlyScore) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Score != 0L) hash ^= Score.GetHashCode();
          if (user_ != null) hash ^= User.GetHashCode();
          if (Rank != 0L) hash ^= Rank.GetHashCode();
          if (Delta != 0L) hash ^= Delta.GetHashCode();
          if (IsHidden != false) hash ^= IsHidden.GetHashCode();
          if (ScoreDescription.Length != 0) hash ^= ScoreDescription.GetHashCode();
          if (ExactlyScore.Length != 0) hash ^= ExactlyScore.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Score != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Score);
          }
          if (user_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(User);
          }
          if (Rank != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Rank);
          }
          if (Delta != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Delta);
          }
          if (IsHidden != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsHidden);
          }
          if (ScoreDescription.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(ScoreDescription);
          }
          if (ExactlyScore.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(ExactlyScore);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Score != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
          }
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (Rank != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
          }
          if (Delta != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delta);
          }
          if (IsHidden != false) {
            size += 1 + 1;
          }
          if (ScoreDescription.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ScoreDescription);
          }
          if (ExactlyScore.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExactlyScore);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contributor other) {
          if (other == null) {
            return;
          }
          if (other.Score != 0L) {
            Score = other.Score;
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.Rank != 0L) {
            Rank = other.Rank;
          }
          if (other.Delta != 0L) {
            Delta = other.Delta;
          }
          if (other.IsHidden != false) {
            IsHidden = other.IsHidden;
          }
          if (other.ScoreDescription.Length != 0) {
            ScoreDescription = other.ScoreDescription;
          }
          if (other.ExactlyScore.Length != 0) {
            ExactlyScore = other.ExactlyScore;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Score = input.ReadInt64();
                break;
              }
              case 18: {
                if (user_ == null) {
                  User = new global::DouyinPb.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 24: {
                Rank = input.ReadInt64();
                break;
              }
              case 32: {
                Delta = input.ReadInt64();
                break;
              }
              case 40: {
                IsHidden = input.ReadBool();
                break;
              }
              case 50: {
                ScoreDescription = input.ReadString();
                break;
              }
              case 58: {
                ExactlyScore = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GiftMessage : pb::IMessage<GiftMessage> {
    private static readonly pb::MessageParser<GiftMessage> _parser = new pb::MessageParser<GiftMessage>(() => new GiftMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage(GiftMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      giftId_ = other.giftId_;
      fanTicketCount_ = other.fanTicketCount_;
      groupCount_ = other.groupCount_;
      repeatCount_ = other.repeatCount_;
      comboCount_ = other.comboCount_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      toUser_ = other.toUser_ != null ? other.toUser_.Clone() : null;
      repeatEnd_ = other.repeatEnd_;
      textEffect_ = other.textEffect_ != null ? other.textEffect_.Clone() : null;
      groupId_ = other.groupId_;
      incomeTaskgifts_ = other.incomeTaskgifts_;
      roomFanTicketCount_ = other.roomFanTicketCount_;
      priority_ = other.priority_ != null ? other.priority_.Clone() : null;
      gift_ = other.gift_ != null ? other.gift_.Clone() : null;
      logId_ = other.logId_;
      sendType_ = other.sendType_;
      publicAreaCommon_ = other.publicAreaCommon_ != null ? other.publicAreaCommon_.Clone() : null;
      trayDisplayText_ = other.trayDisplayText_ != null ? other.trayDisplayText_.Clone() : null;
      bannedDisplayEffects_ = other.bannedDisplayEffects_;
      trayInfo_ = other.trayInfo_ != null ? other.trayInfo_.Clone() : null;
      assetEffectMixInfo_ = other.assetEffectMixInfo_ != null ? other.assetEffectMixInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage Clone() {
      return new GiftMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 2;
    private long giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    /// <summary>Field number for the "fanTicketCount" field.</summary>
    public const int FanTicketCountFieldNumber = 3;
    private long fanTicketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FanTicketCount {
      get { return fanTicketCount_; }
      set {
        fanTicketCount_ = value;
      }
    }

    /// <summary>Field number for the "groupCount" field.</summary>
    public const int GroupCountFieldNumber = 4;
    private long groupCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupCount {
      get { return groupCount_; }
      set {
        groupCount_ = value;
      }
    }

    /// <summary>Field number for the "repeatCount" field.</summary>
    public const int RepeatCountFieldNumber = 5;
    private long repeatCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RepeatCount {
      get { return repeatCount_; }
      set {
        repeatCount_ = value;
      }
    }

    /// <summary>Field number for the "comboCount" field.</summary>
    public const int ComboCountFieldNumber = 6;
    private long comboCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ComboCount {
      get { return comboCount_; }
      set {
        comboCount_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 7;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "toUser" field.</summary>
    public const int ToUserFieldNumber = 8;
    private global::DouyinPb.User toUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User ToUser {
      get { return toUser_; }
      set {
        toUser_ = value;
      }
    }

    /// <summary>Field number for the "repeatEnd" field.</summary>
    public const int RepeatEndFieldNumber = 9;
    private int repeatEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeatEnd {
      get { return repeatEnd_; }
      set {
        repeatEnd_ = value;
      }
    }

    /// <summary>Field number for the "textEffect" field.</summary>
    public const int TextEffectFieldNumber = 10;
    private global::DouyinPb.GiftMessage.Types.TextEffect textEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftMessage.Types.TextEffect TextEffect {
      get { return textEffect_; }
      set {
        textEffect_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "incomeTaskgifts" field.</summary>
    public const int IncomeTaskgiftsFieldNumber = 12;
    private long incomeTaskgifts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IncomeTaskgifts {
      get { return incomeTaskgifts_; }
      set {
        incomeTaskgifts_ = value;
      }
    }

    /// <summary>Field number for the "roomFanTicketCount" field.</summary>
    public const int RoomFanTicketCountFieldNumber = 13;
    private long roomFanTicketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomFanTicketCount {
      get { return roomFanTicketCount_; }
      set {
        roomFanTicketCount_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 14;
    private global::DouyinPb.GiftIMPriority priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftIMPriority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 15;
    private global::DouyinPb.GiftStruct gift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftStruct Gift {
      get { return gift_; }
      set {
        gift_ = value;
      }
    }

    /// <summary>Field number for the "logId" field.</summary>
    public const int LogIdFieldNumber = 16;
    private string logId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogId {
      get { return logId_; }
      set {
        logId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sendType" field.</summary>
    public const int SendTypeFieldNumber = 17;
    private long sendType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendType {
      get { return sendType_; }
      set {
        sendType_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 18;
    private global::DouyinPb.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    /// <summary>Field number for the "trayDisplayText" field.</summary>
    public const int TrayDisplayTextFieldNumber = 19;
    private global::DouyinPb.Text trayDisplayText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Text TrayDisplayText {
      get { return trayDisplayText_; }
      set {
        trayDisplayText_ = value;
      }
    }

    /// <summary>Field number for the "bannedDisplayEffects" field.</summary>
    public const int BannedDisplayEffectsFieldNumber = 20;
    private long bannedDisplayEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BannedDisplayEffects {
      get { return bannedDisplayEffects_; }
      set {
        bannedDisplayEffects_ = value;
      }
    }

    /// <summary>Field number for the "trayInfo" field.</summary>
    public const int TrayInfoFieldNumber = 21;
    private global::DouyinPb.GiftTrayInfo trayInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftTrayInfo TrayInfo {
      get { return trayInfo_; }
      set {
        trayInfo_ = value;
      }
    }

    /// <summary>Field number for the "assetEffectMixInfo" field.</summary>
    public const int AssetEffectMixInfoFieldNumber = 24;
    private global::DouyinPb.AssetEffectMixInfo assetEffectMixInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.AssetEffectMixInfo AssetEffectMixInfo {
      get { return assetEffectMixInfo_; }
      set {
        assetEffectMixInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (GiftId != other.GiftId) return false;
      if (FanTicketCount != other.FanTicketCount) return false;
      if (GroupCount != other.GroupCount) return false;
      if (RepeatCount != other.RepeatCount) return false;
      if (ComboCount != other.ComboCount) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(ToUser, other.ToUser)) return false;
      if (RepeatEnd != other.RepeatEnd) return false;
      if (!object.Equals(TextEffect, other.TextEffect)) return false;
      if (GroupId != other.GroupId) return false;
      if (IncomeTaskgifts != other.IncomeTaskgifts) return false;
      if (RoomFanTicketCount != other.RoomFanTicketCount) return false;
      if (!object.Equals(Priority, other.Priority)) return false;
      if (!object.Equals(Gift, other.Gift)) return false;
      if (LogId != other.LogId) return false;
      if (SendType != other.SendType) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      if (!object.Equals(TrayDisplayText, other.TrayDisplayText)) return false;
      if (BannedDisplayEffects != other.BannedDisplayEffects) return false;
      if (!object.Equals(TrayInfo, other.TrayInfo)) return false;
      if (!object.Equals(AssetEffectMixInfo, other.AssetEffectMixInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (GiftId != 0L) hash ^= GiftId.GetHashCode();
      if (FanTicketCount != 0L) hash ^= FanTicketCount.GetHashCode();
      if (GroupCount != 0L) hash ^= GroupCount.GetHashCode();
      if (RepeatCount != 0L) hash ^= RepeatCount.GetHashCode();
      if (ComboCount != 0L) hash ^= ComboCount.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (toUser_ != null) hash ^= ToUser.GetHashCode();
      if (RepeatEnd != 0) hash ^= RepeatEnd.GetHashCode();
      if (textEffect_ != null) hash ^= TextEffect.GetHashCode();
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      if (IncomeTaskgifts != 0L) hash ^= IncomeTaskgifts.GetHashCode();
      if (RoomFanTicketCount != 0L) hash ^= RoomFanTicketCount.GetHashCode();
      if (priority_ != null) hash ^= Priority.GetHashCode();
      if (gift_ != null) hash ^= Gift.GetHashCode();
      if (LogId.Length != 0) hash ^= LogId.GetHashCode();
      if (SendType != 0L) hash ^= SendType.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (trayDisplayText_ != null) hash ^= TrayDisplayText.GetHashCode();
      if (BannedDisplayEffects != 0L) hash ^= BannedDisplayEffects.GetHashCode();
      if (trayInfo_ != null) hash ^= TrayInfo.GetHashCode();
      if (assetEffectMixInfo_ != null) hash ^= AssetEffectMixInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (GiftId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GiftId);
      }
      if (FanTicketCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FanTicketCount);
      }
      if (GroupCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GroupCount);
      }
      if (RepeatCount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RepeatCount);
      }
      if (ComboCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ComboCount);
      }
      if (user_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(User);
      }
      if (toUser_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ToUser);
      }
      if (RepeatEnd != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RepeatEnd);
      }
      if (textEffect_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TextEffect);
      }
      if (GroupId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(GroupId);
      }
      if (IncomeTaskgifts != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(IncomeTaskgifts);
      }
      if (RoomFanTicketCount != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(RoomFanTicketCount);
      }
      if (priority_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Priority);
      }
      if (gift_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Gift);
      }
      if (LogId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(LogId);
      }
      if (SendType != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(SendType);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PublicAreaCommon);
      }
      if (trayDisplayText_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TrayDisplayText);
      }
      if (BannedDisplayEffects != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(BannedDisplayEffects);
      }
      if (trayInfo_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TrayInfo);
      }
      if (assetEffectMixInfo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AssetEffectMixInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (GiftId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiftId);
      }
      if (FanTicketCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FanTicketCount);
      }
      if (GroupCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupCount);
      }
      if (RepeatCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RepeatCount);
      }
      if (ComboCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ComboCount);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (toUser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToUser);
      }
      if (RepeatEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatEnd);
      }
      if (textEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextEffect);
      }
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      if (IncomeTaskgifts != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IncomeTaskgifts);
      }
      if (RoomFanTicketCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomFanTicketCount);
      }
      if (priority_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Priority);
      }
      if (gift_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gift);
      }
      if (LogId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LogId);
      }
      if (SendType != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SendType);
      }
      if (publicAreaCommon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (trayDisplayText_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrayDisplayText);
      }
      if (BannedDisplayEffects != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BannedDisplayEffects);
      }
      if (trayInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrayInfo);
      }
      if (assetEffectMixInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AssetEffectMixInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.GiftId != 0L) {
        GiftId = other.GiftId;
      }
      if (other.FanTicketCount != 0L) {
        FanTicketCount = other.FanTicketCount;
      }
      if (other.GroupCount != 0L) {
        GroupCount = other.GroupCount;
      }
      if (other.RepeatCount != 0L) {
        RepeatCount = other.RepeatCount;
      }
      if (other.ComboCount != 0L) {
        ComboCount = other.ComboCount;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.toUser_ != null) {
        if (toUser_ == null) {
          ToUser = new global::DouyinPb.User();
        }
        ToUser.MergeFrom(other.ToUser);
      }
      if (other.RepeatEnd != 0) {
        RepeatEnd = other.RepeatEnd;
      }
      if (other.textEffect_ != null) {
        if (textEffect_ == null) {
          TextEffect = new global::DouyinPb.GiftMessage.Types.TextEffect();
        }
        TextEffect.MergeFrom(other.TextEffect);
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
      if (other.IncomeTaskgifts != 0L) {
        IncomeTaskgifts = other.IncomeTaskgifts;
      }
      if (other.RoomFanTicketCount != 0L) {
        RoomFanTicketCount = other.RoomFanTicketCount;
      }
      if (other.priority_ != null) {
        if (priority_ == null) {
          Priority = new global::DouyinPb.GiftIMPriority();
        }
        Priority.MergeFrom(other.Priority);
      }
      if (other.gift_ != null) {
        if (gift_ == null) {
          Gift = new global::DouyinPb.GiftStruct();
        }
        Gift.MergeFrom(other.Gift);
      }
      if (other.LogId.Length != 0) {
        LogId = other.LogId;
      }
      if (other.SendType != 0L) {
        SendType = other.SendType;
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      if (other.trayDisplayText_ != null) {
        if (trayDisplayText_ == null) {
          TrayDisplayText = new global::DouyinPb.Text();
        }
        TrayDisplayText.MergeFrom(other.TrayDisplayText);
      }
      if (other.BannedDisplayEffects != 0L) {
        BannedDisplayEffects = other.BannedDisplayEffects;
      }
      if (other.trayInfo_ != null) {
        if (trayInfo_ == null) {
          TrayInfo = new global::DouyinPb.GiftTrayInfo();
        }
        TrayInfo.MergeFrom(other.TrayInfo);
      }
      if (other.assetEffectMixInfo_ != null) {
        if (assetEffectMixInfo_ == null) {
          AssetEffectMixInfo = new global::DouyinPb.AssetEffectMixInfo();
        }
        AssetEffectMixInfo.MergeFrom(other.AssetEffectMixInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 16: {
            GiftId = input.ReadInt64();
            break;
          }
          case 24: {
            FanTicketCount = input.ReadInt64();
            break;
          }
          case 32: {
            GroupCount = input.ReadInt64();
            break;
          }
          case 40: {
            RepeatCount = input.ReadInt64();
            break;
          }
          case 48: {
            ComboCount = input.ReadInt64();
            break;
          }
          case 58: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 66: {
            if (toUser_ == null) {
              ToUser = new global::DouyinPb.User();
            }
            input.ReadMessage(ToUser);
            break;
          }
          case 72: {
            RepeatEnd = input.ReadInt32();
            break;
          }
          case 82: {
            if (textEffect_ == null) {
              TextEffect = new global::DouyinPb.GiftMessage.Types.TextEffect();
            }
            input.ReadMessage(TextEffect);
            break;
          }
          case 88: {
            GroupId = input.ReadInt64();
            break;
          }
          case 96: {
            IncomeTaskgifts = input.ReadInt64();
            break;
          }
          case 104: {
            RoomFanTicketCount = input.ReadInt64();
            break;
          }
          case 114: {
            if (priority_ == null) {
              Priority = new global::DouyinPb.GiftIMPriority();
            }
            input.ReadMessage(Priority);
            break;
          }
          case 122: {
            if (gift_ == null) {
              Gift = new global::DouyinPb.GiftStruct();
            }
            input.ReadMessage(Gift);
            break;
          }
          case 130: {
            LogId = input.ReadString();
            break;
          }
          case 136: {
            SendType = input.ReadInt64();
            break;
          }
          case 146: {
            if (publicAreaCommon_ == null) {
              PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
            }
            input.ReadMessage(PublicAreaCommon);
            break;
          }
          case 154: {
            if (trayDisplayText_ == null) {
              TrayDisplayText = new global::DouyinPb.Text();
            }
            input.ReadMessage(TrayDisplayText);
            break;
          }
          case 160: {
            BannedDisplayEffects = input.ReadInt64();
            break;
          }
          case 170: {
            if (trayInfo_ == null) {
              TrayInfo = new global::DouyinPb.GiftTrayInfo();
            }
            input.ReadMessage(TrayInfo);
            break;
          }
          case 194: {
            if (assetEffectMixInfo_ == null) {
              AssetEffectMixInfo = new global::DouyinPb.AssetEffectMixInfo();
            }
            input.ReadMessage(AssetEffectMixInfo);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GiftMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TextEffect : pb::IMessage<TextEffect> {
        private static readonly pb::MessageParser<TextEffect> _parser = new pb::MessageParser<TextEffect>(() => new TextEffect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TextEffect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.GiftMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextEffect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextEffect(TextEffect other) : this() {
          portrait_ = other.portrait_ != null ? other.portrait_.Clone() : null;
          landscape_ = other.landscape_ != null ? other.landscape_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextEffect Clone() {
          return new TextEffect(this);
        }

        /// <summary>Field number for the "portrait" field.</summary>
        public const int PortraitFieldNumber = 1;
        private global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail portrait_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail Portrait {
          get { return portrait_; }
          set {
            portrait_ = value;
          }
        }

        /// <summary>Field number for the "landscape" field.</summary>
        public const int LandscapeFieldNumber = 2;
        private global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail landscape_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail Landscape {
          get { return landscape_; }
          set {
            landscape_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TextEffect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TextEffect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Portrait, other.Portrait)) return false;
          if (!object.Equals(Landscape, other.Landscape)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (portrait_ != null) hash ^= Portrait.GetHashCode();
          if (landscape_ != null) hash ^= Landscape.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (portrait_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Portrait);
          }
          if (landscape_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Landscape);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (portrait_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portrait);
          }
          if (landscape_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Landscape);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TextEffect other) {
          if (other == null) {
            return;
          }
          if (other.portrait_ != null) {
            if (portrait_ == null) {
              Portrait = new global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail();
            }
            Portrait.MergeFrom(other.Portrait);
          }
          if (other.landscape_ != null) {
            if (landscape_ == null) {
              Landscape = new global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail();
            }
            Landscape.MergeFrom(other.Landscape);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (portrait_ == null) {
                  Portrait = new global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail();
                }
                input.ReadMessage(Portrait);
                break;
              }
              case 18: {
                if (landscape_ == null) {
                  Landscape = new global::DouyinPb.GiftMessage.Types.TextEffect.Types.Detail();
                }
                input.ReadMessage(Landscape);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the TextEffect message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Detail : pb::IMessage<Detail> {
            private static readonly pb::MessageParser<Detail> _parser = new pb::MessageParser<Detail>(() => new Detail());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Detail> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::DouyinPb.GiftMessage.Types.TextEffect.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Detail() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Detail(Detail other) : this() {
              text_ = other.text_ != null ? other.text_.Clone() : null;
              textFontSize_ = other.textFontSize_;
              background_ = other.background_ != null ? other.background_.Clone() : null;
              start_ = other.start_;
              duration_ = other.duration_;
              x_ = other.x_;
              y_ = other.y_;
              width_ = other.width_;
              height_ = other.height_;
              shadowDx_ = other.shadowDx_;
              shadowDy_ = other.shadowDy_;
              shadowRadius_ = other.shadowRadius_;
              shadowColor_ = other.shadowColor_;
              strokeColor_ = other.strokeColor_;
              strokeWidth_ = other.strokeWidth_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Detail Clone() {
              return new Detail(this);
            }

            /// <summary>Field number for the "text" field.</summary>
            public const int TextFieldNumber = 1;
            private global::DouyinPb.Text text_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::DouyinPb.Text Text {
              get { return text_; }
              set {
                text_ = value;
              }
            }

            /// <summary>Field number for the "textFontSize" field.</summary>
            public const int TextFontSizeFieldNumber = 2;
            private int textFontSize_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int TextFontSize {
              get { return textFontSize_; }
              set {
                textFontSize_ = value;
              }
            }

            /// <summary>Field number for the "background" field.</summary>
            public const int BackgroundFieldNumber = 3;
            private global::DouyinPb.Image background_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::DouyinPb.Image Background {
              get { return background_; }
              set {
                background_ = value;
              }
            }

            /// <summary>Field number for the "start" field.</summary>
            public const int StartFieldNumber = 4;
            private int start_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Start {
              get { return start_; }
              set {
                start_ = value;
              }
            }

            /// <summary>Field number for the "duration" field.</summary>
            public const int DurationFieldNumber = 5;
            private int duration_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Duration {
              get { return duration_; }
              set {
                duration_ = value;
              }
            }

            /// <summary>Field number for the "x" field.</summary>
            public const int XFieldNumber = 6;
            private int x_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            /// <summary>Field number for the "y" field.</summary>
            public const int YFieldNumber = 7;
            private int y_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            /// <summary>Field number for the "width" field.</summary>
            public const int WidthFieldNumber = 8;
            private int width_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Width {
              get { return width_; }
              set {
                width_ = value;
              }
            }

            /// <summary>Field number for the "height" field.</summary>
            public const int HeightFieldNumber = 9;
            private int height_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Height {
              get { return height_; }
              set {
                height_ = value;
              }
            }

            /// <summary>Field number for the "shadowDx" field.</summary>
            public const int ShadowDxFieldNumber = 10;
            private int shadowDx_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int ShadowDx {
              get { return shadowDx_; }
              set {
                shadowDx_ = value;
              }
            }

            /// <summary>Field number for the "shadowDy" field.</summary>
            public const int ShadowDyFieldNumber = 11;
            private int shadowDy_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int ShadowDy {
              get { return shadowDy_; }
              set {
                shadowDy_ = value;
              }
            }

            /// <summary>Field number for the "shadowRadius" field.</summary>
            public const int ShadowRadiusFieldNumber = 12;
            private int shadowRadius_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int ShadowRadius {
              get { return shadowRadius_; }
              set {
                shadowRadius_ = value;
              }
            }

            /// <summary>Field number for the "shadowColor" field.</summary>
            public const int ShadowColorFieldNumber = 13;
            private string shadowColor_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ShadowColor {
              get { return shadowColor_; }
              set {
                shadowColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "strokeColor" field.</summary>
            public const int StrokeColorFieldNumber = 14;
            private string strokeColor_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string StrokeColor {
              get { return strokeColor_; }
              set {
                strokeColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "strokeWidth" field.</summary>
            public const int StrokeWidthFieldNumber = 15;
            private int strokeWidth_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int StrokeWidth {
              get { return strokeWidth_; }
              set {
                strokeWidth_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Detail);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Detail other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Text, other.Text)) return false;
              if (TextFontSize != other.TextFontSize) return false;
              if (!object.Equals(Background, other.Background)) return false;
              if (Start != other.Start) return false;
              if (Duration != other.Duration) return false;
              if (X != other.X) return false;
              if (Y != other.Y) return false;
              if (Width != other.Width) return false;
              if (Height != other.Height) return false;
              if (ShadowDx != other.ShadowDx) return false;
              if (ShadowDy != other.ShadowDy) return false;
              if (ShadowRadius != other.ShadowRadius) return false;
              if (ShadowColor != other.ShadowColor) return false;
              if (StrokeColor != other.StrokeColor) return false;
              if (StrokeWidth != other.StrokeWidth) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (text_ != null) hash ^= Text.GetHashCode();
              if (TextFontSize != 0) hash ^= TextFontSize.GetHashCode();
              if (background_ != null) hash ^= Background.GetHashCode();
              if (Start != 0) hash ^= Start.GetHashCode();
              if (Duration != 0) hash ^= Duration.GetHashCode();
              if (X != 0) hash ^= X.GetHashCode();
              if (Y != 0) hash ^= Y.GetHashCode();
              if (Width != 0) hash ^= Width.GetHashCode();
              if (Height != 0) hash ^= Height.GetHashCode();
              if (ShadowDx != 0) hash ^= ShadowDx.GetHashCode();
              if (ShadowDy != 0) hash ^= ShadowDy.GetHashCode();
              if (ShadowRadius != 0) hash ^= ShadowRadius.GetHashCode();
              if (ShadowColor.Length != 0) hash ^= ShadowColor.GetHashCode();
              if (StrokeColor.Length != 0) hash ^= StrokeColor.GetHashCode();
              if (StrokeWidth != 0) hash ^= StrokeWidth.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (text_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Text);
              }
              if (TextFontSize != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(TextFontSize);
              }
              if (background_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Background);
              }
              if (Start != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(Start);
              }
              if (Duration != 0) {
                output.WriteRawTag(40);
                output.WriteInt32(Duration);
              }
              if (X != 0) {
                output.WriteRawTag(48);
                output.WriteInt32(X);
              }
              if (Y != 0) {
                output.WriteRawTag(56);
                output.WriteInt32(Y);
              }
              if (Width != 0) {
                output.WriteRawTag(64);
                output.WriteInt32(Width);
              }
              if (Height != 0) {
                output.WriteRawTag(72);
                output.WriteInt32(Height);
              }
              if (ShadowDx != 0) {
                output.WriteRawTag(80);
                output.WriteInt32(ShadowDx);
              }
              if (ShadowDy != 0) {
                output.WriteRawTag(88);
                output.WriteInt32(ShadowDy);
              }
              if (ShadowRadius != 0) {
                output.WriteRawTag(96);
                output.WriteInt32(ShadowRadius);
              }
              if (ShadowColor.Length != 0) {
                output.WriteRawTag(106);
                output.WriteString(ShadowColor);
              }
              if (StrokeColor.Length != 0) {
                output.WriteRawTag(114);
                output.WriteString(StrokeColor);
              }
              if (StrokeWidth != 0) {
                output.WriteRawTag(120);
                output.WriteInt32(StrokeWidth);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (text_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
              }
              if (TextFontSize != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TextFontSize);
              }
              if (background_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Background);
              }
              if (Start != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
              }
              if (Duration != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
              }
              if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
              }
              if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
              }
              if (Width != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
              }
              if (Height != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
              }
              if (ShadowDx != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShadowDx);
              }
              if (ShadowDy != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShadowDy);
              }
              if (ShadowRadius != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShadowRadius);
              }
              if (ShadowColor.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ShadowColor);
              }
              if (StrokeColor.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StrokeColor);
              }
              if (StrokeWidth != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrokeWidth);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Detail other) {
              if (other == null) {
                return;
              }
              if (other.text_ != null) {
                if (text_ == null) {
                  Text = new global::DouyinPb.Text();
                }
                Text.MergeFrom(other.Text);
              }
              if (other.TextFontSize != 0) {
                TextFontSize = other.TextFontSize;
              }
              if (other.background_ != null) {
                if (background_ == null) {
                  Background = new global::DouyinPb.Image();
                }
                Background.MergeFrom(other.Background);
              }
              if (other.Start != 0) {
                Start = other.Start;
              }
              if (other.Duration != 0) {
                Duration = other.Duration;
              }
              if (other.X != 0) {
                X = other.X;
              }
              if (other.Y != 0) {
                Y = other.Y;
              }
              if (other.Width != 0) {
                Width = other.Width;
              }
              if (other.Height != 0) {
                Height = other.Height;
              }
              if (other.ShadowDx != 0) {
                ShadowDx = other.ShadowDx;
              }
              if (other.ShadowDy != 0) {
                ShadowDy = other.ShadowDy;
              }
              if (other.ShadowRadius != 0) {
                ShadowRadius = other.ShadowRadius;
              }
              if (other.ShadowColor.Length != 0) {
                ShadowColor = other.ShadowColor;
              }
              if (other.StrokeColor.Length != 0) {
                StrokeColor = other.StrokeColor;
              }
              if (other.StrokeWidth != 0) {
                StrokeWidth = other.StrokeWidth;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (text_ == null) {
                      Text = new global::DouyinPb.Text();
                    }
                    input.ReadMessage(Text);
                    break;
                  }
                  case 16: {
                    TextFontSize = input.ReadInt32();
                    break;
                  }
                  case 26: {
                    if (background_ == null) {
                      Background = new global::DouyinPb.Image();
                    }
                    input.ReadMessage(Background);
                    break;
                  }
                  case 32: {
                    Start = input.ReadInt32();
                    break;
                  }
                  case 40: {
                    Duration = input.ReadInt32();
                    break;
                  }
                  case 48: {
                    X = input.ReadInt32();
                    break;
                  }
                  case 56: {
                    Y = input.ReadInt32();
                    break;
                  }
                  case 64: {
                    Width = input.ReadInt32();
                    break;
                  }
                  case 72: {
                    Height = input.ReadInt32();
                    break;
                  }
                  case 80: {
                    ShadowDx = input.ReadInt32();
                    break;
                  }
                  case 88: {
                    ShadowDy = input.ReadInt32();
                    break;
                  }
                  case 96: {
                    ShadowRadius = input.ReadInt32();
                    break;
                  }
                  case 106: {
                    ShadowColor = input.ReadString();
                    break;
                  }
                  case 114: {
                    StrokeColor = input.ReadString();
                    break;
                  }
                  case 120: {
                    StrokeWidth = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class LikeMessage : pb::IMessage<LikeMessage> {
    private static readonly pb::MessageParser<LikeMessage> _parser = new pb::MessageParser<LikeMessage>(() => new LikeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LikeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LikeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LikeMessage(LikeMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      count_ = other.count_;
      total_ = other.total_;
      color_ = other.color_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LikeMessage Clone() {
      return new LikeMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private long color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 5;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LikeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LikeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Count != other.Count) return false;
      if (Total != other.Total) return false;
      if (Color != other.Color) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (Color != 0L) hash ^= Color.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (Total != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Total);
      }
      if (Color != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Color);
      }
      if (user_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(User);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (Color != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Color);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LikeMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.Color != 0L) {
        Color = other.Color;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
          case 24: {
            Total = input.ReadInt64();
            break;
          }
          case 32: {
            Color = input.ReadInt64();
            break;
          }
          case 42: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      content_ = other.content_;
      visibleToSender_ = other.visibleToSender_;
      backgroundImage_ = other.backgroundImage_ != null ? other.backgroundImage_.Clone() : null;
      fullScreenTextColor_ = other.fullScreenTextColor_;
      backgroundImageV2_ = other.backgroundImageV2_ != null ? other.backgroundImageV2_.Clone() : null;
      publicAreaCommon_ = other.publicAreaCommon_ != null ? other.publicAreaCommon_.Clone() : null;
      giftImage_ = other.giftImage_ != null ? other.giftImage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibleToSender" field.</summary>
    public const int VisibleToSenderFieldNumber = 4;
    private bool visibleToSender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VisibleToSender {
      get { return visibleToSender_; }
      set {
        visibleToSender_ = value;
      }
    }

    /// <summary>Field number for the "backgroundImage" field.</summary>
    public const int BackgroundImageFieldNumber = 5;
    private global::DouyinPb.Image backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "fullScreenTextColor" field.</summary>
    public const int FullScreenTextColorFieldNumber = 6;
    private string fullScreenTextColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullScreenTextColor {
      get { return fullScreenTextColor_; }
      set {
        fullScreenTextColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundImageV2" field.</summary>
    public const int BackgroundImageV2FieldNumber = 7;
    private global::DouyinPb.Image backgroundImageV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image BackgroundImageV2 {
      get { return backgroundImageV2_; }
      set {
        backgroundImageV2_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 9;
    private global::DouyinPb.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    /// <summary>Field number for the "giftImage" field.</summary>
    public const int GiftImageFieldNumber = 10;
    private global::DouyinPb.Image giftImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image GiftImage {
      get { return giftImage_; }
      set {
        giftImage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Content != other.Content) return false;
      if (VisibleToSender != other.VisibleToSender) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (FullScreenTextColor != other.FullScreenTextColor) return false;
      if (!object.Equals(BackgroundImageV2, other.BackgroundImageV2)) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      if (!object.Equals(GiftImage, other.GiftImage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (VisibleToSender != false) hash ^= VisibleToSender.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (FullScreenTextColor.Length != 0) hash ^= FullScreenTextColor.GetHashCode();
      if (backgroundImageV2_ != null) hash ^= BackgroundImageV2.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (giftImage_ != null) hash ^= GiftImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (VisibleToSender != false) {
        output.WriteRawTag(32);
        output.WriteBool(VisibleToSender);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (FullScreenTextColor.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FullScreenTextColor);
      }
      if (backgroundImageV2_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BackgroundImageV2);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PublicAreaCommon);
      }
      if (giftImage_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(GiftImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (VisibleToSender != false) {
        size += 1 + 1;
      }
      if (backgroundImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (FullScreenTextColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullScreenTextColor);
      }
      if (backgroundImageV2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageV2);
      }
      if (publicAreaCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (giftImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.VisibleToSender != false) {
        VisibleToSender = other.VisibleToSender;
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          BackgroundImage = new global::DouyinPb.Image();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.FullScreenTextColor.Length != 0) {
        FullScreenTextColor = other.FullScreenTextColor;
      }
      if (other.backgroundImageV2_ != null) {
        if (backgroundImageV2_ == null) {
          BackgroundImageV2 = new global::DouyinPb.Image();
        }
        BackgroundImageV2.MergeFrom(other.BackgroundImageV2);
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      if (other.giftImage_ != null) {
        if (giftImage_ == null) {
          GiftImage = new global::DouyinPb.Image();
        }
        GiftImage.MergeFrom(other.GiftImage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            VisibleToSender = input.ReadBool();
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::DouyinPb.Image();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            FullScreenTextColor = input.ReadString();
            break;
          }
          case 58: {
            if (backgroundImageV2_ == null) {
              BackgroundImageV2 = new global::DouyinPb.Image();
            }
            input.ReadMessage(BackgroundImageV2);
            break;
          }
          case 74: {
            if (publicAreaCommon_ == null) {
              PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
            }
            input.ReadMessage(PublicAreaCommon);
            break;
          }
          case 82: {
            if (giftImage_ == null) {
              GiftImage = new global::DouyinPb.Image();
            }
            input.ReadMessage(GiftImage);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SocialMessage : pb::IMessage<SocialMessage> {
    private static readonly pb::MessageParser<SocialMessage> _parser = new pb::MessageParser<SocialMessage>(() => new SocialMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocialMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocialMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocialMessage(SocialMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      shareType_ = other.shareType_;
      action_ = other.action_;
      shareTarget_ = other.shareTarget_;
      followCount_ = other.followCount_;
      publicAreaCommon_ = other.publicAreaCommon_ != null ? other.publicAreaCommon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocialMessage Clone() {
      return new SocialMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "shareType" field.</summary>
    public const int ShareTypeFieldNumber = 3;
    private long shareType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShareType {
      get { return shareType_; }
      set {
        shareType_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private long action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "shareTarget" field.</summary>
    public const int ShareTargetFieldNumber = 5;
    private string shareTarget_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShareTarget {
      get { return shareTarget_; }
      set {
        shareTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "followCount" field.</summary>
    public const int FollowCountFieldNumber = 6;
    private long followCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FollowCount {
      get { return followCount_; }
      set {
        followCount_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 7;
    private global::DouyinPb.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocialMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocialMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (ShareType != other.ShareType) return false;
      if (Action != other.Action) return false;
      if (ShareTarget != other.ShareTarget) return false;
      if (FollowCount != other.FollowCount) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (ShareType != 0L) hash ^= ShareType.GetHashCode();
      if (Action != 0L) hash ^= Action.GetHashCode();
      if (ShareTarget.Length != 0) hash ^= ShareTarget.GetHashCode();
      if (FollowCount != 0L) hash ^= FollowCount.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (ShareType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ShareType);
      }
      if (Action != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Action);
      }
      if (ShareTarget.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShareTarget);
      }
      if (FollowCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FollowCount);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PublicAreaCommon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (ShareType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShareType);
      }
      if (Action != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Action);
      }
      if (ShareTarget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShareTarget);
      }
      if (FollowCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FollowCount);
      }
      if (publicAreaCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocialMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.ShareType != 0L) {
        ShareType = other.ShareType;
      }
      if (other.Action != 0L) {
        Action = other.Action;
      }
      if (other.ShareTarget.Length != 0) {
        ShareTarget = other.ShareTarget;
      }
      if (other.FollowCount != 0L) {
        FollowCount = other.FollowCount;
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 24: {
            ShareType = input.ReadInt64();
            break;
          }
          case 32: {
            Action = input.ReadInt64();
            break;
          }
          case 42: {
            ShareTarget = input.ReadString();
            break;
          }
          case 48: {
            FollowCount = input.ReadInt64();
            break;
          }
          case 58: {
            if (publicAreaCommon_ == null) {
              PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
            }
            input.ReadMessage(PublicAreaCommon);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberMessage : pb::IMessage<MemberMessage> {
    private static readonly pb::MessageParser<MemberMessage> _parser = new pb::MessageParser<MemberMessage>(() => new MemberMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMessage(MemberMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      memberCount_ = other.memberCount_;
      operator_ = other.operator_ != null ? other.operator_.Clone() : null;
      isSetToAdmin_ = other.isSetToAdmin_;
      isTopUser_ = other.isTopUser_;
      rankScore_ = other.rankScore_;
      topUserNo_ = other.topUserNo_;
      enterType_ = other.enterType_;
      action_ = other.action_;
      actionDescription_ = other.actionDescription_;
      userId_ = other.userId_;
      effectConfig_ = other.effectConfig_ != null ? other.effectConfig_.Clone() : null;
      popStr_ = other.popStr_;
      enterEffectConfig_ = other.enterEffectConfig_ != null ? other.enterEffectConfig_.Clone() : null;
      backgroundImage_ = other.backgroundImage_ != null ? other.backgroundImage_.Clone() : null;
      backgroundImageV2_ = other.backgroundImageV2_ != null ? other.backgroundImageV2_.Clone() : null;
      anchorDisplayText_ = other.anchorDisplayText_ != null ? other.anchorDisplayText_.Clone() : null;
      publicAreaCommon_ = other.publicAreaCommon_ != null ? other.publicAreaCommon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMessage Clone() {
      return new MemberMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 3;
    private long memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 4;
    private global::DouyinPb.User operator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "isSetToAdmin" field.</summary>
    public const int IsSetToAdminFieldNumber = 5;
    private bool isSetToAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSetToAdmin {
      get { return isSetToAdmin_; }
      set {
        isSetToAdmin_ = value;
      }
    }

    /// <summary>Field number for the "isTopUser" field.</summary>
    public const int IsTopUserFieldNumber = 6;
    private bool isTopUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTopUser {
      get { return isTopUser_; }
      set {
        isTopUser_ = value;
      }
    }

    /// <summary>Field number for the "rankScore" field.</summary>
    public const int RankScoreFieldNumber = 7;
    private long rankScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RankScore {
      get { return rankScore_; }
      set {
        rankScore_ = value;
      }
    }

    /// <summary>Field number for the "topUserNo" field.</summary>
    public const int TopUserNoFieldNumber = 8;
    private long topUserNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopUserNo {
      get { return topUserNo_; }
      set {
        topUserNo_ = value;
      }
    }

    /// <summary>Field number for the "enterType" field.</summary>
    public const int EnterTypeFieldNumber = 9;
    private long enterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterType {
      get { return enterType_; }
      set {
        enterType_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 10;
    private long action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "actionDescription" field.</summary>
    public const int ActionDescriptionFieldNumber = 11;
    private string actionDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionDescription {
      get { return actionDescription_; }
      set {
        actionDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 12;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "effectConfig" field.</summary>
    public const int EffectConfigFieldNumber = 13;
    private global::DouyinPb.MemberMessage.Types.EffectConfig effectConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.MemberMessage.Types.EffectConfig EffectConfig {
      get { return effectConfig_; }
      set {
        effectConfig_ = value;
      }
    }

    /// <summary>Field number for the "popStr" field.</summary>
    public const int PopStrFieldNumber = 14;
    private string popStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PopStr {
      get { return popStr_; }
      set {
        popStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterEffectConfig" field.</summary>
    public const int EnterEffectConfigFieldNumber = 15;
    private global::DouyinPb.MemberMessage.Types.EffectConfig enterEffectConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.MemberMessage.Types.EffectConfig EnterEffectConfig {
      get { return enterEffectConfig_; }
      set {
        enterEffectConfig_ = value;
      }
    }

    /// <summary>Field number for the "backgroundImage" field.</summary>
    public const int BackgroundImageFieldNumber = 16;
    private global::DouyinPb.Image backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "backgroundImageV2" field.</summary>
    public const int BackgroundImageV2FieldNumber = 17;
    private global::DouyinPb.Image backgroundImageV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image BackgroundImageV2 {
      get { return backgroundImageV2_; }
      set {
        backgroundImageV2_ = value;
      }
    }

    /// <summary>Field number for the "anchorDisplayText" field.</summary>
    public const int AnchorDisplayTextFieldNumber = 18;
    private global::DouyinPb.Text anchorDisplayText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Text AnchorDisplayText {
      get { return anchorDisplayText_; }
      set {
        anchorDisplayText_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 19;
    private global::DouyinPb.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (MemberCount != other.MemberCount) return false;
      if (!object.Equals(Operator, other.Operator)) return false;
      if (IsSetToAdmin != other.IsSetToAdmin) return false;
      if (IsTopUser != other.IsTopUser) return false;
      if (RankScore != other.RankScore) return false;
      if (TopUserNo != other.TopUserNo) return false;
      if (EnterType != other.EnterType) return false;
      if (Action != other.Action) return false;
      if (ActionDescription != other.ActionDescription) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(EffectConfig, other.EffectConfig)) return false;
      if (PopStr != other.PopStr) return false;
      if (!object.Equals(EnterEffectConfig, other.EnterEffectConfig)) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (!object.Equals(BackgroundImageV2, other.BackgroundImageV2)) return false;
      if (!object.Equals(AnchorDisplayText, other.AnchorDisplayText)) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (MemberCount != 0L) hash ^= MemberCount.GetHashCode();
      if (operator_ != null) hash ^= Operator.GetHashCode();
      if (IsSetToAdmin != false) hash ^= IsSetToAdmin.GetHashCode();
      if (IsTopUser != false) hash ^= IsTopUser.GetHashCode();
      if (RankScore != 0L) hash ^= RankScore.GetHashCode();
      if (TopUserNo != 0L) hash ^= TopUserNo.GetHashCode();
      if (EnterType != 0L) hash ^= EnterType.GetHashCode();
      if (Action != 0L) hash ^= Action.GetHashCode();
      if (ActionDescription.Length != 0) hash ^= ActionDescription.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (effectConfig_ != null) hash ^= EffectConfig.GetHashCode();
      if (PopStr.Length != 0) hash ^= PopStr.GetHashCode();
      if (enterEffectConfig_ != null) hash ^= EnterEffectConfig.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (backgroundImageV2_ != null) hash ^= BackgroundImageV2.GetHashCode();
      if (anchorDisplayText_ != null) hash ^= AnchorDisplayText.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (MemberCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MemberCount);
      }
      if (operator_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Operator);
      }
      if (IsSetToAdmin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSetToAdmin);
      }
      if (IsTopUser != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTopUser);
      }
      if (RankScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RankScore);
      }
      if (TopUserNo != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TopUserNo);
      }
      if (EnterType != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(EnterType);
      }
      if (Action != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Action);
      }
      if (ActionDescription.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ActionDescription);
      }
      if (UserId != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(UserId);
      }
      if (effectConfig_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EffectConfig);
      }
      if (PopStr.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PopStr);
      }
      if (enterEffectConfig_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EnterEffectConfig);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BackgroundImage);
      }
      if (backgroundImageV2_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BackgroundImageV2);
      }
      if (anchorDisplayText_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AnchorDisplayText);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PublicAreaCommon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (MemberCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemberCount);
      }
      if (operator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operator);
      }
      if (IsSetToAdmin != false) {
        size += 1 + 1;
      }
      if (IsTopUser != false) {
        size += 1 + 1;
      }
      if (RankScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RankScore);
      }
      if (TopUserNo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopUserNo);
      }
      if (EnterType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterType);
      }
      if (Action != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Action);
      }
      if (ActionDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionDescription);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (effectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectConfig);
      }
      if (PopStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PopStr);
      }
      if (enterEffectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnterEffectConfig);
      }
      if (backgroundImage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (backgroundImageV2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageV2);
      }
      if (anchorDisplayText_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchorDisplayText);
      }
      if (publicAreaCommon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.MemberCount != 0L) {
        MemberCount = other.MemberCount;
      }
      if (other.operator_ != null) {
        if (operator_ == null) {
          Operator = new global::DouyinPb.User();
        }
        Operator.MergeFrom(other.Operator);
      }
      if (other.IsSetToAdmin != false) {
        IsSetToAdmin = other.IsSetToAdmin;
      }
      if (other.IsTopUser != false) {
        IsTopUser = other.IsTopUser;
      }
      if (other.RankScore != 0L) {
        RankScore = other.RankScore;
      }
      if (other.TopUserNo != 0L) {
        TopUserNo = other.TopUserNo;
      }
      if (other.EnterType != 0L) {
        EnterType = other.EnterType;
      }
      if (other.Action != 0L) {
        Action = other.Action;
      }
      if (other.ActionDescription.Length != 0) {
        ActionDescription = other.ActionDescription;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.effectConfig_ != null) {
        if (effectConfig_ == null) {
          EffectConfig = new global::DouyinPb.MemberMessage.Types.EffectConfig();
        }
        EffectConfig.MergeFrom(other.EffectConfig);
      }
      if (other.PopStr.Length != 0) {
        PopStr = other.PopStr;
      }
      if (other.enterEffectConfig_ != null) {
        if (enterEffectConfig_ == null) {
          EnterEffectConfig = new global::DouyinPb.MemberMessage.Types.EffectConfig();
        }
        EnterEffectConfig.MergeFrom(other.EnterEffectConfig);
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          BackgroundImage = new global::DouyinPb.Image();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.backgroundImageV2_ != null) {
        if (backgroundImageV2_ == null) {
          BackgroundImageV2 = new global::DouyinPb.Image();
        }
        BackgroundImageV2.MergeFrom(other.BackgroundImageV2);
      }
      if (other.anchorDisplayText_ != null) {
        if (anchorDisplayText_ == null) {
          AnchorDisplayText = new global::DouyinPb.Text();
        }
        AnchorDisplayText.MergeFrom(other.AnchorDisplayText);
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 24: {
            MemberCount = input.ReadInt64();
            break;
          }
          case 34: {
            if (operator_ == null) {
              Operator = new global::DouyinPb.User();
            }
            input.ReadMessage(Operator);
            break;
          }
          case 40: {
            IsSetToAdmin = input.ReadBool();
            break;
          }
          case 48: {
            IsTopUser = input.ReadBool();
            break;
          }
          case 56: {
            RankScore = input.ReadInt64();
            break;
          }
          case 64: {
            TopUserNo = input.ReadInt64();
            break;
          }
          case 72: {
            EnterType = input.ReadInt64();
            break;
          }
          case 80: {
            Action = input.ReadInt64();
            break;
          }
          case 90: {
            ActionDescription = input.ReadString();
            break;
          }
          case 96: {
            UserId = input.ReadInt64();
            break;
          }
          case 106: {
            if (effectConfig_ == null) {
              EffectConfig = new global::DouyinPb.MemberMessage.Types.EffectConfig();
            }
            input.ReadMessage(EffectConfig);
            break;
          }
          case 114: {
            PopStr = input.ReadString();
            break;
          }
          case 122: {
            if (enterEffectConfig_ == null) {
              EnterEffectConfig = new global::DouyinPb.MemberMessage.Types.EffectConfig();
            }
            input.ReadMessage(EnterEffectConfig);
            break;
          }
          case 130: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::DouyinPb.Image();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 138: {
            if (backgroundImageV2_ == null) {
              BackgroundImageV2 = new global::DouyinPb.Image();
            }
            input.ReadMessage(BackgroundImageV2);
            break;
          }
          case 146: {
            if (anchorDisplayText_ == null) {
              AnchorDisplayText = new global::DouyinPb.Text();
            }
            input.ReadMessage(AnchorDisplayText);
            break;
          }
          case 154: {
            if (publicAreaCommon_ == null) {
              PublicAreaCommon = new global::DouyinPb.PublicAreaCommon();
            }
            input.ReadMessage(PublicAreaCommon);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MemberMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EffectConfig : pb::IMessage<EffectConfig> {
        private static readonly pb::MessageParser<EffectConfig> _parser = new pb::MessageParser<EffectConfig>(() => new EffectConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EffectConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.MemberMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectConfig(EffectConfig other) : this() {
          type_ = other.type_;
          icon_ = other.icon_ != null ? other.icon_.Clone() : null;
          avatarPos_ = other.avatarPos_;
          text_ = other.text_ != null ? other.text_.Clone() : null;
          textIcon_ = other.textIcon_ != null ? other.textIcon_.Clone() : null;
          stayTime_ = other.stayTime_;
          animAssetId_ = other.animAssetId_;
          badge_ = other.badge_ != null ? other.badge_.Clone() : null;
          flexSettingArray_ = other.flexSettingArray_.Clone();
          textIconOverlay_ = other.textIconOverlay_ != null ? other.textIconOverlay_.Clone() : null;
          animatedBadge_ = other.animatedBadge_ != null ? other.animatedBadge_.Clone() : null;
          hasSweepLight_ = other.hasSweepLight_;
          textFlexSettingArray_ = other.textFlexSettingArray_.Clone();
          centerAnimAssetId_ = other.centerAnimAssetId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EffectConfig Clone() {
          return new EffectConfig(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private long type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "icon" field.</summary>
        public const int IconFieldNumber = 2;
        private global::DouyinPb.Image icon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image Icon {
          get { return icon_; }
          set {
            icon_ = value;
          }
        }

        /// <summary>Field number for the "avatarPos" field.</summary>
        public const int AvatarPosFieldNumber = 3;
        private long avatarPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AvatarPos {
          get { return avatarPos_; }
          set {
            avatarPos_ = value;
          }
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 4;
        private global::DouyinPb.Text text_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Text Text {
          get { return text_; }
          set {
            text_ = value;
          }
        }

        /// <summary>Field number for the "textIcon" field.</summary>
        public const int TextIconFieldNumber = 5;
        private global::DouyinPb.Image textIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image TextIcon {
          get { return textIcon_; }
          set {
            textIcon_ = value;
          }
        }

        /// <summary>Field number for the "stayTime" field.</summary>
        public const int StayTimeFieldNumber = 6;
        private int stayTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StayTime {
          get { return stayTime_; }
          set {
            stayTime_ = value;
          }
        }

        /// <summary>Field number for the "animAssetId" field.</summary>
        public const int AnimAssetIdFieldNumber = 7;
        private long animAssetId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AnimAssetId {
          get { return animAssetId_; }
          set {
            animAssetId_ = value;
          }
        }

        /// <summary>Field number for the "badge" field.</summary>
        public const int BadgeFieldNumber = 8;
        private global::DouyinPb.Image badge_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image Badge {
          get { return badge_; }
          set {
            badge_ = value;
          }
        }

        /// <summary>Field number for the "flexSettingArray" field.</summary>
        public const int FlexSettingArrayFieldNumber = 9;
        private static readonly pb::FieldCodec<long> _repeated_flexSettingArray_codec
            = pb::FieldCodec.ForInt64(74);
        private readonly pbc::RepeatedField<long> flexSettingArray_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> FlexSettingArray {
          get { return flexSettingArray_; }
        }

        /// <summary>Field number for the "textIconOverlay" field.</summary>
        public const int TextIconOverlayFieldNumber = 10;
        private global::DouyinPb.Image textIconOverlay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image TextIconOverlay {
          get { return textIconOverlay_; }
          set {
            textIconOverlay_ = value;
          }
        }

        /// <summary>Field number for the "animatedBadge" field.</summary>
        public const int AnimatedBadgeFieldNumber = 11;
        private global::DouyinPb.Image animatedBadge_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image AnimatedBadge {
          get { return animatedBadge_; }
          set {
            animatedBadge_ = value;
          }
        }

        /// <summary>Field number for the "hasSweepLight" field.</summary>
        public const int HasSweepLightFieldNumber = 12;
        private bool hasSweepLight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSweepLight {
          get { return hasSweepLight_; }
          set {
            hasSweepLight_ = value;
          }
        }

        /// <summary>Field number for the "textFlexSettingArray" field.</summary>
        public const int TextFlexSettingArrayFieldNumber = 13;
        private static readonly pb::FieldCodec<long> _repeated_textFlexSettingArray_codec
            = pb::FieldCodec.ForInt64(106);
        private readonly pbc::RepeatedField<long> textFlexSettingArray_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> TextFlexSettingArray {
          get { return textFlexSettingArray_; }
        }

        /// <summary>Field number for the "centerAnimAssetId" field.</summary>
        public const int CenterAnimAssetIdFieldNumber = 14;
        private long centerAnimAssetId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CenterAnimAssetId {
          get { return centerAnimAssetId_; }
          set {
            centerAnimAssetId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EffectConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EffectConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(Icon, other.Icon)) return false;
          if (AvatarPos != other.AvatarPos) return false;
          if (!object.Equals(Text, other.Text)) return false;
          if (!object.Equals(TextIcon, other.TextIcon)) return false;
          if (StayTime != other.StayTime) return false;
          if (AnimAssetId != other.AnimAssetId) return false;
          if (!object.Equals(Badge, other.Badge)) return false;
          if(!flexSettingArray_.Equals(other.flexSettingArray_)) return false;
          if (!object.Equals(TextIconOverlay, other.TextIconOverlay)) return false;
          if (!object.Equals(AnimatedBadge, other.AnimatedBadge)) return false;
          if (HasSweepLight != other.HasSweepLight) return false;
          if(!textFlexSettingArray_.Equals(other.textFlexSettingArray_)) return false;
          if (CenterAnimAssetId != other.CenterAnimAssetId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0L) hash ^= Type.GetHashCode();
          if (icon_ != null) hash ^= Icon.GetHashCode();
          if (AvatarPos != 0L) hash ^= AvatarPos.GetHashCode();
          if (text_ != null) hash ^= Text.GetHashCode();
          if (textIcon_ != null) hash ^= TextIcon.GetHashCode();
          if (StayTime != 0) hash ^= StayTime.GetHashCode();
          if (AnimAssetId != 0L) hash ^= AnimAssetId.GetHashCode();
          if (badge_ != null) hash ^= Badge.GetHashCode();
          hash ^= flexSettingArray_.GetHashCode();
          if (textIconOverlay_ != null) hash ^= TextIconOverlay.GetHashCode();
          if (animatedBadge_ != null) hash ^= AnimatedBadge.GetHashCode();
          if (HasSweepLight != false) hash ^= HasSweepLight.GetHashCode();
          hash ^= textFlexSettingArray_.GetHashCode();
          if (CenterAnimAssetId != 0L) hash ^= CenterAnimAssetId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Type);
          }
          if (icon_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Icon);
          }
          if (AvatarPos != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(AvatarPos);
          }
          if (text_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Text);
          }
          if (textIcon_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(TextIcon);
          }
          if (StayTime != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(StayTime);
          }
          if (AnimAssetId != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(AnimAssetId);
          }
          if (badge_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(Badge);
          }
          flexSettingArray_.WriteTo(output, _repeated_flexSettingArray_codec);
          if (textIconOverlay_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(TextIconOverlay);
          }
          if (animatedBadge_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(AnimatedBadge);
          }
          if (HasSweepLight != false) {
            output.WriteRawTag(96);
            output.WriteBool(HasSweepLight);
          }
          textFlexSettingArray_.WriteTo(output, _repeated_textFlexSettingArray_codec);
          if (CenterAnimAssetId != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(CenterAnimAssetId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Type);
          }
          if (icon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Icon);
          }
          if (AvatarPos != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvatarPos);
          }
          if (text_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
          }
          if (textIcon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextIcon);
          }
          if (StayTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StayTime);
          }
          if (AnimAssetId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AnimAssetId);
          }
          if (badge_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Badge);
          }
          size += flexSettingArray_.CalculateSize(_repeated_flexSettingArray_codec);
          if (textIconOverlay_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextIconOverlay);
          }
          if (animatedBadge_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimatedBadge);
          }
          if (HasSweepLight != false) {
            size += 1 + 1;
          }
          size += textFlexSettingArray_.CalculateSize(_repeated_textFlexSettingArray_codec);
          if (CenterAnimAssetId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CenterAnimAssetId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EffectConfig other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0L) {
            Type = other.Type;
          }
          if (other.icon_ != null) {
            if (icon_ == null) {
              Icon = new global::DouyinPb.Image();
            }
            Icon.MergeFrom(other.Icon);
          }
          if (other.AvatarPos != 0L) {
            AvatarPos = other.AvatarPos;
          }
          if (other.text_ != null) {
            if (text_ == null) {
              Text = new global::DouyinPb.Text();
            }
            Text.MergeFrom(other.Text);
          }
          if (other.textIcon_ != null) {
            if (textIcon_ == null) {
              TextIcon = new global::DouyinPb.Image();
            }
            TextIcon.MergeFrom(other.TextIcon);
          }
          if (other.StayTime != 0) {
            StayTime = other.StayTime;
          }
          if (other.AnimAssetId != 0L) {
            AnimAssetId = other.AnimAssetId;
          }
          if (other.badge_ != null) {
            if (badge_ == null) {
              Badge = new global::DouyinPb.Image();
            }
            Badge.MergeFrom(other.Badge);
          }
          flexSettingArray_.Add(other.flexSettingArray_);
          if (other.textIconOverlay_ != null) {
            if (textIconOverlay_ == null) {
              TextIconOverlay = new global::DouyinPb.Image();
            }
            TextIconOverlay.MergeFrom(other.TextIconOverlay);
          }
          if (other.animatedBadge_ != null) {
            if (animatedBadge_ == null) {
              AnimatedBadge = new global::DouyinPb.Image();
            }
            AnimatedBadge.MergeFrom(other.AnimatedBadge);
          }
          if (other.HasSweepLight != false) {
            HasSweepLight = other.HasSweepLight;
          }
          textFlexSettingArray_.Add(other.textFlexSettingArray_);
          if (other.CenterAnimAssetId != 0L) {
            CenterAnimAssetId = other.CenterAnimAssetId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = input.ReadInt64();
                break;
              }
              case 18: {
                if (icon_ == null) {
                  Icon = new global::DouyinPb.Image();
                }
                input.ReadMessage(Icon);
                break;
              }
              case 24: {
                AvatarPos = input.ReadInt64();
                break;
              }
              case 34: {
                if (text_ == null) {
                  Text = new global::DouyinPb.Text();
                }
                input.ReadMessage(Text);
                break;
              }
              case 42: {
                if (textIcon_ == null) {
                  TextIcon = new global::DouyinPb.Image();
                }
                input.ReadMessage(TextIcon);
                break;
              }
              case 48: {
                StayTime = input.ReadInt32();
                break;
              }
              case 56: {
                AnimAssetId = input.ReadInt64();
                break;
              }
              case 66: {
                if (badge_ == null) {
                  Badge = new global::DouyinPb.Image();
                }
                input.ReadMessage(Badge);
                break;
              }
              case 74:
              case 72: {
                flexSettingArray_.AddEntriesFrom(input, _repeated_flexSettingArray_codec);
                break;
              }
              case 82: {
                if (textIconOverlay_ == null) {
                  TextIconOverlay = new global::DouyinPb.Image();
                }
                input.ReadMessage(TextIconOverlay);
                break;
              }
              case 90: {
                if (animatedBadge_ == null) {
                  AnimatedBadge = new global::DouyinPb.Image();
                }
                input.ReadMessage(AnimatedBadge);
                break;
              }
              case 96: {
                HasSweepLight = input.ReadBool();
                break;
              }
              case 106:
              case 104: {
                textFlexSettingArray_.AddEntriesFrom(input, _repeated_textFlexSettingArray_codec);
                break;
              }
              case 112: {
                CenterAnimAssetId = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ControlMessage : pb::IMessage<ControlMessage> {
    private static readonly pb::MessageParser<ControlMessage> _parser = new pb::MessageParser<ControlMessage>(() => new ControlMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlMessage(ControlMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlMessage Clone() {
      return new ControlMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FansclubMessage : pb::IMessage<FansclubMessage> {
    private static readonly pb::MessageParser<FansclubMessage> _parser = new pb::MessageParser<FansclubMessage>(() => new FansclubMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FansclubMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansclubMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansclubMessage(FansclubMessage other) : this() {
      commonInfo_ = other.commonInfo_ != null ? other.commonInfo_.Clone() : null;
      type_ = other.type_;
      content_ = other.content_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FansclubMessage Clone() {
      return new FansclubMessage(this);
    }

    /// <summary>Field number for the "commonInfo" field.</summary>
    public const int CommonInfoFieldNumber = 1;
    private global::DouyinPb.Common commonInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common CommonInfo {
      get { return commonInfo_; }
      set {
        commonInfo_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 升级是1，加入是2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FansclubMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FansclubMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonInfo, other.CommonInfo)) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonInfo_ != null) hash ^= CommonInfo.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonInfo);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (user_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonInfo);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FansclubMessage other) {
      if (other == null) {
        return;
      }
      if (other.commonInfo_ != null) {
        if (commonInfo_ == null) {
          CommonInfo = new global::DouyinPb.Common();
        }
        CommonInfo.MergeFrom(other.CommonInfo);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonInfo_ == null) {
              CommonInfo = new global::DouyinPb.Common();
            }
            input.ReadMessage(CommonInfo);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Common : pb::IMessage<Common> {
    private static readonly pb::MessageParser<Common> _parser = new pb::MessageParser<Common>(() => new Common());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Common> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common(Common other) : this() {
      method_ = other.method_;
      msgId_ = other.msgId_;
      roomId_ = other.roomId_;
      createTime_ = other.createTime_;
      monitor_ = other.monitor_;
      isShowMsg_ = other.isShowMsg_;
      describe_ = other.describe_;
      displayText_ = other.displayText_ != null ? other.displayText_.Clone() : null;
      foldType_ = other.foldType_;
      anchorFoldType_ = other.anchorFoldType_;
      priorityScore_ = other.priorityScore_;
      logId_ = other.logId_;
      msgProcessFilterK_ = other.msgProcessFilterK_;
      msgProcessFilterV_ = other.msgProcessFilterV_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      room_ = other.room_ != null ? other.room_.Clone() : null;
      anchorFoldTypeV2_ = other.anchorFoldTypeV2_;
      processAtSeiTimeMs_ = other.processAtSeiTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common Clone() {
      return new Common(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 2;
    private long msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "monitor" field.</summary>
    public const int MonitorFieldNumber = 5;
    private int monitor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Monitor {
      get { return monitor_; }
      set {
        monitor_ = value;
      }
    }

    /// <summary>Field number for the "isShowMsg" field.</summary>
    public const int IsShowMsgFieldNumber = 6;
    private bool isShowMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowMsg {
      get { return isShowMsg_; }
      set {
        isShowMsg_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 7;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayText" field.</summary>
    public const int DisplayTextFieldNumber = 8;
    private global::DouyinPb.Text displayText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Text DisplayText {
      get { return displayText_; }
      set {
        displayText_ = value;
      }
    }

    /// <summary>Field number for the "foldType" field.</summary>
    public const int FoldTypeFieldNumber = 9;
    private long foldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FoldType {
      get { return foldType_; }
      set {
        foldType_ = value;
      }
    }

    /// <summary>Field number for the "anchorFoldType" field.</summary>
    public const int AnchorFoldTypeFieldNumber = 10;
    private long anchorFoldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AnchorFoldType {
      get { return anchorFoldType_; }
      set {
        anchorFoldType_ = value;
      }
    }

    /// <summary>Field number for the "priorityScore" field.</summary>
    public const int PriorityScoreFieldNumber = 11;
    private long priorityScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PriorityScore {
      get { return priorityScore_; }
      set {
        priorityScore_ = value;
      }
    }

    /// <summary>Field number for the "logId" field.</summary>
    public const int LogIdFieldNumber = 12;
    private string logId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogId {
      get { return logId_; }
      set {
        logId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgProcessFilterK" field.</summary>
    public const int MsgProcessFilterKFieldNumber = 13;
    private string msgProcessFilterK_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgProcessFilterK {
      get { return msgProcessFilterK_; }
      set {
        msgProcessFilterK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgProcessFilterV" field.</summary>
    public const int MsgProcessFilterVFieldNumber = 14;
    private string msgProcessFilterV_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgProcessFilterV {
      get { return msgProcessFilterV_; }
      set {
        msgProcessFilterV_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 15;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 16;
    private global::DouyinPb.Room room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "anchorFoldTypeV2" field.</summary>
    public const int AnchorFoldTypeV2FieldNumber = 17;
    private long anchorFoldTypeV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AnchorFoldTypeV2 {
      get { return anchorFoldTypeV2_; }
      set {
        anchorFoldTypeV2_ = value;
      }
    }

    /// <summary>Field number for the "processAtSeiTimeMs" field.</summary>
    public const int ProcessAtSeiTimeMsFieldNumber = 18;
    private long processAtSeiTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessAtSeiTimeMs {
      get { return processAtSeiTimeMs_; }
      set {
        processAtSeiTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Common);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Common other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (MsgId != other.MsgId) return false;
      if (RoomId != other.RoomId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Monitor != other.Monitor) return false;
      if (IsShowMsg != other.IsShowMsg) return false;
      if (Describe != other.Describe) return false;
      if (!object.Equals(DisplayText, other.DisplayText)) return false;
      if (FoldType != other.FoldType) return false;
      if (AnchorFoldType != other.AnchorFoldType) return false;
      if (PriorityScore != other.PriorityScore) return false;
      if (LogId != other.LogId) return false;
      if (MsgProcessFilterK != other.MsgProcessFilterK) return false;
      if (MsgProcessFilterV != other.MsgProcessFilterV) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if (AnchorFoldTypeV2 != other.AnchorFoldTypeV2) return false;
      if (ProcessAtSeiTimeMs != other.ProcessAtSeiTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (MsgId != 0L) hash ^= MsgId.GetHashCode();
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Monitor != 0) hash ^= Monitor.GetHashCode();
      if (IsShowMsg != false) hash ^= IsShowMsg.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (displayText_ != null) hash ^= DisplayText.GetHashCode();
      if (FoldType != 0L) hash ^= FoldType.GetHashCode();
      if (AnchorFoldType != 0L) hash ^= AnchorFoldType.GetHashCode();
      if (PriorityScore != 0L) hash ^= PriorityScore.GetHashCode();
      if (LogId.Length != 0) hash ^= LogId.GetHashCode();
      if (MsgProcessFilterK.Length != 0) hash ^= MsgProcessFilterK.GetHashCode();
      if (MsgProcessFilterV.Length != 0) hash ^= MsgProcessFilterV.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (AnchorFoldTypeV2 != 0L) hash ^= AnchorFoldTypeV2.GetHashCode();
      if (ProcessAtSeiTimeMs != 0L) hash ^= ProcessAtSeiTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (MsgId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MsgId);
      }
      if (RoomId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RoomId);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreateTime);
      }
      if (Monitor != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Monitor);
      }
      if (IsShowMsg != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsShowMsg);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Describe);
      }
      if (displayText_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DisplayText);
      }
      if (FoldType != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(FoldType);
      }
      if (AnchorFoldType != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(AnchorFoldType);
      }
      if (PriorityScore != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(PriorityScore);
      }
      if (LogId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LogId);
      }
      if (MsgProcessFilterK.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MsgProcessFilterK);
      }
      if (MsgProcessFilterV.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MsgProcessFilterV);
      }
      if (user_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(User);
      }
      if (room_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Room);
      }
      if (AnchorFoldTypeV2 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AnchorFoldTypeV2);
      }
      if (ProcessAtSeiTimeMs != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(ProcessAtSeiTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (MsgId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MsgId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Monitor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Monitor);
      }
      if (IsShowMsg != false) {
        size += 1 + 1;
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (displayText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayText);
      }
      if (FoldType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FoldType);
      }
      if (AnchorFoldType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AnchorFoldType);
      }
      if (PriorityScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PriorityScore);
      }
      if (LogId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogId);
      }
      if (MsgProcessFilterK.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgProcessFilterK);
      }
      if (MsgProcessFilterV.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgProcessFilterV);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (room_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (AnchorFoldTypeV2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AnchorFoldTypeV2);
      }
      if (ProcessAtSeiTimeMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ProcessAtSeiTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Common other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.MsgId != 0L) {
        MsgId = other.MsgId;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Monitor != 0) {
        Monitor = other.Monitor;
      }
      if (other.IsShowMsg != false) {
        IsShowMsg = other.IsShowMsg;
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.displayText_ != null) {
        if (displayText_ == null) {
          DisplayText = new global::DouyinPb.Text();
        }
        DisplayText.MergeFrom(other.DisplayText);
      }
      if (other.FoldType != 0L) {
        FoldType = other.FoldType;
      }
      if (other.AnchorFoldType != 0L) {
        AnchorFoldType = other.AnchorFoldType;
      }
      if (other.PriorityScore != 0L) {
        PriorityScore = other.PriorityScore;
      }
      if (other.LogId.Length != 0) {
        LogId = other.LogId;
      }
      if (other.MsgProcessFilterK.Length != 0) {
        MsgProcessFilterK = other.MsgProcessFilterK;
      }
      if (other.MsgProcessFilterV.Length != 0) {
        MsgProcessFilterV = other.MsgProcessFilterV;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.room_ != null) {
        if (room_ == null) {
          Room = new global::DouyinPb.Room();
        }
        Room.MergeFrom(other.Room);
      }
      if (other.AnchorFoldTypeV2 != 0L) {
        AnchorFoldTypeV2 = other.AnchorFoldTypeV2;
      }
      if (other.ProcessAtSeiTimeMs != 0L) {
        ProcessAtSeiTimeMs = other.ProcessAtSeiTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 16: {
            MsgId = input.ReadInt64();
            break;
          }
          case 24: {
            RoomId = input.ReadInt64();
            break;
          }
          case 32: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 40: {
            Monitor = input.ReadInt32();
            break;
          }
          case 48: {
            IsShowMsg = input.ReadBool();
            break;
          }
          case 58: {
            Describe = input.ReadString();
            break;
          }
          case 66: {
            if (displayText_ == null) {
              DisplayText = new global::DouyinPb.Text();
            }
            input.ReadMessage(DisplayText);
            break;
          }
          case 72: {
            FoldType = input.ReadInt64();
            break;
          }
          case 80: {
            AnchorFoldType = input.ReadInt64();
            break;
          }
          case 88: {
            PriorityScore = input.ReadInt64();
            break;
          }
          case 98: {
            LogId = input.ReadString();
            break;
          }
          case 106: {
            MsgProcessFilterK = input.ReadString();
            break;
          }
          case 114: {
            MsgProcessFilterV = input.ReadString();
            break;
          }
          case 122: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 130: {
            if (room_ == null) {
              Room = new global::DouyinPb.Room();
            }
            input.ReadMessage(Room);
            break;
          }
          case 136: {
            AnchorFoldTypeV2 = input.ReadInt64();
            break;
          }
          case 144: {
            ProcessAtSeiTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Text : pb::IMessage<Text> {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      key_ = other.key_;
      defaultPattern_ = other.defaultPattern_;
      defaultFormat_ = other.defaultFormat_ != null ? other.defaultFormat_.Clone() : null;
      pieces_ = other.pieces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultPattern" field.</summary>
    public const int DefaultPatternFieldNumber = 2;
    private string defaultPattern_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultPattern {
      get { return defaultPattern_; }
      set {
        defaultPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultFormat" field.</summary>
    public const int DefaultFormatFieldNumber = 3;
    private global::DouyinPb.TextFormat defaultFormat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.TextFormat DefaultFormat {
      get { return defaultFormat_; }
      set {
        defaultFormat_ = value;
      }
    }

    /// <summary>Field number for the "pieces" field.</summary>
    public const int PiecesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::DouyinPb.TextPiece> _repeated_pieces_codec
        = pb::FieldCodec.ForMessage(34, global::DouyinPb.TextPiece.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.TextPiece> pieces_ = new pbc::RepeatedField<global::DouyinPb.TextPiece>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.TextPiece> Pieces {
      get { return pieces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (DefaultPattern != other.DefaultPattern) return false;
      if (!object.Equals(DefaultFormat, other.DefaultFormat)) return false;
      if(!pieces_.Equals(other.pieces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (DefaultPattern.Length != 0) hash ^= DefaultPattern.GetHashCode();
      if (defaultFormat_ != null) hash ^= DefaultFormat.GetHashCode();
      hash ^= pieces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (DefaultPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultPattern);
      }
      if (defaultFormat_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultFormat);
      }
      pieces_.WriteTo(output, _repeated_pieces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (DefaultPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultPattern);
      }
      if (defaultFormat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultFormat);
      }
      size += pieces_.CalculateSize(_repeated_pieces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.DefaultPattern.Length != 0) {
        DefaultPattern = other.DefaultPattern;
      }
      if (other.defaultFormat_ != null) {
        if (defaultFormat_ == null) {
          DefaultFormat = new global::DouyinPb.TextFormat();
        }
        DefaultFormat.MergeFrom(other.DefaultFormat);
      }
      pieces_.Add(other.pieces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            DefaultPattern = input.ReadString();
            break;
          }
          case 26: {
            if (defaultFormat_ == null) {
              DefaultFormat = new global::DouyinPb.TextFormat();
            }
            input.ReadMessage(DefaultFormat);
            break;
          }
          case 34: {
            pieces_.AddEntriesFrom(input, _repeated_pieces_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      id_ = other.id_;
      idStr_ = other.idStr_;
      status_ = other.status_;
      ownerUserId_ = other.ownerUserId_;
      title_ = other.title_;
      userCount_ = other.userCount_;
      createTime_ = other.createTime_;
      linkmicLayout_ = other.linkmicLayout_;
      finishTime_ = other.finishTime_;
      extra_ = other.extra_ != null ? other.extra_.Clone() : null;
      dynamicCoverUri_ = other.dynamicCoverUri_;
      dynamicCoverDict_ = other.dynamicCoverDict_.Clone();
      lastPingTime_ = other.lastPingTime_;
      liveId_ = other.liveId_;
      streamProvider_ = other.streamProvider_;
      osType_ = other.osType_;
      clientVersion_ = other.clientVersion_;
      withLinkmic_ = other.withLinkmic_;
      enableRoomPerspective_ = other.enableRoomPerspective_;
      cover_ = other.cover_ != null ? other.cover_.Clone() : null;
      dynamicCover_ = other.dynamicCover_ != null ? other.dynamicCover_.Clone() : null;
      dynamicCoverLow_ = other.dynamicCoverLow_ != null ? other.dynamicCoverLow_.Clone() : null;
      shareUrl_ = other.shareUrl_;
      anchorShareText_ = other.anchorShareText_;
      userShareText_ = other.userShareText_;
      streamId_ = other.streamId_;
      streamIdStr_ = other.streamIdStr_;
      streamUrl_ = other.streamUrl_ != null ? other.streamUrl_.Clone() : null;
      mosaicStatus_ = other.mosaicStatus_;
      mosaicTip_ = other.mosaicTip_;
      cellStyle_ = other.cellStyle_;
      linkMic_ = other.linkMic_ != null ? other.linkMic_.Clone() : null;
      luckymoneyNum_ = other.luckymoneyNum_;
      decoList_ = other.decoList_.Clone();
      topFans_ = other.topFans_.Clone();
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      sunDailyIconContent_ = other.sunDailyIconContent_;
      distance_ = other.distance_;
      distanceCity_ = other.distanceCity_;
      location_ = other.location_;
      realDistance_ = other.realDistance_;
      feedRoomLabel_ = other.feedRoomLabel_ != null ? other.feedRoomLabel_.Clone() : null;
      commonLabelList_ = other.commonLabelList_;
      livingRoomAttrs_ = other.livingRoomAttrs_ != null ? other.livingRoomAttrs_.Clone() : null;
      adminUserIds_ = other.adminUserIds_.Clone();
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      privateInfo_ = other.privateInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "idStr" field.</summary>
    public const int IdStrFieldNumber = 2;
    private string idStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdStr {
      get { return idStr_; }
      set {
        idStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private long status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ownerUserId" field.</summary>
    public const int OwnerUserIdFieldNumber = 4;
    private long ownerUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerUserId {
      get { return ownerUserId_; }
      set {
        ownerUserId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userCount" field.</summary>
    public const int UserCountFieldNumber = 6;
    private long userCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "linkmicLayout" field.</summary>
    public const int LinkmicLayoutFieldNumber = 8;
    private long linkmicLayout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LinkmicLayout {
      get { return linkmicLayout_; }
      set {
        linkmicLayout_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 9;
    private long finishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 10;
    private global::DouyinPb.RoomExtra extra_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.RoomExtra Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    /// <summary>Field number for the "dynamicCoverUri" field.</summary>
    public const int DynamicCoverUriFieldNumber = 11;
    private string dynamicCoverUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DynamicCoverUri {
      get { return dynamicCoverUri_; }
      set {
        dynamicCoverUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dynamicCoverDict" field.</summary>
    public const int DynamicCoverDictFieldNumber = 12;
    private static readonly pbc::MapField<long, string>.Codec _map_dynamicCoverDict_codec
        = new pbc::MapField<long, string>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForString(18, ""), 98);
    private readonly pbc::MapField<long, string> dynamicCoverDict_ = new pbc::MapField<long, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, string> DynamicCoverDict {
      get { return dynamicCoverDict_; }
    }

    /// <summary>Field number for the "lastPingTime" field.</summary>
    public const int LastPingTimeFieldNumber = 13;
    private long lastPingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastPingTime {
      get { return lastPingTime_; }
      set {
        lastPingTime_ = value;
      }
    }

    /// <summary>Field number for the "liveId" field.</summary>
    public const int LiveIdFieldNumber = 14;
    private long liveId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LiveId {
      get { return liveId_; }
      set {
        liveId_ = value;
      }
    }

    /// <summary>Field number for the "streamProvider" field.</summary>
    public const int StreamProviderFieldNumber = 15;
    private long streamProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StreamProvider {
      get { return streamProvider_; }
      set {
        streamProvider_ = value;
      }
    }

    /// <summary>Field number for the "osType" field.</summary>
    public const int OsTypeFieldNumber = 16;
    private long osType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OsType {
      get { return osType_; }
      set {
        osType_ = value;
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 17;
    private long clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "withLinkmic" field.</summary>
    public const int WithLinkmicFieldNumber = 18;
    private bool withLinkmic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithLinkmic {
      get { return withLinkmic_; }
      set {
        withLinkmic_ = value;
      }
    }

    /// <summary>Field number for the "enableRoomPerspective" field.</summary>
    public const int EnableRoomPerspectiveFieldNumber = 19;
    private bool enableRoomPerspective_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableRoomPerspective {
      get { return enableRoomPerspective_; }
      set {
        enableRoomPerspective_ = value;
      }
    }

    /// <summary>Field number for the "cover" field.</summary>
    public const int CoverFieldNumber = 20;
    private global::DouyinPb.Image cover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image Cover {
      get { return cover_; }
      set {
        cover_ = value;
      }
    }

    /// <summary>Field number for the "dynamicCover" field.</summary>
    public const int DynamicCoverFieldNumber = 21;
    private global::DouyinPb.Image dynamicCover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image DynamicCover {
      get { return dynamicCover_; }
      set {
        dynamicCover_ = value;
      }
    }

    /// <summary>Field number for the "dynamicCoverLow" field.</summary>
    public const int DynamicCoverLowFieldNumber = 22;
    private global::DouyinPb.Image dynamicCoverLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image DynamicCoverLow {
      get { return dynamicCoverLow_; }
      set {
        dynamicCoverLow_ = value;
      }
    }

    /// <summary>Field number for the "shareUrl" field.</summary>
    public const int ShareUrlFieldNumber = 23;
    private string shareUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShareUrl {
      get { return shareUrl_; }
      set {
        shareUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anchorShareText" field.</summary>
    public const int AnchorShareTextFieldNumber = 24;
    private string anchorShareText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnchorShareText {
      get { return anchorShareText_; }
      set {
        anchorShareText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userShareText" field.</summary>
    public const int UserShareTextFieldNumber = 25;
    private string userShareText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserShareText {
      get { return userShareText_; }
      set {
        userShareText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "streamId" field.</summary>
    public const int StreamIdFieldNumber = 26;
    private long streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StreamId {
      get { return streamId_; }
      set {
        streamId_ = value;
      }
    }

    /// <summary>Field number for the "streamIdStr" field.</summary>
    public const int StreamIdStrFieldNumber = 27;
    private string streamIdStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamIdStr {
      get { return streamIdStr_; }
      set {
        streamIdStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "streamUrl" field.</summary>
    public const int StreamUrlFieldNumber = 28;
    private global::DouyinPb.StreamUrl streamUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.StreamUrl StreamUrl {
      get { return streamUrl_; }
      set {
        streamUrl_ = value;
      }
    }

    /// <summary>Field number for the "mosaicStatus" field.</summary>
    public const int MosaicStatusFieldNumber = 29;
    private long mosaicStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MosaicStatus {
      get { return mosaicStatus_; }
      set {
        mosaicStatus_ = value;
      }
    }

    /// <summary>Field number for the "mosaicTip" field.</summary>
    public const int MosaicTipFieldNumber = 30;
    private string mosaicTip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MosaicTip {
      get { return mosaicTip_; }
      set {
        mosaicTip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cellStyle" field.</summary>
    public const int CellStyleFieldNumber = 31;
    private long cellStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellStyle {
      get { return cellStyle_; }
      set {
        cellStyle_ = value;
      }
    }

    /// <summary>Field number for the "linkMic" field.</summary>
    public const int LinkMicFieldNumber = 32;
    private global::DouyinPb.LinkMic linkMic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.LinkMic LinkMic {
      get { return linkMic_; }
      set {
        linkMic_ = value;
      }
    }

    /// <summary>Field number for the "luckymoneyNum" field.</summary>
    public const int LuckymoneyNumFieldNumber = 33;
    private long luckymoneyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LuckymoneyNum {
      get { return luckymoneyNum_; }
      set {
        luckymoneyNum_ = value;
      }
    }

    /// <summary>Field number for the "decoList" field.</summary>
    public const int DecoListFieldNumber = 34;
    private static readonly pb::FieldCodec<global::DouyinPb.Decoration> _repeated_decoList_codec
        = pb::FieldCodec.ForMessage(274, global::DouyinPb.Decoration.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.Decoration> decoList_ = new pbc::RepeatedField<global::DouyinPb.Decoration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.Decoration> DecoList {
      get { return decoList_; }
    }

    /// <summary>Field number for the "topFans" field.</summary>
    public const int TopFansFieldNumber = 35;
    private static readonly pb::FieldCodec<global::DouyinPb.TopFan> _repeated_topFans_codec
        = pb::FieldCodec.ForMessage(282, global::DouyinPb.TopFan.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.TopFan> topFans_ = new pbc::RepeatedField<global::DouyinPb.TopFan>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.TopFan> TopFans {
      get { return topFans_; }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 36;
    private global::DouyinPb.RoomStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.RoomStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "sunDailyIconContent" field.</summary>
    public const int SunDailyIconContentFieldNumber = 37;
    private string sunDailyIconContent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SunDailyIconContent {
      get { return sunDailyIconContent_; }
      set {
        sunDailyIconContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 38;
    private string distance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Distance {
      get { return distance_; }
      set {
        distance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distanceCity" field.</summary>
    public const int DistanceCityFieldNumber = 39;
    private string distanceCity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistanceCity {
      get { return distanceCity_; }
      set {
        distanceCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 40;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "realDistance" field.</summary>
    public const int RealDistanceFieldNumber = 41;
    private string realDistance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealDistance {
      get { return realDistance_; }
      set {
        realDistance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feedRoomLabel" field.</summary>
    public const int FeedRoomLabelFieldNumber = 42;
    private global::DouyinPb.Image feedRoomLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image FeedRoomLabel {
      get { return feedRoomLabel_; }
      set {
        feedRoomLabel_ = value;
      }
    }

    /// <summary>Field number for the "commonLabelList" field.</summary>
    public const int CommonLabelListFieldNumber = 43;
    private string commonLabelList_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommonLabelList {
      get { return commonLabelList_; }
      set {
        commonLabelList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "livingRoomAttrs" field.</summary>
    public const int LivingRoomAttrsFieldNumber = 44;
    private global::DouyinPb.RoomUserAttr livingRoomAttrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.RoomUserAttr LivingRoomAttrs {
      get { return livingRoomAttrs_; }
      set {
        livingRoomAttrs_ = value;
      }
    }

    /// <summary>Field number for the "adminUserIds" field.</summary>
    public const int AdminUserIdsFieldNumber = 45;
    private static readonly pb::FieldCodec<long> _repeated_adminUserIds_codec
        = pb::FieldCodec.ForInt64(362);
    private readonly pbc::RepeatedField<long> adminUserIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> AdminUserIds {
      get { return adminUserIds_; }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 46;
    private global::DouyinPb.User owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "privateInfo" field.</summary>
    public const int PrivateInfoFieldNumber = 47;
    private string privateInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateInfo {
      get { return privateInfo_; }
      set {
        privateInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IdStr != other.IdStr) return false;
      if (Status != other.Status) return false;
      if (OwnerUserId != other.OwnerUserId) return false;
      if (Title != other.Title) return false;
      if (UserCount != other.UserCount) return false;
      if (CreateTime != other.CreateTime) return false;
      if (LinkmicLayout != other.LinkmicLayout) return false;
      if (FinishTime != other.FinishTime) return false;
      if (!object.Equals(Extra, other.Extra)) return false;
      if (DynamicCoverUri != other.DynamicCoverUri) return false;
      if (!DynamicCoverDict.Equals(other.DynamicCoverDict)) return false;
      if (LastPingTime != other.LastPingTime) return false;
      if (LiveId != other.LiveId) return false;
      if (StreamProvider != other.StreamProvider) return false;
      if (OsType != other.OsType) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (WithLinkmic != other.WithLinkmic) return false;
      if (EnableRoomPerspective != other.EnableRoomPerspective) return false;
      if (!object.Equals(Cover, other.Cover)) return false;
      if (!object.Equals(DynamicCover, other.DynamicCover)) return false;
      if (!object.Equals(DynamicCoverLow, other.DynamicCoverLow)) return false;
      if (ShareUrl != other.ShareUrl) return false;
      if (AnchorShareText != other.AnchorShareText) return false;
      if (UserShareText != other.UserShareText) return false;
      if (StreamId != other.StreamId) return false;
      if (StreamIdStr != other.StreamIdStr) return false;
      if (!object.Equals(StreamUrl, other.StreamUrl)) return false;
      if (MosaicStatus != other.MosaicStatus) return false;
      if (MosaicTip != other.MosaicTip) return false;
      if (CellStyle != other.CellStyle) return false;
      if (!object.Equals(LinkMic, other.LinkMic)) return false;
      if (LuckymoneyNum != other.LuckymoneyNum) return false;
      if(!decoList_.Equals(other.decoList_)) return false;
      if(!topFans_.Equals(other.topFans_)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (SunDailyIconContent != other.SunDailyIconContent) return false;
      if (Distance != other.Distance) return false;
      if (DistanceCity != other.DistanceCity) return false;
      if (Location != other.Location) return false;
      if (RealDistance != other.RealDistance) return false;
      if (!object.Equals(FeedRoomLabel, other.FeedRoomLabel)) return false;
      if (CommonLabelList != other.CommonLabelList) return false;
      if (!object.Equals(LivingRoomAttrs, other.LivingRoomAttrs)) return false;
      if(!adminUserIds_.Equals(other.adminUserIds_)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (PrivateInfo != other.PrivateInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (IdStr.Length != 0) hash ^= IdStr.GetHashCode();
      if (Status != 0L) hash ^= Status.GetHashCode();
      if (OwnerUserId != 0L) hash ^= OwnerUserId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (UserCount != 0L) hash ^= UserCount.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (LinkmicLayout != 0L) hash ^= LinkmicLayout.GetHashCode();
      if (FinishTime != 0L) hash ^= FinishTime.GetHashCode();
      if (extra_ != null) hash ^= Extra.GetHashCode();
      if (DynamicCoverUri.Length != 0) hash ^= DynamicCoverUri.GetHashCode();
      hash ^= DynamicCoverDict.GetHashCode();
      if (LastPingTime != 0L) hash ^= LastPingTime.GetHashCode();
      if (LiveId != 0L) hash ^= LiveId.GetHashCode();
      if (StreamProvider != 0L) hash ^= StreamProvider.GetHashCode();
      if (OsType != 0L) hash ^= OsType.GetHashCode();
      if (ClientVersion != 0L) hash ^= ClientVersion.GetHashCode();
      if (WithLinkmic != false) hash ^= WithLinkmic.GetHashCode();
      if (EnableRoomPerspective != false) hash ^= EnableRoomPerspective.GetHashCode();
      if (cover_ != null) hash ^= Cover.GetHashCode();
      if (dynamicCover_ != null) hash ^= DynamicCover.GetHashCode();
      if (dynamicCoverLow_ != null) hash ^= DynamicCoverLow.GetHashCode();
      if (ShareUrl.Length != 0) hash ^= ShareUrl.GetHashCode();
      if (AnchorShareText.Length != 0) hash ^= AnchorShareText.GetHashCode();
      if (UserShareText.Length != 0) hash ^= UserShareText.GetHashCode();
      if (StreamId != 0L) hash ^= StreamId.GetHashCode();
      if (StreamIdStr.Length != 0) hash ^= StreamIdStr.GetHashCode();
      if (streamUrl_ != null) hash ^= StreamUrl.GetHashCode();
      if (MosaicStatus != 0L) hash ^= MosaicStatus.GetHashCode();
      if (MosaicTip.Length != 0) hash ^= MosaicTip.GetHashCode();
      if (CellStyle != 0L) hash ^= CellStyle.GetHashCode();
      if (linkMic_ != null) hash ^= LinkMic.GetHashCode();
      if (LuckymoneyNum != 0L) hash ^= LuckymoneyNum.GetHashCode();
      hash ^= decoList_.GetHashCode();
      hash ^= topFans_.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (SunDailyIconContent.Length != 0) hash ^= SunDailyIconContent.GetHashCode();
      if (Distance.Length != 0) hash ^= Distance.GetHashCode();
      if (DistanceCity.Length != 0) hash ^= DistanceCity.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (RealDistance.Length != 0) hash ^= RealDistance.GetHashCode();
      if (feedRoomLabel_ != null) hash ^= FeedRoomLabel.GetHashCode();
      if (CommonLabelList.Length != 0) hash ^= CommonLabelList.GetHashCode();
      if (livingRoomAttrs_ != null) hash ^= LivingRoomAttrs.GetHashCode();
      hash ^= adminUserIds_.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (PrivateInfo.Length != 0) hash ^= PrivateInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (IdStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdStr);
      }
      if (Status != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Status);
      }
      if (OwnerUserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OwnerUserId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (UserCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UserCount);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreateTime);
      }
      if (LinkmicLayout != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LinkmicLayout);
      }
      if (FinishTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(FinishTime);
      }
      if (extra_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Extra);
      }
      if (DynamicCoverUri.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DynamicCoverUri);
      }
      dynamicCoverDict_.WriteTo(output, _map_dynamicCoverDict_codec);
      if (LastPingTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(LastPingTime);
      }
      if (LiveId != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LiveId);
      }
      if (StreamProvider != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(StreamProvider);
      }
      if (OsType != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(OsType);
      }
      if (ClientVersion != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(ClientVersion);
      }
      if (WithLinkmic != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(WithLinkmic);
      }
      if (EnableRoomPerspective != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(EnableRoomPerspective);
      }
      if (cover_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Cover);
      }
      if (dynamicCover_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(DynamicCover);
      }
      if (dynamicCoverLow_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(DynamicCoverLow);
      }
      if (ShareUrl.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(ShareUrl);
      }
      if (AnchorShareText.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(AnchorShareText);
      }
      if (UserShareText.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(UserShareText);
      }
      if (StreamId != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(StreamId);
      }
      if (StreamIdStr.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(StreamIdStr);
      }
      if (streamUrl_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(StreamUrl);
      }
      if (MosaicStatus != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(MosaicStatus);
      }
      if (MosaicTip.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(MosaicTip);
      }
      if (CellStyle != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(CellStyle);
      }
      if (linkMic_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(LinkMic);
      }
      if (LuckymoneyNum != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(LuckymoneyNum);
      }
      decoList_.WriteTo(output, _repeated_decoList_codec);
      topFans_.WriteTo(output, _repeated_topFans_codec);
      if (stats_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Stats);
      }
      if (SunDailyIconContent.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SunDailyIconContent);
      }
      if (Distance.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(Distance);
      }
      if (DistanceCity.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(DistanceCity);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Location);
      }
      if (RealDistance.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(RealDistance);
      }
      if (feedRoomLabel_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(FeedRoomLabel);
      }
      if (CommonLabelList.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(CommonLabelList);
      }
      if (livingRoomAttrs_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(LivingRoomAttrs);
      }
      adminUserIds_.WriteTo(output, _repeated_adminUserIds_codec);
      if (owner_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(Owner);
      }
      if (PrivateInfo.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(PrivateInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (IdStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdStr);
      }
      if (Status != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Status);
      }
      if (OwnerUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerUserId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (UserCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserCount);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (LinkmicLayout != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LinkmicLayout);
      }
      if (FinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime);
      }
      if (extra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
      }
      if (DynamicCoverUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DynamicCoverUri);
      }
      size += dynamicCoverDict_.CalculateSize(_map_dynamicCoverDict_codec);
      if (LastPingTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastPingTime);
      }
      if (LiveId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiveId);
      }
      if (StreamProvider != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StreamProvider);
      }
      if (OsType != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OsType);
      }
      if (ClientVersion != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClientVersion);
      }
      if (WithLinkmic != false) {
        size += 2 + 1;
      }
      if (EnableRoomPerspective != false) {
        size += 2 + 1;
      }
      if (cover_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cover);
      }
      if (dynamicCover_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DynamicCover);
      }
      if (dynamicCoverLow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DynamicCoverLow);
      }
      if (ShareUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShareUrl);
      }
      if (AnchorShareText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnchorShareText);
      }
      if (UserShareText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserShareText);
      }
      if (StreamId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StreamId);
      }
      if (StreamIdStr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StreamIdStr);
      }
      if (streamUrl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StreamUrl);
      }
      if (MosaicStatus != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MosaicStatus);
      }
      if (MosaicTip.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MosaicTip);
      }
      if (CellStyle != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CellStyle);
      }
      if (linkMic_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LinkMic);
      }
      if (LuckymoneyNum != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LuckymoneyNum);
      }
      size += decoList_.CalculateSize(_repeated_decoList_codec);
      size += topFans_.CalculateSize(_repeated_topFans_codec);
      if (stats_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (SunDailyIconContent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SunDailyIconContent);
      }
      if (Distance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Distance);
      }
      if (DistanceCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DistanceCity);
      }
      if (Location.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (RealDistance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RealDistance);
      }
      if (feedRoomLabel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FeedRoomLabel);
      }
      if (CommonLabelList.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommonLabelList);
      }
      if (livingRoomAttrs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LivingRoomAttrs);
      }
      size += adminUserIds_.CalculateSize(_repeated_adminUserIds_codec);
      if (owner_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (PrivateInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrivateInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.IdStr.Length != 0) {
        IdStr = other.IdStr;
      }
      if (other.Status != 0L) {
        Status = other.Status;
      }
      if (other.OwnerUserId != 0L) {
        OwnerUserId = other.OwnerUserId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.UserCount != 0L) {
        UserCount = other.UserCount;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.LinkmicLayout != 0L) {
        LinkmicLayout = other.LinkmicLayout;
      }
      if (other.FinishTime != 0L) {
        FinishTime = other.FinishTime;
      }
      if (other.extra_ != null) {
        if (extra_ == null) {
          Extra = new global::DouyinPb.RoomExtra();
        }
        Extra.MergeFrom(other.Extra);
      }
      if (other.DynamicCoverUri.Length != 0) {
        DynamicCoverUri = other.DynamicCoverUri;
      }
      dynamicCoverDict_.Add(other.dynamicCoverDict_);
      if (other.LastPingTime != 0L) {
        LastPingTime = other.LastPingTime;
      }
      if (other.LiveId != 0L) {
        LiveId = other.LiveId;
      }
      if (other.StreamProvider != 0L) {
        StreamProvider = other.StreamProvider;
      }
      if (other.OsType != 0L) {
        OsType = other.OsType;
      }
      if (other.ClientVersion != 0L) {
        ClientVersion = other.ClientVersion;
      }
      if (other.WithLinkmic != false) {
        WithLinkmic = other.WithLinkmic;
      }
      if (other.EnableRoomPerspective != false) {
        EnableRoomPerspective = other.EnableRoomPerspective;
      }
      if (other.cover_ != null) {
        if (cover_ == null) {
          Cover = new global::DouyinPb.Image();
        }
        Cover.MergeFrom(other.Cover);
      }
      if (other.dynamicCover_ != null) {
        if (dynamicCover_ == null) {
          DynamicCover = new global::DouyinPb.Image();
        }
        DynamicCover.MergeFrom(other.DynamicCover);
      }
      if (other.dynamicCoverLow_ != null) {
        if (dynamicCoverLow_ == null) {
          DynamicCoverLow = new global::DouyinPb.Image();
        }
        DynamicCoverLow.MergeFrom(other.DynamicCoverLow);
      }
      if (other.ShareUrl.Length != 0) {
        ShareUrl = other.ShareUrl;
      }
      if (other.AnchorShareText.Length != 0) {
        AnchorShareText = other.AnchorShareText;
      }
      if (other.UserShareText.Length != 0) {
        UserShareText = other.UserShareText;
      }
      if (other.StreamId != 0L) {
        StreamId = other.StreamId;
      }
      if (other.StreamIdStr.Length != 0) {
        StreamIdStr = other.StreamIdStr;
      }
      if (other.streamUrl_ != null) {
        if (streamUrl_ == null) {
          StreamUrl = new global::DouyinPb.StreamUrl();
        }
        StreamUrl.MergeFrom(other.StreamUrl);
      }
      if (other.MosaicStatus != 0L) {
        MosaicStatus = other.MosaicStatus;
      }
      if (other.MosaicTip.Length != 0) {
        MosaicTip = other.MosaicTip;
      }
      if (other.CellStyle != 0L) {
        CellStyle = other.CellStyle;
      }
      if (other.linkMic_ != null) {
        if (linkMic_ == null) {
          LinkMic = new global::DouyinPb.LinkMic();
        }
        LinkMic.MergeFrom(other.LinkMic);
      }
      if (other.LuckymoneyNum != 0L) {
        LuckymoneyNum = other.LuckymoneyNum;
      }
      decoList_.Add(other.decoList_);
      topFans_.Add(other.topFans_);
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::DouyinPb.RoomStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.SunDailyIconContent.Length != 0) {
        SunDailyIconContent = other.SunDailyIconContent;
      }
      if (other.Distance.Length != 0) {
        Distance = other.Distance;
      }
      if (other.DistanceCity.Length != 0) {
        DistanceCity = other.DistanceCity;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.RealDistance.Length != 0) {
        RealDistance = other.RealDistance;
      }
      if (other.feedRoomLabel_ != null) {
        if (feedRoomLabel_ == null) {
          FeedRoomLabel = new global::DouyinPb.Image();
        }
        FeedRoomLabel.MergeFrom(other.FeedRoomLabel);
      }
      if (other.CommonLabelList.Length != 0) {
        CommonLabelList = other.CommonLabelList;
      }
      if (other.livingRoomAttrs_ != null) {
        if (livingRoomAttrs_ == null) {
          LivingRoomAttrs = new global::DouyinPb.RoomUserAttr();
        }
        LivingRoomAttrs.MergeFrom(other.LivingRoomAttrs);
      }
      adminUserIds_.Add(other.adminUserIds_);
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::DouyinPb.User();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.PrivateInfo.Length != 0) {
        PrivateInfo = other.PrivateInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            IdStr = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt64();
            break;
          }
          case 32: {
            OwnerUserId = input.ReadInt64();
            break;
          }
          case 42: {
            Title = input.ReadString();
            break;
          }
          case 48: {
            UserCount = input.ReadInt64();
            break;
          }
          case 56: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 64: {
            LinkmicLayout = input.ReadInt64();
            break;
          }
          case 72: {
            FinishTime = input.ReadInt64();
            break;
          }
          case 82: {
            if (extra_ == null) {
              Extra = new global::DouyinPb.RoomExtra();
            }
            input.ReadMessage(Extra);
            break;
          }
          case 90: {
            DynamicCoverUri = input.ReadString();
            break;
          }
          case 98: {
            dynamicCoverDict_.AddEntriesFrom(input, _map_dynamicCoverDict_codec);
            break;
          }
          case 104: {
            LastPingTime = input.ReadInt64();
            break;
          }
          case 112: {
            LiveId = input.ReadInt64();
            break;
          }
          case 120: {
            StreamProvider = input.ReadInt64();
            break;
          }
          case 128: {
            OsType = input.ReadInt64();
            break;
          }
          case 136: {
            ClientVersion = input.ReadInt64();
            break;
          }
          case 144: {
            WithLinkmic = input.ReadBool();
            break;
          }
          case 152: {
            EnableRoomPerspective = input.ReadBool();
            break;
          }
          case 162: {
            if (cover_ == null) {
              Cover = new global::DouyinPb.Image();
            }
            input.ReadMessage(Cover);
            break;
          }
          case 170: {
            if (dynamicCover_ == null) {
              DynamicCover = new global::DouyinPb.Image();
            }
            input.ReadMessage(DynamicCover);
            break;
          }
          case 178: {
            if (dynamicCoverLow_ == null) {
              DynamicCoverLow = new global::DouyinPb.Image();
            }
            input.ReadMessage(DynamicCoverLow);
            break;
          }
          case 186: {
            ShareUrl = input.ReadString();
            break;
          }
          case 194: {
            AnchorShareText = input.ReadString();
            break;
          }
          case 202: {
            UserShareText = input.ReadString();
            break;
          }
          case 208: {
            StreamId = input.ReadInt64();
            break;
          }
          case 218: {
            StreamIdStr = input.ReadString();
            break;
          }
          case 226: {
            if (streamUrl_ == null) {
              StreamUrl = new global::DouyinPb.StreamUrl();
            }
            input.ReadMessage(StreamUrl);
            break;
          }
          case 232: {
            MosaicStatus = input.ReadInt64();
            break;
          }
          case 242: {
            MosaicTip = input.ReadString();
            break;
          }
          case 248: {
            CellStyle = input.ReadInt64();
            break;
          }
          case 258: {
            if (linkMic_ == null) {
              LinkMic = new global::DouyinPb.LinkMic();
            }
            input.ReadMessage(LinkMic);
            break;
          }
          case 264: {
            LuckymoneyNum = input.ReadInt64();
            break;
          }
          case 274: {
            decoList_.AddEntriesFrom(input, _repeated_decoList_codec);
            break;
          }
          case 282: {
            topFans_.AddEntriesFrom(input, _repeated_topFans_codec);
            break;
          }
          case 290: {
            if (stats_ == null) {
              Stats = new global::DouyinPb.RoomStats();
            }
            input.ReadMessage(Stats);
            break;
          }
          case 298: {
            SunDailyIconContent = input.ReadString();
            break;
          }
          case 306: {
            Distance = input.ReadString();
            break;
          }
          case 314: {
            DistanceCity = input.ReadString();
            break;
          }
          case 322: {
            Location = input.ReadString();
            break;
          }
          case 330: {
            RealDistance = input.ReadString();
            break;
          }
          case 338: {
            if (feedRoomLabel_ == null) {
              FeedRoomLabel = new global::DouyinPb.Image();
            }
            input.ReadMessage(FeedRoomLabel);
            break;
          }
          case 346: {
            CommonLabelList = input.ReadString();
            break;
          }
          case 354: {
            if (livingRoomAttrs_ == null) {
              LivingRoomAttrs = new global::DouyinPb.RoomUserAttr();
            }
            input.ReadMessage(LivingRoomAttrs);
            break;
          }
          case 362:
          case 360: {
            adminUserIds_.AddEntriesFrom(input, _repeated_adminUserIds_codec);
            break;
          }
          case 370: {
            if (owner_ == null) {
              Owner = new global::DouyinPb.User();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 378: {
            PrivateInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomExtra : pb::IMessage<RoomExtra> {
    private static readonly pb::MessageParser<RoomExtra> _parser = new pb::MessageParser<RoomExtra>(() => new RoomExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomExtra(RoomExtra other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomExtra Clone() {
      return new RoomExtra(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomExtra other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RoomStats : pb::IMessage<RoomStats> {
    private static readonly pb::MessageParser<RoomStats> _parser = new pb::MessageParser<RoomStats>(() => new RoomStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStats(RoomStats other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStats Clone() {
      return new RoomStats(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomStats other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RoomUserAttr : pb::IMessage<RoomUserAttr> {
    private static readonly pb::MessageParser<RoomUserAttr> _parser = new pb::MessageParser<RoomUserAttr>(() => new RoomUserAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomUserAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserAttr(RoomUserAttr other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserAttr Clone() {
      return new RoomUserAttr(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomUserAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomUserAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomUserAttr other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StreamUrl : pb::IMessage<StreamUrl> {
    private static readonly pb::MessageParser<StreamUrl> _parser = new pb::MessageParser<StreamUrl>(() => new StreamUrl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamUrl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamUrl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamUrl(StreamUrl other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamUrl Clone() {
      return new StreamUrl(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamUrl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamUrl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamUrl other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LinkMic : pb::IMessage<LinkMic> {
    private static readonly pb::MessageParser<LinkMic> _parser = new pb::MessageParser<LinkMic>(() => new LinkMic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkMic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkMic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkMic(LinkMic other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkMic Clone() {
      return new LinkMic(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinkMic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinkMic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinkMic other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Decoration : pb::IMessage<Decoration> {
    private static readonly pb::MessageParser<Decoration> _parser = new pb::MessageParser<Decoration>(() => new Decoration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decoration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decoration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decoration(Decoration other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decoration Clone() {
      return new Decoration(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decoration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decoration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decoration other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TopFan : pb::IMessage<TopFan> {
    private static readonly pb::MessageParser<TopFan> _parser = new pb::MessageParser<TopFan>(() => new TopFan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopFan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopFan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopFan(TopFan other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopFan Clone() {
      return new TopFan(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopFan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopFan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopFan other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      shortId_ = other.shortId_;
      nickname_ = other.nickname_;
      gender_ = other.gender_;
      signature_ = other.signature_;
      level_ = other.level_;
      birthday_ = other.birthday_;
      telephone_ = other.telephone_;
      avatarThumb_ = other.avatarThumb_ != null ? other.avatarThumb_.Clone() : null;
      avatarMedium_ = other.avatarMedium_ != null ? other.avatarMedium_.Clone() : null;
      avatarLarge_ = other.avatarLarge_ != null ? other.avatarLarge_.Clone() : null;
      verified_ = other.verified_;
      experience_ = other.experience_;
      city_ = other.city_;
      status_ = other.status_;
      createTime_ = other.createTime_;
      modifyTime_ = other.modifyTime_;
      secret_ = other.secret_;
      shareQrcodeUri_ = other.shareQrcodeUri_;
      incomeSharePercent_ = other.incomeSharePercent_;
      badgeImageList_ = other.badgeImageList_ != null ? other.badgeImageList_.Clone() : null;
      followInfo_ = other.followInfo_ != null ? other.followInfo_.Clone() : null;
      payGrade_ = other.payGrade_ != null ? other.payGrade_.Clone() : null;
      fansClub_ = other.fansClub_ != null ? other.fansClub_.Clone() : null;
      border_ = other.border_ != null ? other.border_.Clone() : null;
      specialId_ = other.specialId_;
      avatarBorder_ = other.avatarBorder_ != null ? other.avatarBorder_.Clone() : null;
      medal_ = other.medal_ != null ? other.medal_.Clone() : null;
      realTimeIcons_ = other.realTimeIcons_.Clone();
      newRealTimeIcons_ = other.newRealTimeIcons_.Clone();
      topVipNo_ = other.topVipNo_;
      userAttr_ = other.userAttr_ != null ? other.userAttr_.Clone() : null;
      ownRoom_ = other.ownRoom_ != null ? other.ownRoom_.Clone() : null;
      payScore_ = other.payScore_;
      ticketCount_ = other.ticketCount_;
      anchorInfo_ = other.anchorInfo_ != null ? other.anchorInfo_.Clone() : null;
      linkMicStats_ = other.linkMicStats_;
      displayId_ = other.displayId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "shortId" field.</summary>
    public const int ShortIdFieldNumber = 2;
    private long shortId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShortId {
      get { return shortId_; }
      set {
        shortId_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 4;
    private int gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private string signature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "birthday" field.</summary>
    public const int BirthdayFieldNumber = 7;
    private long birthday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Birthday {
      get { return birthday_; }
      set {
        birthday_ = value;
      }
    }

    /// <summary>Field number for the "telephone" field.</summary>
    public const int TelephoneFieldNumber = 8;
    private string telephone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Telephone {
      get { return telephone_; }
      set {
        telephone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarThumb" field.</summary>
    public const int AvatarThumbFieldNumber = 9;
    private global::DouyinPb.Image avatarThumb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image AvatarThumb {
      get { return avatarThumb_; }
      set {
        avatarThumb_ = value;
      }
    }

    /// <summary>Field number for the "avatarMedium" field.</summary>
    public const int AvatarMediumFieldNumber = 10;
    private global::DouyinPb.Image avatarMedium_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image AvatarMedium {
      get { return avatarMedium_; }
      set {
        avatarMedium_ = value;
      }
    }

    /// <summary>Field number for the "avatarLarge" field.</summary>
    public const int AvatarLargeFieldNumber = 11;
    private global::DouyinPb.Image avatarLarge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image AvatarLarge {
      get { return avatarLarge_; }
      set {
        avatarLarge_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 12;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 13;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 14;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 15;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 16;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "modifyTime" field.</summary>
    public const int ModifyTimeFieldNumber = 17;
    private long modifyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ModifyTime {
      get { return modifyTime_; }
      set {
        modifyTime_ = value;
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 18;
    private int secret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Secret {
      get { return secret_; }
      set {
        secret_ = value;
      }
    }

    /// <summary>Field number for the "shareQrcodeUri" field.</summary>
    public const int ShareQrcodeUriFieldNumber = 19;
    private string shareQrcodeUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShareQrcodeUri {
      get { return shareQrcodeUri_; }
      set {
        shareQrcodeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "incomeSharePercent" field.</summary>
    public const int IncomeSharePercentFieldNumber = 20;
    private int incomeSharePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncomeSharePercent {
      get { return incomeSharePercent_; }
      set {
        incomeSharePercent_ = value;
      }
    }

    /// <summary>Field number for the "badgeImageList" field.</summary>
    public const int BadgeImageListFieldNumber = 21;
    private global::DouyinPb.Image badgeImageList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image BadgeImageList {
      get { return badgeImageList_; }
      set {
        badgeImageList_ = value;
      }
    }

    /// <summary>Field number for the "followInfo" field.</summary>
    public const int FollowInfoFieldNumber = 22;
    private global::DouyinPb.User.Types.FollowInfo followInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.FollowInfo FollowInfo {
      get { return followInfo_; }
      set {
        followInfo_ = value;
      }
    }

    /// <summary>Field number for the "payGrade" field.</summary>
    public const int PayGradeFieldNumber = 23;
    private global::DouyinPb.User.Types.PayGrade payGrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.PayGrade PayGrade {
      get { return payGrade_; }
      set {
        payGrade_ = value;
      }
    }

    /// <summary>Field number for the "fansClub" field.</summary>
    public const int FansClubFieldNumber = 24;
    private global::DouyinPb.User.Types.FansClub fansClub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.FansClub FansClub {
      get { return fansClub_; }
      set {
        fansClub_ = value;
      }
    }

    /// <summary>Field number for the "border" field.</summary>
    public const int BorderFieldNumber = 25;
    private global::DouyinPb.User.Types.Border border_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.Border Border {
      get { return border_; }
      set {
        border_ = value;
      }
    }

    /// <summary>Field number for the "specialId" field.</summary>
    public const int SpecialIdFieldNumber = 26;
    private string specialId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecialId {
      get { return specialId_; }
      set {
        specialId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarBorder" field.</summary>
    public const int AvatarBorderFieldNumber = 27;
    private global::DouyinPb.Image avatarBorder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image AvatarBorder {
      get { return avatarBorder_; }
      set {
        avatarBorder_ = value;
      }
    }

    /// <summary>Field number for the "medal" field.</summary>
    public const int MedalFieldNumber = 28;
    private global::DouyinPb.Image medal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image Medal {
      get { return medal_; }
      set {
        medal_ = value;
      }
    }

    /// <summary>Field number for the "realTimeIcons" field.</summary>
    public const int RealTimeIconsFieldNumber = 29;
    private static readonly pb::FieldCodec<global::DouyinPb.Image> _repeated_realTimeIcons_codec
        = pb::FieldCodec.ForMessage(234, global::DouyinPb.Image.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.Image> realTimeIcons_ = new pbc::RepeatedField<global::DouyinPb.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.Image> RealTimeIcons {
      get { return realTimeIcons_; }
    }

    /// <summary>Field number for the "newRealTimeIcons" field.</summary>
    public const int NewRealTimeIconsFieldNumber = 30;
    private static readonly pb::FieldCodec<global::DouyinPb.Image> _repeated_newRealTimeIcons_codec
        = pb::FieldCodec.ForMessage(242, global::DouyinPb.Image.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.Image> newRealTimeIcons_ = new pbc::RepeatedField<global::DouyinPb.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.Image> NewRealTimeIcons {
      get { return newRealTimeIcons_; }
    }

    /// <summary>Field number for the "topVipNo" field.</summary>
    public const int TopVipNoFieldNumber = 31;
    private long topVipNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopVipNo {
      get { return topVipNo_; }
      set {
        topVipNo_ = value;
      }
    }

    /// <summary>Field number for the "userAttr" field.</summary>
    public const int UserAttrFieldNumber = 32;
    private global::DouyinPb.User.Types.UserAttr userAttr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.UserAttr UserAttr {
      get { return userAttr_; }
      set {
        userAttr_ = value;
      }
    }

    /// <summary>Field number for the "ownRoom" field.</summary>
    public const int OwnRoomFieldNumber = 33;
    private global::DouyinPb.User.Types.OwnRoom ownRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.OwnRoom OwnRoom {
      get { return ownRoom_; }
      set {
        ownRoom_ = value;
      }
    }

    /// <summary>Field number for the "payScore" field.</summary>
    public const int PayScoreFieldNumber = 34;
    private long payScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayScore {
      get { return payScore_; }
      set {
        payScore_ = value;
      }
    }

    /// <summary>Field number for the "ticketCount" field.</summary>
    public const int TicketCountFieldNumber = 35;
    private long ticketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TicketCount {
      get { return ticketCount_; }
      set {
        ticketCount_ = value;
      }
    }

    /// <summary>Field number for the "anchorInfo" field.</summary>
    public const int AnchorInfoFieldNumber = 36;
    private global::DouyinPb.User.Types.AnchorInfo anchorInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User.Types.AnchorInfo AnchorInfo {
      get { return anchorInfo_; }
      set {
        anchorInfo_ = value;
      }
    }

    /// <summary>Field number for the "linkMicStats" field.</summary>
    public const int LinkMicStatsFieldNumber = 37;
    private int linkMicStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LinkMicStats {
      get { return linkMicStats_; }
      set {
        linkMicStats_ = value;
      }
    }

    /// <summary>Field number for the "displayId" field.</summary>
    public const int DisplayIdFieldNumber = 38;
    private string displayId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayId {
      get { return displayId_; }
      set {
        displayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ShortId != other.ShortId) return false;
      if (Nickname != other.Nickname) return false;
      if (Gender != other.Gender) return false;
      if (Signature != other.Signature) return false;
      if (Level != other.Level) return false;
      if (Birthday != other.Birthday) return false;
      if (Telephone != other.Telephone) return false;
      if (!object.Equals(AvatarThumb, other.AvatarThumb)) return false;
      if (!object.Equals(AvatarMedium, other.AvatarMedium)) return false;
      if (!object.Equals(AvatarLarge, other.AvatarLarge)) return false;
      if (Verified != other.Verified) return false;
      if (Experience != other.Experience) return false;
      if (City != other.City) return false;
      if (Status != other.Status) return false;
      if (CreateTime != other.CreateTime) return false;
      if (ModifyTime != other.ModifyTime) return false;
      if (Secret != other.Secret) return false;
      if (ShareQrcodeUri != other.ShareQrcodeUri) return false;
      if (IncomeSharePercent != other.IncomeSharePercent) return false;
      if (!object.Equals(BadgeImageList, other.BadgeImageList)) return false;
      if (!object.Equals(FollowInfo, other.FollowInfo)) return false;
      if (!object.Equals(PayGrade, other.PayGrade)) return false;
      if (!object.Equals(FansClub, other.FansClub)) return false;
      if (!object.Equals(Border, other.Border)) return false;
      if (SpecialId != other.SpecialId) return false;
      if (!object.Equals(AvatarBorder, other.AvatarBorder)) return false;
      if (!object.Equals(Medal, other.Medal)) return false;
      if(!realTimeIcons_.Equals(other.realTimeIcons_)) return false;
      if(!newRealTimeIcons_.Equals(other.newRealTimeIcons_)) return false;
      if (TopVipNo != other.TopVipNo) return false;
      if (!object.Equals(UserAttr, other.UserAttr)) return false;
      if (!object.Equals(OwnRoom, other.OwnRoom)) return false;
      if (PayScore != other.PayScore) return false;
      if (TicketCount != other.TicketCount) return false;
      if (!object.Equals(AnchorInfo, other.AnchorInfo)) return false;
      if (LinkMicStats != other.LinkMicStats) return false;
      if (DisplayId != other.DisplayId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ShortId != 0L) hash ^= ShortId.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Birthday != 0L) hash ^= Birthday.GetHashCode();
      if (Telephone.Length != 0) hash ^= Telephone.GetHashCode();
      if (avatarThumb_ != null) hash ^= AvatarThumb.GetHashCode();
      if (avatarMedium_ != null) hash ^= AvatarMedium.GetHashCode();
      if (avatarLarge_ != null) hash ^= AvatarLarge.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (ModifyTime != 0L) hash ^= ModifyTime.GetHashCode();
      if (Secret != 0) hash ^= Secret.GetHashCode();
      if (ShareQrcodeUri.Length != 0) hash ^= ShareQrcodeUri.GetHashCode();
      if (IncomeSharePercent != 0) hash ^= IncomeSharePercent.GetHashCode();
      if (badgeImageList_ != null) hash ^= BadgeImageList.GetHashCode();
      if (followInfo_ != null) hash ^= FollowInfo.GetHashCode();
      if (payGrade_ != null) hash ^= PayGrade.GetHashCode();
      if (fansClub_ != null) hash ^= FansClub.GetHashCode();
      if (border_ != null) hash ^= Border.GetHashCode();
      if (SpecialId.Length != 0) hash ^= SpecialId.GetHashCode();
      if (avatarBorder_ != null) hash ^= AvatarBorder.GetHashCode();
      if (medal_ != null) hash ^= Medal.GetHashCode();
      hash ^= realTimeIcons_.GetHashCode();
      hash ^= newRealTimeIcons_.GetHashCode();
      if (TopVipNo != 0L) hash ^= TopVipNo.GetHashCode();
      if (userAttr_ != null) hash ^= UserAttr.GetHashCode();
      if (ownRoom_ != null) hash ^= OwnRoom.GetHashCode();
      if (PayScore != 0L) hash ^= PayScore.GetHashCode();
      if (TicketCount != 0L) hash ^= TicketCount.GetHashCode();
      if (anchorInfo_ != null) hash ^= AnchorInfo.GetHashCode();
      if (LinkMicStats != 0) hash ^= LinkMicStats.GetHashCode();
      if (DisplayId.Length != 0) hash ^= DisplayId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ShortId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ShortId);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Gender != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gender);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Signature);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Birthday != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Birthday);
      }
      if (Telephone.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Telephone);
      }
      if (avatarThumb_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AvatarThumb);
      }
      if (avatarMedium_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AvatarMedium);
      }
      if (avatarLarge_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AvatarLarge);
      }
      if (Verified != false) {
        output.WriteRawTag(96);
        output.WriteBool(Verified);
      }
      if (Experience != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Experience);
      }
      if (City.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(City);
      }
      if (Status != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Status);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(CreateTime);
      }
      if (ModifyTime != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(ModifyTime);
      }
      if (Secret != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Secret);
      }
      if (ShareQrcodeUri.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ShareQrcodeUri);
      }
      if (IncomeSharePercent != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(IncomeSharePercent);
      }
      if (badgeImageList_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(BadgeImageList);
      }
      if (followInfo_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(FollowInfo);
      }
      if (payGrade_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PayGrade);
      }
      if (fansClub_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(FansClub);
      }
      if (border_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Border);
      }
      if (SpecialId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(SpecialId);
      }
      if (avatarBorder_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(AvatarBorder);
      }
      if (medal_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Medal);
      }
      realTimeIcons_.WriteTo(output, _repeated_realTimeIcons_codec);
      newRealTimeIcons_.WriteTo(output, _repeated_newRealTimeIcons_codec);
      if (TopVipNo != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(TopVipNo);
      }
      if (userAttr_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(UserAttr);
      }
      if (ownRoom_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(OwnRoom);
      }
      if (PayScore != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(PayScore);
      }
      if (TicketCount != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(TicketCount);
      }
      if (anchorInfo_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(AnchorInfo);
      }
      if (LinkMicStats != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(LinkMicStats);
      }
      if (DisplayId.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(DisplayId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ShortId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShortId);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Birthday != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Birthday);
      }
      if (Telephone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone);
      }
      if (avatarThumb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarThumb);
      }
      if (avatarMedium_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarMedium);
      }
      if (avatarLarge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarLarge);
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CreateTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (ModifyTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ModifyTime);
      }
      if (Secret != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Secret);
      }
      if (ShareQrcodeUri.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShareQrcodeUri);
      }
      if (IncomeSharePercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IncomeSharePercent);
      }
      if (badgeImageList_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BadgeImageList);
      }
      if (followInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FollowInfo);
      }
      if (payGrade_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PayGrade);
      }
      if (fansClub_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FansClub);
      }
      if (border_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Border);
      }
      if (SpecialId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecialId);
      }
      if (avatarBorder_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvatarBorder);
      }
      if (medal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Medal);
      }
      size += realTimeIcons_.CalculateSize(_repeated_realTimeIcons_codec);
      size += newRealTimeIcons_.CalculateSize(_repeated_newRealTimeIcons_codec);
      if (TopVipNo != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TopVipNo);
      }
      if (userAttr_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserAttr);
      }
      if (ownRoom_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OwnRoom);
      }
      if (PayScore != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PayScore);
      }
      if (TicketCount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TicketCount);
      }
      if (anchorInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchorInfo);
      }
      if (LinkMicStats != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LinkMicStats);
      }
      if (DisplayId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DisplayId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ShortId != 0L) {
        ShortId = other.ShortId;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Birthday != 0L) {
        Birthday = other.Birthday;
      }
      if (other.Telephone.Length != 0) {
        Telephone = other.Telephone;
      }
      if (other.avatarThumb_ != null) {
        if (avatarThumb_ == null) {
          AvatarThumb = new global::DouyinPb.Image();
        }
        AvatarThumb.MergeFrom(other.AvatarThumb);
      }
      if (other.avatarMedium_ != null) {
        if (avatarMedium_ == null) {
          AvatarMedium = new global::DouyinPb.Image();
        }
        AvatarMedium.MergeFrom(other.AvatarMedium);
      }
      if (other.avatarLarge_ != null) {
        if (avatarLarge_ == null) {
          AvatarLarge = new global::DouyinPb.Image();
        }
        AvatarLarge.MergeFrom(other.AvatarLarge);
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.ModifyTime != 0L) {
        ModifyTime = other.ModifyTime;
      }
      if (other.Secret != 0) {
        Secret = other.Secret;
      }
      if (other.ShareQrcodeUri.Length != 0) {
        ShareQrcodeUri = other.ShareQrcodeUri;
      }
      if (other.IncomeSharePercent != 0) {
        IncomeSharePercent = other.IncomeSharePercent;
      }
      if (other.badgeImageList_ != null) {
        if (badgeImageList_ == null) {
          BadgeImageList = new global::DouyinPb.Image();
        }
        BadgeImageList.MergeFrom(other.BadgeImageList);
      }
      if (other.followInfo_ != null) {
        if (followInfo_ == null) {
          FollowInfo = new global::DouyinPb.User.Types.FollowInfo();
        }
        FollowInfo.MergeFrom(other.FollowInfo);
      }
      if (other.payGrade_ != null) {
        if (payGrade_ == null) {
          PayGrade = new global::DouyinPb.User.Types.PayGrade();
        }
        PayGrade.MergeFrom(other.PayGrade);
      }
      if (other.fansClub_ != null) {
        if (fansClub_ == null) {
          FansClub = new global::DouyinPb.User.Types.FansClub();
        }
        FansClub.MergeFrom(other.FansClub);
      }
      if (other.border_ != null) {
        if (border_ == null) {
          Border = new global::DouyinPb.User.Types.Border();
        }
        Border.MergeFrom(other.Border);
      }
      if (other.SpecialId.Length != 0) {
        SpecialId = other.SpecialId;
      }
      if (other.avatarBorder_ != null) {
        if (avatarBorder_ == null) {
          AvatarBorder = new global::DouyinPb.Image();
        }
        AvatarBorder.MergeFrom(other.AvatarBorder);
      }
      if (other.medal_ != null) {
        if (medal_ == null) {
          Medal = new global::DouyinPb.Image();
        }
        Medal.MergeFrom(other.Medal);
      }
      realTimeIcons_.Add(other.realTimeIcons_);
      newRealTimeIcons_.Add(other.newRealTimeIcons_);
      if (other.TopVipNo != 0L) {
        TopVipNo = other.TopVipNo;
      }
      if (other.userAttr_ != null) {
        if (userAttr_ == null) {
          UserAttr = new global::DouyinPb.User.Types.UserAttr();
        }
        UserAttr.MergeFrom(other.UserAttr);
      }
      if (other.ownRoom_ != null) {
        if (ownRoom_ == null) {
          OwnRoom = new global::DouyinPb.User.Types.OwnRoom();
        }
        OwnRoom.MergeFrom(other.OwnRoom);
      }
      if (other.PayScore != 0L) {
        PayScore = other.PayScore;
      }
      if (other.TicketCount != 0L) {
        TicketCount = other.TicketCount;
      }
      if (other.anchorInfo_ != null) {
        if (anchorInfo_ == null) {
          AnchorInfo = new global::DouyinPb.User.Types.AnchorInfo();
        }
        AnchorInfo.MergeFrom(other.AnchorInfo);
      }
      if (other.LinkMicStats != 0) {
        LinkMicStats = other.LinkMicStats;
      }
      if (other.DisplayId.Length != 0) {
        DisplayId = other.DisplayId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            ShortId = input.ReadInt64();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            Gender = input.ReadInt32();
            break;
          }
          case 42: {
            Signature = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            Birthday = input.ReadInt64();
            break;
          }
          case 66: {
            Telephone = input.ReadString();
            break;
          }
          case 74: {
            if (avatarThumb_ == null) {
              AvatarThumb = new global::DouyinPb.Image();
            }
            input.ReadMessage(AvatarThumb);
            break;
          }
          case 82: {
            if (avatarMedium_ == null) {
              AvatarMedium = new global::DouyinPb.Image();
            }
            input.ReadMessage(AvatarMedium);
            break;
          }
          case 90: {
            if (avatarLarge_ == null) {
              AvatarLarge = new global::DouyinPb.Image();
            }
            input.ReadMessage(AvatarLarge);
            break;
          }
          case 96: {
            Verified = input.ReadBool();
            break;
          }
          case 104: {
            Experience = input.ReadInt32();
            break;
          }
          case 114: {
            City = input.ReadString();
            break;
          }
          case 120: {
            Status = input.ReadInt32();
            break;
          }
          case 128: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 136: {
            ModifyTime = input.ReadInt64();
            break;
          }
          case 144: {
            Secret = input.ReadInt32();
            break;
          }
          case 154: {
            ShareQrcodeUri = input.ReadString();
            break;
          }
          case 160: {
            IncomeSharePercent = input.ReadInt32();
            break;
          }
          case 170: {
            if (badgeImageList_ == null) {
              BadgeImageList = new global::DouyinPb.Image();
            }
            input.ReadMessage(BadgeImageList);
            break;
          }
          case 178: {
            if (followInfo_ == null) {
              FollowInfo = new global::DouyinPb.User.Types.FollowInfo();
            }
            input.ReadMessage(FollowInfo);
            break;
          }
          case 186: {
            if (payGrade_ == null) {
              PayGrade = new global::DouyinPb.User.Types.PayGrade();
            }
            input.ReadMessage(PayGrade);
            break;
          }
          case 194: {
            if (fansClub_ == null) {
              FansClub = new global::DouyinPb.User.Types.FansClub();
            }
            input.ReadMessage(FansClub);
            break;
          }
          case 202: {
            if (border_ == null) {
              Border = new global::DouyinPb.User.Types.Border();
            }
            input.ReadMessage(Border);
            break;
          }
          case 210: {
            SpecialId = input.ReadString();
            break;
          }
          case 218: {
            if (avatarBorder_ == null) {
              AvatarBorder = new global::DouyinPb.Image();
            }
            input.ReadMessage(AvatarBorder);
            break;
          }
          case 226: {
            if (medal_ == null) {
              Medal = new global::DouyinPb.Image();
            }
            input.ReadMessage(Medal);
            break;
          }
          case 234: {
            realTimeIcons_.AddEntriesFrom(input, _repeated_realTimeIcons_codec);
            break;
          }
          case 242: {
            newRealTimeIcons_.AddEntriesFrom(input, _repeated_newRealTimeIcons_codec);
            break;
          }
          case 248: {
            TopVipNo = input.ReadInt64();
            break;
          }
          case 258: {
            if (userAttr_ == null) {
              UserAttr = new global::DouyinPb.User.Types.UserAttr();
            }
            input.ReadMessage(UserAttr);
            break;
          }
          case 266: {
            if (ownRoom_ == null) {
              OwnRoom = new global::DouyinPb.User.Types.OwnRoom();
            }
            input.ReadMessage(OwnRoom);
            break;
          }
          case 272: {
            PayScore = input.ReadInt64();
            break;
          }
          case 280: {
            TicketCount = input.ReadInt64();
            break;
          }
          case 290: {
            if (anchorInfo_ == null) {
              AnchorInfo = new global::DouyinPb.User.Types.AnchorInfo();
            }
            input.ReadMessage(AnchorInfo);
            break;
          }
          case 296: {
            LinkMicStats = input.ReadInt32();
            break;
          }
          case 306: {
            DisplayId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the User message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UserAttr : pb::IMessage<UserAttr> {
        private static readonly pb::MessageParser<UserAttr> _parser = new pb::MessageParser<UserAttr>(() => new UserAttr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserAttr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAttr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAttr(UserAttr other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAttr Clone() {
          return new UserAttr(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserAttr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserAttr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserAttr other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class OwnRoom : pb::IMessage<OwnRoom> {
        private static readonly pb::MessageParser<OwnRoom> _parser = new pb::MessageParser<OwnRoom>(() => new OwnRoom());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OwnRoom> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OwnRoom() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OwnRoom(OwnRoom other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OwnRoom Clone() {
          return new OwnRoom(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OwnRoom);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OwnRoom other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OwnRoom other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class AnchorInfo : pb::IMessage<AnchorInfo> {
        private static readonly pb::MessageParser<AnchorInfo> _parser = new pb::MessageParser<AnchorInfo>(() => new AnchorInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnchorInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnchorInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnchorInfo(AnchorInfo other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnchorInfo Clone() {
          return new AnchorInfo(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AnchorInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnchorInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnchorInfo other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class FollowInfo : pb::IMessage<FollowInfo> {
        private static readonly pb::MessageParser<FollowInfo> _parser = new pb::MessageParser<FollowInfo>(() => new FollowInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FollowInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FollowInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FollowInfo(FollowInfo other) : this() {
          followingCount_ = other.followingCount_;
          followerCount_ = other.followerCount_;
          followStatus_ = other.followStatus_;
          pushStatus_ = other.pushStatus_;
          remarkName_ = other.remarkName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FollowInfo Clone() {
          return new FollowInfo(this);
        }

        /// <summary>Field number for the "followingCount" field.</summary>
        public const int FollowingCountFieldNumber = 1;
        private long followingCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FollowingCount {
          get { return followingCount_; }
          set {
            followingCount_ = value;
          }
        }

        /// <summary>Field number for the "followerCount" field.</summary>
        public const int FollowerCountFieldNumber = 2;
        private long followerCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FollowerCount {
          get { return followerCount_; }
          set {
            followerCount_ = value;
          }
        }

        /// <summary>Field number for the "followStatus" field.</summary>
        public const int FollowStatusFieldNumber = 3;
        private long followStatus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FollowStatus {
          get { return followStatus_; }
          set {
            followStatus_ = value;
          }
        }

        /// <summary>Field number for the "pushStatus" field.</summary>
        public const int PushStatusFieldNumber = 4;
        private long pushStatus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PushStatus {
          get { return pushStatus_; }
          set {
            pushStatus_ = value;
          }
        }

        /// <summary>Field number for the "remarkName" field.</summary>
        public const int RemarkNameFieldNumber = 5;
        private string remarkName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemarkName {
          get { return remarkName_; }
          set {
            remarkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FollowInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FollowInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FollowingCount != other.FollowingCount) return false;
          if (FollowerCount != other.FollowerCount) return false;
          if (FollowStatus != other.FollowStatus) return false;
          if (PushStatus != other.PushStatus) return false;
          if (RemarkName != other.RemarkName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FollowingCount != 0L) hash ^= FollowingCount.GetHashCode();
          if (FollowerCount != 0L) hash ^= FollowerCount.GetHashCode();
          if (FollowStatus != 0L) hash ^= FollowStatus.GetHashCode();
          if (PushStatus != 0L) hash ^= PushStatus.GetHashCode();
          if (RemarkName.Length != 0) hash ^= RemarkName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FollowingCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(FollowingCount);
          }
          if (FollowerCount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(FollowerCount);
          }
          if (FollowStatus != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(FollowStatus);
          }
          if (PushStatus != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(PushStatus);
          }
          if (RemarkName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(RemarkName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FollowingCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FollowingCount);
          }
          if (FollowerCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FollowerCount);
          }
          if (FollowStatus != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FollowStatus);
          }
          if (PushStatus != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushStatus);
          }
          if (RemarkName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemarkName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FollowInfo other) {
          if (other == null) {
            return;
          }
          if (other.FollowingCount != 0L) {
            FollowingCount = other.FollowingCount;
          }
          if (other.FollowerCount != 0L) {
            FollowerCount = other.FollowerCount;
          }
          if (other.FollowStatus != 0L) {
            FollowStatus = other.FollowStatus;
          }
          if (other.PushStatus != 0L) {
            PushStatus = other.PushStatus;
          }
          if (other.RemarkName.Length != 0) {
            RemarkName = other.RemarkName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FollowingCount = input.ReadInt64();
                break;
              }
              case 16: {
                FollowerCount = input.ReadInt64();
                break;
              }
              case 24: {
                FollowStatus = input.ReadInt64();
                break;
              }
              case 32: {
                PushStatus = input.ReadInt64();
                break;
              }
              case 42: {
                RemarkName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class FansClub : pb::IMessage<FansClub> {
        private static readonly pb::MessageParser<FansClub> _parser = new pb::MessageParser<FansClub>(() => new FansClub());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FansClub> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FansClub() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FansClub(FansClub other) : this() {
          data_ = other.data_ != null ? other.data_.Clone() : null;
          preferData_ = other.preferData_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FansClub Clone() {
          return new FansClub(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private global::DouyinPb.User.Types.FansClub.Types.FansClubData data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.User.Types.FansClub.Types.FansClubData Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        /// <summary>Field number for the "preferData" field.</summary>
        public const int PreferDataFieldNumber = 2;
        private static readonly pbc::MapField<int, global::DouyinPb.User.Types.FansClub.Types.FansClubData>.Codec _map_preferData_codec
            = new pbc::MapField<int, global::DouyinPb.User.Types.FansClub.Types.FansClubData>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::DouyinPb.User.Types.FansClub.Types.FansClubData.Parser), 18);
        private readonly pbc::MapField<int, global::DouyinPb.User.Types.FansClub.Types.FansClubData> preferData_ = new pbc::MapField<int, global::DouyinPb.User.Types.FansClub.Types.FansClubData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, global::DouyinPb.User.Types.FansClub.Types.FansClubData> PreferData {
          get { return preferData_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FansClub);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FansClub other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Data, other.Data)) return false;
          if (!PreferData.Equals(other.PreferData)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (data_ != null) hash ^= Data.GetHashCode();
          hash ^= PreferData.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (data_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Data);
          }
          preferData_.WriteTo(output, _map_preferData_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          size += preferData_.CalculateSize(_map_preferData_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FansClub other) {
          if (other == null) {
            return;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              Data = new global::DouyinPb.User.Types.FansClub.Types.FansClubData();
            }
            Data.MergeFrom(other.Data);
          }
          preferData_.Add(other.preferData_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (data_ == null) {
                  Data = new global::DouyinPb.User.Types.FansClub.Types.FansClubData();
                }
                input.ReadMessage(Data);
                break;
              }
              case 18: {
                preferData_.AddEntriesFrom(input, _map_preferData_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FansClub message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class FansClubData : pb::IMessage<FansClubData> {
            private static readonly pb::MessageParser<FansClubData> _parser = new pb::MessageParser<FansClubData>(() => new FansClubData());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FansClubData> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::DouyinPb.User.Types.FansClub.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FansClubData() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FansClubData(FansClubData other) : this() {
              clubName_ = other.clubName_;
              level_ = other.level_;
              userFansClubStatus_ = other.userFansClubStatus_;
              badge_ = other.badge_ != null ? other.badge_.Clone() : null;
              availableGiftIds_ = other.availableGiftIds_.Clone();
              anchorId_ = other.anchorId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FansClubData Clone() {
              return new FansClubData(this);
            }

            /// <summary>Field number for the "clubName" field.</summary>
            public const int ClubNameFieldNumber = 1;
            private string clubName_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ClubName {
              get { return clubName_; }
              set {
                clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "level" field.</summary>
            public const int LevelFieldNumber = 2;
            private int level_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Level {
              get { return level_; }
              set {
                level_ = value;
              }
            }

            /// <summary>Field number for the "userFansClubStatus" field.</summary>
            public const int UserFansClubStatusFieldNumber = 3;
            private int userFansClubStatus_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int UserFansClubStatus {
              get { return userFansClubStatus_; }
              set {
                userFansClubStatus_ = value;
              }
            }

            /// <summary>Field number for the "badge" field.</summary>
            public const int BadgeFieldNumber = 4;
            private global::DouyinPb.User.Types.FansClub.Types.FansClubData.Types.UserBadge badge_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::DouyinPb.User.Types.FansClub.Types.FansClubData.Types.UserBadge Badge {
              get { return badge_; }
              set {
                badge_ = value;
              }
            }

            /// <summary>Field number for the "availableGiftIds" field.</summary>
            public const int AvailableGiftIdsFieldNumber = 5;
            private static readonly pb::FieldCodec<long> _repeated_availableGiftIds_codec
                = pb::FieldCodec.ForInt64(42);
            private readonly pbc::RepeatedField<long> availableGiftIds_ = new pbc::RepeatedField<long>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<long> AvailableGiftIds {
              get { return availableGiftIds_; }
            }

            /// <summary>Field number for the "anchorId" field.</summary>
            public const int AnchorIdFieldNumber = 6;
            private long anchorId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long AnchorId {
              get { return anchorId_; }
              set {
                anchorId_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FansClubData);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FansClubData other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ClubName != other.ClubName) return false;
              if (Level != other.Level) return false;
              if (UserFansClubStatus != other.UserFansClubStatus) return false;
              if (!object.Equals(Badge, other.Badge)) return false;
              if(!availableGiftIds_.Equals(other.availableGiftIds_)) return false;
              if (AnchorId != other.AnchorId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ClubName.Length != 0) hash ^= ClubName.GetHashCode();
              if (Level != 0) hash ^= Level.GetHashCode();
              if (UserFansClubStatus != 0) hash ^= UserFansClubStatus.GetHashCode();
              if (badge_ != null) hash ^= Badge.GetHashCode();
              hash ^= availableGiftIds_.GetHashCode();
              if (AnchorId != 0L) hash ^= AnchorId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ClubName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ClubName);
              }
              if (Level != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Level);
              }
              if (UserFansClubStatus != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(UserFansClubStatus);
              }
              if (badge_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(Badge);
              }
              availableGiftIds_.WriteTo(output, _repeated_availableGiftIds_codec);
              if (AnchorId != 0L) {
                output.WriteRawTag(48);
                output.WriteInt64(AnchorId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ClubName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
              }
              if (Level != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
              }
              if (UserFansClubStatus != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserFansClubStatus);
              }
              if (badge_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Badge);
              }
              size += availableGiftIds_.CalculateSize(_repeated_availableGiftIds_codec);
              if (AnchorId != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(AnchorId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FansClubData other) {
              if (other == null) {
                return;
              }
              if (other.ClubName.Length != 0) {
                ClubName = other.ClubName;
              }
              if (other.Level != 0) {
                Level = other.Level;
              }
              if (other.UserFansClubStatus != 0) {
                UserFansClubStatus = other.UserFansClubStatus;
              }
              if (other.badge_ != null) {
                if (badge_ == null) {
                  Badge = new global::DouyinPb.User.Types.FansClub.Types.FansClubData.Types.UserBadge();
                }
                Badge.MergeFrom(other.Badge);
              }
              availableGiftIds_.Add(other.availableGiftIds_);
              if (other.AnchorId != 0L) {
                AnchorId = other.AnchorId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ClubName = input.ReadString();
                    break;
                  }
                  case 16: {
                    Level = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    UserFansClubStatus = input.ReadInt32();
                    break;
                  }
                  case 34: {
                    if (badge_ == null) {
                      Badge = new global::DouyinPb.User.Types.FansClub.Types.FansClubData.Types.UserBadge();
                    }
                    input.ReadMessage(Badge);
                    break;
                  }
                  case 42:
                  case 40: {
                    availableGiftIds_.AddEntriesFrom(input, _repeated_availableGiftIds_codec);
                    break;
                  }
                  case 48: {
                    AnchorId = input.ReadInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the FansClubData message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class UserBadge : pb::IMessage<UserBadge> {
                private static readonly pb::MessageParser<UserBadge> _parser = new pb::MessageParser<UserBadge>(() => new UserBadge());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<UserBadge> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::DouyinPb.User.Types.FansClub.Types.FansClubData.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public UserBadge() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public UserBadge(UserBadge other) : this() {
                  icons_ = other.icons_.Clone();
                  title_ = other.title_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public UserBadge Clone() {
                  return new UserBadge(this);
                }

                /// <summary>Field number for the "icons" field.</summary>
                public const int IconsFieldNumber = 1;
                private static readonly pbc::MapField<int, global::DouyinPb.Image>.Codec _map_icons_codec
                    = new pbc::MapField<int, global::DouyinPb.Image>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::DouyinPb.Image.Parser), 10);
                private readonly pbc::MapField<int, global::DouyinPb.Image> icons_ = new pbc::MapField<int, global::DouyinPb.Image>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::MapField<int, global::DouyinPb.Image> Icons {
                  get { return icons_; }
                }

                /// <summary>Field number for the "title" field.</summary>
                public const int TitleFieldNumber = 2;
                private string title_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Title {
                  get { return title_; }
                  set {
                    title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as UserBadge);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(UserBadge other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!Icons.Equals(other.Icons)) return false;
                  if (Title != other.Title) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= Icons.GetHashCode();
                  if (Title.Length != 0) hash ^= Title.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  icons_.WriteTo(output, _map_icons_codec);
                  if (Title.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Title);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += icons_.CalculateSize(_map_icons_codec);
                  if (Title.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(UserBadge other) {
                  if (other == null) {
                    return;
                  }
                  icons_.Add(other.icons_);
                  if (other.Title.Length != 0) {
                    Title = other.Title;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        icons_.AddEntriesFrom(input, _map_icons_codec);
                        break;
                      }
                      case 18: {
                        Title = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class Border : pb::IMessage<Border> {
        private static readonly pb::MessageParser<Border> _parser = new pb::MessageParser<Border>(() => new Border());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Border> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Border() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Border(Border other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Border Clone() {
          return new Border(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Border);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Border other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Border other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class GradeBuffInfo : pb::IMessage<GradeBuffInfo> {
        private static readonly pb::MessageParser<GradeBuffInfo> _parser = new pb::MessageParser<GradeBuffInfo>(() => new GradeBuffInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GradeBuffInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GradeBuffInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GradeBuffInfo(GradeBuffInfo other) : this() {
          buffLevel_ = other.buffLevel_;
          status_ = other.status_;
          endTime_ = other.endTime_;
          statsInfo_ = other.statsInfo_.Clone();
          buffBadge_ = other.buffBadge_ != null ? other.buffBadge_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GradeBuffInfo Clone() {
          return new GradeBuffInfo(this);
        }

        /// <summary>Field number for the "buffLevel" field.</summary>
        public const int BuffLevelFieldNumber = 1;
        private long buffLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long BuffLevel {
          get { return buffLevel_; }
          set {
            buffLevel_ = value;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 2;
        private int status_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "endTime" field.</summary>
        public const int EndTimeFieldNumber = 3;
        private long endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        /// <summary>Field number for the "statsInfo" field.</summary>
        public const int StatsInfoFieldNumber = 4;
        private static readonly pbc::MapField<long, long>.Codec _map_statsInfo_codec
            = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForInt64(16, 0L), 34);
        private readonly pbc::MapField<long, long> statsInfo_ = new pbc::MapField<long, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<long, long> StatsInfo {
          get { return statsInfo_; }
        }

        /// <summary>Field number for the "buffBadge" field.</summary>
        public const int BuffBadgeFieldNumber = 5;
        private global::DouyinPb.Image buffBadge_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image BuffBadge {
          get { return buffBadge_; }
          set {
            buffBadge_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GradeBuffInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GradeBuffInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BuffLevel != other.BuffLevel) return false;
          if (Status != other.Status) return false;
          if (EndTime != other.EndTime) return false;
          if (!StatsInfo.Equals(other.StatsInfo)) return false;
          if (!object.Equals(BuffBadge, other.BuffBadge)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BuffLevel != 0L) hash ^= BuffLevel.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          if (EndTime != 0L) hash ^= EndTime.GetHashCode();
          hash ^= StatsInfo.GetHashCode();
          if (buffBadge_ != null) hash ^= BuffBadge.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BuffLevel != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(BuffLevel);
          }
          if (Status != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Status);
          }
          if (EndTime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(EndTime);
          }
          statsInfo_.WriteTo(output, _map_statsInfo_codec);
          if (buffBadge_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(BuffBadge);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BuffLevel != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuffLevel);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
          }
          if (EndTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
          }
          size += statsInfo_.CalculateSize(_map_statsInfo_codec);
          if (buffBadge_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuffBadge);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GradeBuffInfo other) {
          if (other == null) {
            return;
          }
          if (other.BuffLevel != 0L) {
            BuffLevel = other.BuffLevel;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.EndTime != 0L) {
            EndTime = other.EndTime;
          }
          statsInfo_.Add(other.statsInfo_);
          if (other.buffBadge_ != null) {
            if (buffBadge_ == null) {
              BuffBadge = new global::DouyinPb.Image();
            }
            BuffBadge.MergeFrom(other.BuffBadge);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BuffLevel = input.ReadInt64();
                break;
              }
              case 16: {
                Status = input.ReadInt32();
                break;
              }
              case 24: {
                EndTime = input.ReadInt64();
                break;
              }
              case 34: {
                statsInfo_.AddEntriesFrom(input, _map_statsInfo_codec);
                break;
              }
              case 42: {
                if (buffBadge_ == null) {
                  BuffBadge = new global::DouyinPb.Image();
                }
                input.ReadMessage(BuffBadge);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PayGrade : pb::IMessage<PayGrade> {
        private static readonly pb::MessageParser<PayGrade> _parser = new pb::MessageParser<PayGrade>(() => new PayGrade());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PayGrade> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.User.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayGrade() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayGrade(PayGrade other) : this() {
          totalDiamondCount_ = other.totalDiamondCount_;
          diamondIcon_ = other.diamondIcon_ != null ? other.diamondIcon_.Clone() : null;
          name_ = other.name_;
          icon_ = other.icon_ != null ? other.icon_.Clone() : null;
          nextName_ = other.nextName_;
          level_ = other.level_;
          nextIcon_ = other.nextIcon_ != null ? other.nextIcon_.Clone() : null;
          nextDiamond_ = other.nextDiamond_;
          nowDiamond_ = other.nowDiamond_;
          thisGradeMinDiamond_ = other.thisGradeMinDiamond_;
          thisGradeMaxDiamond_ = other.thisGradeMaxDiamond_;
          payDiamondBak_ = other.payDiamondBak_;
          gradeDescribe_ = other.gradeDescribe_;
          gradeIconList_ = other.gradeIconList_.Clone();
          screenChatType_ = other.screenChatType_;
          imIcon_ = other.imIcon_ != null ? other.imIcon_.Clone() : null;
          imIconWithLevel_ = other.imIconWithLevel_ != null ? other.imIconWithLevel_.Clone() : null;
          liveIcon_ = other.liveIcon_ != null ? other.liveIcon_.Clone() : null;
          newImIconWithLevel_ = other.newImIconWithLevel_ != null ? other.newImIconWithLevel_.Clone() : null;
          newLiveIcon_ = other.newLiveIcon_ != null ? other.newLiveIcon_.Clone() : null;
          upgradeNeedConsume_ = other.upgradeNeedConsume_;
          nextPrivileges_ = other.nextPrivileges_;
          background_ = other.background_ != null ? other.background_.Clone() : null;
          backgroundBack_ = other.backgroundBack_ != null ? other.backgroundBack_.Clone() : null;
          score_ = other.score_;
          buffInfo_ = other.buffInfo_ != null ? other.buffInfo_.Clone() : null;
          gradeBanner_ = other.gradeBanner_;
          profileDialogBg_ = other.profileDialogBg_ != null ? other.profileDialogBg_.Clone() : null;
          profileDialogBgBack_ = other.profileDialogBgBack_ != null ? other.profileDialogBgBack_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayGrade Clone() {
          return new PayGrade(this);
        }

        /// <summary>Field number for the "totalDiamondCount" field.</summary>
        public const int TotalDiamondCountFieldNumber = 1;
        private long totalDiamondCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalDiamondCount {
          get { return totalDiamondCount_; }
          set {
            totalDiamondCount_ = value;
          }
        }

        /// <summary>Field number for the "diamondIcon" field.</summary>
        public const int DiamondIconFieldNumber = 2;
        private global::DouyinPb.Image diamondIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image DiamondIcon {
          get { return diamondIcon_; }
          set {
            diamondIcon_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "icon" field.</summary>
        public const int IconFieldNumber = 4;
        private global::DouyinPb.Image icon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image Icon {
          get { return icon_; }
          set {
            icon_ = value;
          }
        }

        /// <summary>Field number for the "nextName" field.</summary>
        public const int NextNameFieldNumber = 5;
        private string nextName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NextName {
          get { return nextName_; }
          set {
            nextName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 6;
        private long level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "nextIcon" field.</summary>
        public const int NextIconFieldNumber = 7;
        private global::DouyinPb.Image nextIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image NextIcon {
          get { return nextIcon_; }
          set {
            nextIcon_ = value;
          }
        }

        /// <summary>Field number for the "nextDiamond" field.</summary>
        public const int NextDiamondFieldNumber = 8;
        private long nextDiamond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long NextDiamond {
          get { return nextDiamond_; }
          set {
            nextDiamond_ = value;
          }
        }

        /// <summary>Field number for the "nowDiamond" field.</summary>
        public const int NowDiamondFieldNumber = 9;
        private long nowDiamond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long NowDiamond {
          get { return nowDiamond_; }
          set {
            nowDiamond_ = value;
          }
        }

        /// <summary>Field number for the "thisGradeMinDiamond" field.</summary>
        public const int ThisGradeMinDiamondFieldNumber = 10;
        private long thisGradeMinDiamond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ThisGradeMinDiamond {
          get { return thisGradeMinDiamond_; }
          set {
            thisGradeMinDiamond_ = value;
          }
        }

        /// <summary>Field number for the "thisGradeMaxDiamond" field.</summary>
        public const int ThisGradeMaxDiamondFieldNumber = 11;
        private long thisGradeMaxDiamond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ThisGradeMaxDiamond {
          get { return thisGradeMaxDiamond_; }
          set {
            thisGradeMaxDiamond_ = value;
          }
        }

        /// <summary>Field number for the "payDiamondBak" field.</summary>
        public const int PayDiamondBakFieldNumber = 12;
        private long payDiamondBak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PayDiamondBak {
          get { return payDiamondBak_; }
          set {
            payDiamondBak_ = value;
          }
        }

        /// <summary>Field number for the "gradeDescribe" field.</summary>
        public const int GradeDescribeFieldNumber = 13;
        private string gradeDescribe_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GradeDescribe {
          get { return gradeDescribe_; }
          set {
            gradeDescribe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "gradeIconList" field.</summary>
        public const int GradeIconListFieldNumber = 14;
        private static readonly pb::FieldCodec<global::DouyinPb.User.Types.PayGrade.Types.GradeIcon> _repeated_gradeIconList_codec
            = pb::FieldCodec.ForMessage(114, global::DouyinPb.User.Types.PayGrade.Types.GradeIcon.Parser);
        private readonly pbc::RepeatedField<global::DouyinPb.User.Types.PayGrade.Types.GradeIcon> gradeIconList_ = new pbc::RepeatedField<global::DouyinPb.User.Types.PayGrade.Types.GradeIcon>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::DouyinPb.User.Types.PayGrade.Types.GradeIcon> GradeIconList {
          get { return gradeIconList_; }
        }

        /// <summary>Field number for the "screenChatType" field.</summary>
        public const int ScreenChatTypeFieldNumber = 15;
        private long screenChatType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ScreenChatType {
          get { return screenChatType_; }
          set {
            screenChatType_ = value;
          }
        }

        /// <summary>Field number for the "imIcon" field.</summary>
        public const int ImIconFieldNumber = 16;
        private global::DouyinPb.Image imIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image ImIcon {
          get { return imIcon_; }
          set {
            imIcon_ = value;
          }
        }

        /// <summary>Field number for the "imIconWithLevel" field.</summary>
        public const int ImIconWithLevelFieldNumber = 17;
        private global::DouyinPb.Image imIconWithLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image ImIconWithLevel {
          get { return imIconWithLevel_; }
          set {
            imIconWithLevel_ = value;
          }
        }

        /// <summary>Field number for the "liveIcon" field.</summary>
        public const int LiveIconFieldNumber = 18;
        private global::DouyinPb.Image liveIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image LiveIcon {
          get { return liveIcon_; }
          set {
            liveIcon_ = value;
          }
        }

        /// <summary>Field number for the "newImIconWithLevel" field.</summary>
        public const int NewImIconWithLevelFieldNumber = 19;
        private global::DouyinPb.Image newImIconWithLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image NewImIconWithLevel {
          get { return newImIconWithLevel_; }
          set {
            newImIconWithLevel_ = value;
          }
        }

        /// <summary>Field number for the "newLiveIcon" field.</summary>
        public const int NewLiveIconFieldNumber = 20;
        private global::DouyinPb.Image newLiveIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image NewLiveIcon {
          get { return newLiveIcon_; }
          set {
            newLiveIcon_ = value;
          }
        }

        /// <summary>Field number for the "upgradeNeedConsume" field.</summary>
        public const int UpgradeNeedConsumeFieldNumber = 21;
        private long upgradeNeedConsume_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UpgradeNeedConsume {
          get { return upgradeNeedConsume_; }
          set {
            upgradeNeedConsume_ = value;
          }
        }

        /// <summary>Field number for the "nextPrivileges" field.</summary>
        public const int NextPrivilegesFieldNumber = 22;
        private string nextPrivileges_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NextPrivileges {
          get { return nextPrivileges_; }
          set {
            nextPrivileges_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "background" field.</summary>
        public const int BackgroundFieldNumber = 23;
        private global::DouyinPb.Image background_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image Background {
          get { return background_; }
          set {
            background_ = value;
          }
        }

        /// <summary>Field number for the "backgroundBack" field.</summary>
        public const int BackgroundBackFieldNumber = 24;
        private global::DouyinPb.Image backgroundBack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image BackgroundBack {
          get { return backgroundBack_; }
          set {
            backgroundBack_ = value;
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 25;
        private long score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "buffInfo" field.</summary>
        public const int BuffInfoFieldNumber = 26;
        private global::DouyinPb.User.Types.GradeBuffInfo buffInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.User.Types.GradeBuffInfo BuffInfo {
          get { return buffInfo_; }
          set {
            buffInfo_ = value;
          }
        }

        /// <summary>Field number for the "gradeBanner" field.</summary>
        public const int GradeBannerFieldNumber = 1001;
        private string gradeBanner_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GradeBanner {
          get { return gradeBanner_; }
          set {
            gradeBanner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "profileDialogBg" field.</summary>
        public const int ProfileDialogBgFieldNumber = 1002;
        private global::DouyinPb.Image profileDialogBg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image ProfileDialogBg {
          get { return profileDialogBg_; }
          set {
            profileDialogBg_ = value;
          }
        }

        /// <summary>Field number for the "profileDialogBgBack" field.</summary>
        public const int ProfileDialogBgBackFieldNumber = 1003;
        private global::DouyinPb.Image profileDialogBgBack_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DouyinPb.Image ProfileDialogBgBack {
          get { return profileDialogBgBack_; }
          set {
            profileDialogBgBack_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PayGrade);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PayGrade other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TotalDiamondCount != other.TotalDiamondCount) return false;
          if (!object.Equals(DiamondIcon, other.DiamondIcon)) return false;
          if (Name != other.Name) return false;
          if (!object.Equals(Icon, other.Icon)) return false;
          if (NextName != other.NextName) return false;
          if (Level != other.Level) return false;
          if (!object.Equals(NextIcon, other.NextIcon)) return false;
          if (NextDiamond != other.NextDiamond) return false;
          if (NowDiamond != other.NowDiamond) return false;
          if (ThisGradeMinDiamond != other.ThisGradeMinDiamond) return false;
          if (ThisGradeMaxDiamond != other.ThisGradeMaxDiamond) return false;
          if (PayDiamondBak != other.PayDiamondBak) return false;
          if (GradeDescribe != other.GradeDescribe) return false;
          if(!gradeIconList_.Equals(other.gradeIconList_)) return false;
          if (ScreenChatType != other.ScreenChatType) return false;
          if (!object.Equals(ImIcon, other.ImIcon)) return false;
          if (!object.Equals(ImIconWithLevel, other.ImIconWithLevel)) return false;
          if (!object.Equals(LiveIcon, other.LiveIcon)) return false;
          if (!object.Equals(NewImIconWithLevel, other.NewImIconWithLevel)) return false;
          if (!object.Equals(NewLiveIcon, other.NewLiveIcon)) return false;
          if (UpgradeNeedConsume != other.UpgradeNeedConsume) return false;
          if (NextPrivileges != other.NextPrivileges) return false;
          if (!object.Equals(Background, other.Background)) return false;
          if (!object.Equals(BackgroundBack, other.BackgroundBack)) return false;
          if (Score != other.Score) return false;
          if (!object.Equals(BuffInfo, other.BuffInfo)) return false;
          if (GradeBanner != other.GradeBanner) return false;
          if (!object.Equals(ProfileDialogBg, other.ProfileDialogBg)) return false;
          if (!object.Equals(ProfileDialogBgBack, other.ProfileDialogBgBack)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TotalDiamondCount != 0L) hash ^= TotalDiamondCount.GetHashCode();
          if (diamondIcon_ != null) hash ^= DiamondIcon.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (icon_ != null) hash ^= Icon.GetHashCode();
          if (NextName.Length != 0) hash ^= NextName.GetHashCode();
          if (Level != 0L) hash ^= Level.GetHashCode();
          if (nextIcon_ != null) hash ^= NextIcon.GetHashCode();
          if (NextDiamond != 0L) hash ^= NextDiamond.GetHashCode();
          if (NowDiamond != 0L) hash ^= NowDiamond.GetHashCode();
          if (ThisGradeMinDiamond != 0L) hash ^= ThisGradeMinDiamond.GetHashCode();
          if (ThisGradeMaxDiamond != 0L) hash ^= ThisGradeMaxDiamond.GetHashCode();
          if (PayDiamondBak != 0L) hash ^= PayDiamondBak.GetHashCode();
          if (GradeDescribe.Length != 0) hash ^= GradeDescribe.GetHashCode();
          hash ^= gradeIconList_.GetHashCode();
          if (ScreenChatType != 0L) hash ^= ScreenChatType.GetHashCode();
          if (imIcon_ != null) hash ^= ImIcon.GetHashCode();
          if (imIconWithLevel_ != null) hash ^= ImIconWithLevel.GetHashCode();
          if (liveIcon_ != null) hash ^= LiveIcon.GetHashCode();
          if (newImIconWithLevel_ != null) hash ^= NewImIconWithLevel.GetHashCode();
          if (newLiveIcon_ != null) hash ^= NewLiveIcon.GetHashCode();
          if (UpgradeNeedConsume != 0L) hash ^= UpgradeNeedConsume.GetHashCode();
          if (NextPrivileges.Length != 0) hash ^= NextPrivileges.GetHashCode();
          if (background_ != null) hash ^= Background.GetHashCode();
          if (backgroundBack_ != null) hash ^= BackgroundBack.GetHashCode();
          if (Score != 0L) hash ^= Score.GetHashCode();
          if (buffInfo_ != null) hash ^= BuffInfo.GetHashCode();
          if (GradeBanner.Length != 0) hash ^= GradeBanner.GetHashCode();
          if (profileDialogBg_ != null) hash ^= ProfileDialogBg.GetHashCode();
          if (profileDialogBgBack_ != null) hash ^= ProfileDialogBgBack.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TotalDiamondCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(TotalDiamondCount);
          }
          if (diamondIcon_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(DiamondIcon);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (icon_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Icon);
          }
          if (NextName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(NextName);
          }
          if (Level != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(Level);
          }
          if (nextIcon_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(NextIcon);
          }
          if (NextDiamond != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(NextDiamond);
          }
          if (NowDiamond != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(NowDiamond);
          }
          if (ThisGradeMinDiamond != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(ThisGradeMinDiamond);
          }
          if (ThisGradeMaxDiamond != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(ThisGradeMaxDiamond);
          }
          if (PayDiamondBak != 0L) {
            output.WriteRawTag(96);
            output.WriteInt64(PayDiamondBak);
          }
          if (GradeDescribe.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(GradeDescribe);
          }
          gradeIconList_.WriteTo(output, _repeated_gradeIconList_codec);
          if (ScreenChatType != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(ScreenChatType);
          }
          if (imIcon_ != null) {
            output.WriteRawTag(130, 1);
            output.WriteMessage(ImIcon);
          }
          if (imIconWithLevel_ != null) {
            output.WriteRawTag(138, 1);
            output.WriteMessage(ImIconWithLevel);
          }
          if (liveIcon_ != null) {
            output.WriteRawTag(146, 1);
            output.WriteMessage(LiveIcon);
          }
          if (newImIconWithLevel_ != null) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(NewImIconWithLevel);
          }
          if (newLiveIcon_ != null) {
            output.WriteRawTag(162, 1);
            output.WriteMessage(NewLiveIcon);
          }
          if (UpgradeNeedConsume != 0L) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(UpgradeNeedConsume);
          }
          if (NextPrivileges.Length != 0) {
            output.WriteRawTag(178, 1);
            output.WriteString(NextPrivileges);
          }
          if (background_ != null) {
            output.WriteRawTag(186, 1);
            output.WriteMessage(Background);
          }
          if (backgroundBack_ != null) {
            output.WriteRawTag(194, 1);
            output.WriteMessage(BackgroundBack);
          }
          if (Score != 0L) {
            output.WriteRawTag(200, 1);
            output.WriteInt64(Score);
          }
          if (buffInfo_ != null) {
            output.WriteRawTag(210, 1);
            output.WriteMessage(BuffInfo);
          }
          if (GradeBanner.Length != 0) {
            output.WriteRawTag(202, 62);
            output.WriteString(GradeBanner);
          }
          if (profileDialogBg_ != null) {
            output.WriteRawTag(210, 62);
            output.WriteMessage(ProfileDialogBg);
          }
          if (profileDialogBgBack_ != null) {
            output.WriteRawTag(218, 62);
            output.WriteMessage(ProfileDialogBgBack);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TotalDiamondCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalDiamondCount);
          }
          if (diamondIcon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiamondIcon);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (icon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Icon);
          }
          if (NextName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NextName);
          }
          if (Level != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
          }
          if (nextIcon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextIcon);
          }
          if (NextDiamond != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextDiamond);
          }
          if (NowDiamond != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NowDiamond);
          }
          if (ThisGradeMinDiamond != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThisGradeMinDiamond);
          }
          if (ThisGradeMaxDiamond != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThisGradeMaxDiamond);
          }
          if (PayDiamondBak != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayDiamondBak);
          }
          if (GradeDescribe.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GradeDescribe);
          }
          size += gradeIconList_.CalculateSize(_repeated_gradeIconList_codec);
          if (ScreenChatType != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScreenChatType);
          }
          if (imIcon_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImIcon);
          }
          if (imIconWithLevel_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImIconWithLevel);
          }
          if (liveIcon_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(LiveIcon);
          }
          if (newImIconWithLevel_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(NewImIconWithLevel);
          }
          if (newLiveIcon_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(NewLiveIcon);
          }
          if (UpgradeNeedConsume != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(UpgradeNeedConsume);
          }
          if (NextPrivileges.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(NextPrivileges);
          }
          if (background_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Background);
          }
          if (backgroundBack_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundBack);
          }
          if (Score != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(Score);
          }
          if (buffInfo_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffInfo);
          }
          if (GradeBanner.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(GradeBanner);
          }
          if (profileDialogBg_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileDialogBg);
          }
          if (profileDialogBgBack_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileDialogBgBack);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PayGrade other) {
          if (other == null) {
            return;
          }
          if (other.TotalDiamondCount != 0L) {
            TotalDiamondCount = other.TotalDiamondCount;
          }
          if (other.diamondIcon_ != null) {
            if (diamondIcon_ == null) {
              DiamondIcon = new global::DouyinPb.Image();
            }
            DiamondIcon.MergeFrom(other.DiamondIcon);
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.icon_ != null) {
            if (icon_ == null) {
              Icon = new global::DouyinPb.Image();
            }
            Icon.MergeFrom(other.Icon);
          }
          if (other.NextName.Length != 0) {
            NextName = other.NextName;
          }
          if (other.Level != 0L) {
            Level = other.Level;
          }
          if (other.nextIcon_ != null) {
            if (nextIcon_ == null) {
              NextIcon = new global::DouyinPb.Image();
            }
            NextIcon.MergeFrom(other.NextIcon);
          }
          if (other.NextDiamond != 0L) {
            NextDiamond = other.NextDiamond;
          }
          if (other.NowDiamond != 0L) {
            NowDiamond = other.NowDiamond;
          }
          if (other.ThisGradeMinDiamond != 0L) {
            ThisGradeMinDiamond = other.ThisGradeMinDiamond;
          }
          if (other.ThisGradeMaxDiamond != 0L) {
            ThisGradeMaxDiamond = other.ThisGradeMaxDiamond;
          }
          if (other.PayDiamondBak != 0L) {
            PayDiamondBak = other.PayDiamondBak;
          }
          if (other.GradeDescribe.Length != 0) {
            GradeDescribe = other.GradeDescribe;
          }
          gradeIconList_.Add(other.gradeIconList_);
          if (other.ScreenChatType != 0L) {
            ScreenChatType = other.ScreenChatType;
          }
          if (other.imIcon_ != null) {
            if (imIcon_ == null) {
              ImIcon = new global::DouyinPb.Image();
            }
            ImIcon.MergeFrom(other.ImIcon);
          }
          if (other.imIconWithLevel_ != null) {
            if (imIconWithLevel_ == null) {
              ImIconWithLevel = new global::DouyinPb.Image();
            }
            ImIconWithLevel.MergeFrom(other.ImIconWithLevel);
          }
          if (other.liveIcon_ != null) {
            if (liveIcon_ == null) {
              LiveIcon = new global::DouyinPb.Image();
            }
            LiveIcon.MergeFrom(other.LiveIcon);
          }
          if (other.newImIconWithLevel_ != null) {
            if (newImIconWithLevel_ == null) {
              NewImIconWithLevel = new global::DouyinPb.Image();
            }
            NewImIconWithLevel.MergeFrom(other.NewImIconWithLevel);
          }
          if (other.newLiveIcon_ != null) {
            if (newLiveIcon_ == null) {
              NewLiveIcon = new global::DouyinPb.Image();
            }
            NewLiveIcon.MergeFrom(other.NewLiveIcon);
          }
          if (other.UpgradeNeedConsume != 0L) {
            UpgradeNeedConsume = other.UpgradeNeedConsume;
          }
          if (other.NextPrivileges.Length != 0) {
            NextPrivileges = other.NextPrivileges;
          }
          if (other.background_ != null) {
            if (background_ == null) {
              Background = new global::DouyinPb.Image();
            }
            Background.MergeFrom(other.Background);
          }
          if (other.backgroundBack_ != null) {
            if (backgroundBack_ == null) {
              BackgroundBack = new global::DouyinPb.Image();
            }
            BackgroundBack.MergeFrom(other.BackgroundBack);
          }
          if (other.Score != 0L) {
            Score = other.Score;
          }
          if (other.buffInfo_ != null) {
            if (buffInfo_ == null) {
              BuffInfo = new global::DouyinPb.User.Types.GradeBuffInfo();
            }
            BuffInfo.MergeFrom(other.BuffInfo);
          }
          if (other.GradeBanner.Length != 0) {
            GradeBanner = other.GradeBanner;
          }
          if (other.profileDialogBg_ != null) {
            if (profileDialogBg_ == null) {
              ProfileDialogBg = new global::DouyinPb.Image();
            }
            ProfileDialogBg.MergeFrom(other.ProfileDialogBg);
          }
          if (other.profileDialogBgBack_ != null) {
            if (profileDialogBgBack_ == null) {
              ProfileDialogBgBack = new global::DouyinPb.Image();
            }
            ProfileDialogBgBack.MergeFrom(other.ProfileDialogBgBack);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TotalDiamondCount = input.ReadInt64();
                break;
              }
              case 18: {
                if (diamondIcon_ == null) {
                  DiamondIcon = new global::DouyinPb.Image();
                }
                input.ReadMessage(DiamondIcon);
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 34: {
                if (icon_ == null) {
                  Icon = new global::DouyinPb.Image();
                }
                input.ReadMessage(Icon);
                break;
              }
              case 42: {
                NextName = input.ReadString();
                break;
              }
              case 48: {
                Level = input.ReadInt64();
                break;
              }
              case 58: {
                if (nextIcon_ == null) {
                  NextIcon = new global::DouyinPb.Image();
                }
                input.ReadMessage(NextIcon);
                break;
              }
              case 64: {
                NextDiamond = input.ReadInt64();
                break;
              }
              case 72: {
                NowDiamond = input.ReadInt64();
                break;
              }
              case 80: {
                ThisGradeMinDiamond = input.ReadInt64();
                break;
              }
              case 88: {
                ThisGradeMaxDiamond = input.ReadInt64();
                break;
              }
              case 96: {
                PayDiamondBak = input.ReadInt64();
                break;
              }
              case 106: {
                GradeDescribe = input.ReadString();
                break;
              }
              case 114: {
                gradeIconList_.AddEntriesFrom(input, _repeated_gradeIconList_codec);
                break;
              }
              case 120: {
                ScreenChatType = input.ReadInt64();
                break;
              }
              case 130: {
                if (imIcon_ == null) {
                  ImIcon = new global::DouyinPb.Image();
                }
                input.ReadMessage(ImIcon);
                break;
              }
              case 138: {
                if (imIconWithLevel_ == null) {
                  ImIconWithLevel = new global::DouyinPb.Image();
                }
                input.ReadMessage(ImIconWithLevel);
                break;
              }
              case 146: {
                if (liveIcon_ == null) {
                  LiveIcon = new global::DouyinPb.Image();
                }
                input.ReadMessage(LiveIcon);
                break;
              }
              case 154: {
                if (newImIconWithLevel_ == null) {
                  NewImIconWithLevel = new global::DouyinPb.Image();
                }
                input.ReadMessage(NewImIconWithLevel);
                break;
              }
              case 162: {
                if (newLiveIcon_ == null) {
                  NewLiveIcon = new global::DouyinPb.Image();
                }
                input.ReadMessage(NewLiveIcon);
                break;
              }
              case 168: {
                UpgradeNeedConsume = input.ReadInt64();
                break;
              }
              case 178: {
                NextPrivileges = input.ReadString();
                break;
              }
              case 186: {
                if (background_ == null) {
                  Background = new global::DouyinPb.Image();
                }
                input.ReadMessage(Background);
                break;
              }
              case 194: {
                if (backgroundBack_ == null) {
                  BackgroundBack = new global::DouyinPb.Image();
                }
                input.ReadMessage(BackgroundBack);
                break;
              }
              case 200: {
                Score = input.ReadInt64();
                break;
              }
              case 210: {
                if (buffInfo_ == null) {
                  BuffInfo = new global::DouyinPb.User.Types.GradeBuffInfo();
                }
                input.ReadMessage(BuffInfo);
                break;
              }
              case 8010: {
                GradeBanner = input.ReadString();
                break;
              }
              case 8018: {
                if (profileDialogBg_ == null) {
                  ProfileDialogBg = new global::DouyinPb.Image();
                }
                input.ReadMessage(ProfileDialogBg);
                break;
              }
              case 8026: {
                if (profileDialogBgBack_ == null) {
                  ProfileDialogBgBack = new global::DouyinPb.Image();
                }
                input.ReadMessage(ProfileDialogBgBack);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PayGrade message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class GradeIcon : pb::IMessage<GradeIcon> {
            private static readonly pb::MessageParser<GradeIcon> _parser = new pb::MessageParser<GradeIcon>(() => new GradeIcon());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<GradeIcon> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::DouyinPb.User.Types.PayGrade.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GradeIcon() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GradeIcon(GradeIcon other) : this() {
              icon_ = other.icon_ != null ? other.icon_.Clone() : null;
              iconDiamond_ = other.iconDiamond_;
              level_ = other.level_;
              levelStr_ = other.levelStr_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GradeIcon Clone() {
              return new GradeIcon(this);
            }

            /// <summary>Field number for the "icon" field.</summary>
            public const int IconFieldNumber = 1;
            private global::DouyinPb.Image icon_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::DouyinPb.Image Icon {
              get { return icon_; }
              set {
                icon_ = value;
              }
            }

            /// <summary>Field number for the "iconDiamond" field.</summary>
            public const int IconDiamondFieldNumber = 2;
            private long iconDiamond_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long IconDiamond {
              get { return iconDiamond_; }
              set {
                iconDiamond_ = value;
              }
            }

            /// <summary>Field number for the "level" field.</summary>
            public const int LevelFieldNumber = 3;
            private long level_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Level {
              get { return level_; }
              set {
                level_ = value;
              }
            }

            /// <summary>Field number for the "levelStr" field.</summary>
            public const int LevelStrFieldNumber = 4;
            private string levelStr_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string LevelStr {
              get { return levelStr_; }
              set {
                levelStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as GradeIcon);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(GradeIcon other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Icon, other.Icon)) return false;
              if (IconDiamond != other.IconDiamond) return false;
              if (Level != other.Level) return false;
              if (LevelStr != other.LevelStr) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (icon_ != null) hash ^= Icon.GetHashCode();
              if (IconDiamond != 0L) hash ^= IconDiamond.GetHashCode();
              if (Level != 0L) hash ^= Level.GetHashCode();
              if (LevelStr.Length != 0) hash ^= LevelStr.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (icon_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Icon);
              }
              if (IconDiamond != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(IconDiamond);
              }
              if (Level != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Level);
              }
              if (LevelStr.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(LevelStr);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (icon_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Icon);
              }
              if (IconDiamond != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(IconDiamond);
              }
              if (Level != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
              }
              if (LevelStr.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelStr);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(GradeIcon other) {
              if (other == null) {
                return;
              }
              if (other.icon_ != null) {
                if (icon_ == null) {
                  Icon = new global::DouyinPb.Image();
                }
                Icon.MergeFrom(other.Icon);
              }
              if (other.IconDiamond != 0L) {
                IconDiamond = other.IconDiamond;
              }
              if (other.Level != 0L) {
                Level = other.Level;
              }
              if (other.LevelStr.Length != 0) {
                LevelStr = other.LevelStr;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (icon_ == null) {
                      Icon = new global::DouyinPb.Image();
                    }
                    input.ReadMessage(Icon);
                    break;
                  }
                  case 16: {
                    IconDiamond = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    Level = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    LevelStr = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class TextFormat : pb::IMessage<TextFormat> {
    private static readonly pb::MessageParser<TextFormat> _parser = new pb::MessageParser<TextFormat>(() => new TextFormat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextFormat(TextFormat other) : this() {
      color_ = other.color_;
      bold_ = other.bold_;
      italic_ = other.italic_;
      weight_ = other.weight_;
      italicAngle_ = other.italicAngle_;
      fontSize_ = other.fontSize_;
      userHeightLightColor_ = other.userHeightLightColor_;
      useRemoteClor_ = other.useRemoteClor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextFormat Clone() {
      return new TextFormat(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bold" field.</summary>
    public const int BoldFieldNumber = 2;
    private bool bold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bold {
      get { return bold_; }
      set {
        bold_ = value;
      }
    }

    /// <summary>Field number for the "italic" field.</summary>
    public const int ItalicFieldNumber = 3;
    private bool italic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Italic {
      get { return italic_; }
      set {
        italic_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "italicAngle" field.</summary>
    public const int ItalicAngleFieldNumber = 5;
    private int italicAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItalicAngle {
      get { return italicAngle_; }
      set {
        italicAngle_ = value;
      }
    }

    /// <summary>Field number for the "fontSize" field.</summary>
    public const int FontSizeFieldNumber = 6;
    private int fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "userHeightLightColor" field.</summary>
    public const int UserHeightLightColorFieldNumber = 7;
    private bool userHeightLightColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserHeightLightColor {
      get { return userHeightLightColor_; }
      set {
        userHeightLightColor_ = value;
      }
    }

    /// <summary>Field number for the "useRemoteClor" field.</summary>
    public const int UseRemoteClorFieldNumber = 8;
    private bool useRemoteClor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRemoteClor {
      get { return useRemoteClor_; }
      set {
        useRemoteClor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (Bold != other.Bold) return false;
      if (Italic != other.Italic) return false;
      if (Weight != other.Weight) return false;
      if (ItalicAngle != other.ItalicAngle) return false;
      if (FontSize != other.FontSize) return false;
      if (UserHeightLightColor != other.UserHeightLightColor) return false;
      if (UseRemoteClor != other.UseRemoteClor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (Bold != false) hash ^= Bold.GetHashCode();
      if (Italic != false) hash ^= Italic.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (ItalicAngle != 0) hash ^= ItalicAngle.GetHashCode();
      if (FontSize != 0) hash ^= FontSize.GetHashCode();
      if (UserHeightLightColor != false) hash ^= UserHeightLightColor.GetHashCode();
      if (UseRemoteClor != false) hash ^= UseRemoteClor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Color);
      }
      if (Bold != false) {
        output.WriteRawTag(16);
        output.WriteBool(Bold);
      }
      if (Italic != false) {
        output.WriteRawTag(24);
        output.WriteBool(Italic);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      if (ItalicAngle != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItalicAngle);
      }
      if (FontSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FontSize);
      }
      if (UserHeightLightColor != false) {
        output.WriteRawTag(56);
        output.WriteBool(UserHeightLightColor);
      }
      if (UseRemoteClor != false) {
        output.WriteRawTag(64);
        output.WriteBool(UseRemoteClor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (Bold != false) {
        size += 1 + 1;
      }
      if (Italic != false) {
        size += 1 + 1;
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (ItalicAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItalicAngle);
      }
      if (FontSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontSize);
      }
      if (UserHeightLightColor != false) {
        size += 1 + 1;
      }
      if (UseRemoteClor != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextFormat other) {
      if (other == null) {
        return;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.Bold != false) {
        Bold = other.Bold;
      }
      if (other.Italic != false) {
        Italic = other.Italic;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.ItalicAngle != 0) {
        ItalicAngle = other.ItalicAngle;
      }
      if (other.FontSize != 0) {
        FontSize = other.FontSize;
      }
      if (other.UserHeightLightColor != false) {
        UserHeightLightColor = other.UserHeightLightColor;
      }
      if (other.UseRemoteClor != false) {
        UseRemoteClor = other.UseRemoteClor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Color = input.ReadString();
            break;
          }
          case 16: {
            Bold = input.ReadBool();
            break;
          }
          case 24: {
            Italic = input.ReadBool();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
          case 40: {
            ItalicAngle = input.ReadInt32();
            break;
          }
          case 48: {
            FontSize = input.ReadInt32();
            break;
          }
          case 56: {
            UserHeightLightColor = input.ReadBool();
            break;
          }
          case 64: {
            UseRemoteClor = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPiece : pb::IMessage<TextPiece> {
    private static readonly pb::MessageParser<TextPiece> _parser = new pb::MessageParser<TextPiece>(() => new TextPiece());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPiece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiece(TextPiece other) : this() {
      type_ = other.type_;
      format_ = other.format_ != null ? other.format_.Clone() : null;
      stringValue_ = other.stringValue_;
      userValue_ = other.userValue_ != null ? other.userValue_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiece Clone() {
      return new TextPiece(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::DouyinPb.TextFormat format_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.TextFormat Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 11;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userValue" field.</summary>
    public const int UserValueFieldNumber = 21;
    private global::DouyinPb.TextPieceUser userValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.TextPieceUser UserValue {
      get { return userValue_; }
      set {
        userValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPiece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPiece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Format, other.Format)) return false;
      if (StringValue != other.StringValue) return false;
      if (!object.Equals(UserValue, other.UserValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (format_ != null) hash ^= Format.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (userValue_ != null) hash ^= UserValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (format_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Format);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(StringValue);
      }
      if (userValue_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(UserValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (format_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Format);
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (userValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPiece other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.format_ != null) {
        if (format_ == null) {
          Format = new global::DouyinPb.TextFormat();
        }
        Format.MergeFrom(other.Format);
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.userValue_ != null) {
        if (userValue_ == null) {
          UserValue = new global::DouyinPb.TextPieceUser();
        }
        UserValue.MergeFrom(other.UserValue);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (format_ == null) {
              Format = new global::DouyinPb.TextFormat();
            }
            input.ReadMessage(Format);
            break;
          }
          case 90: {
            StringValue = input.ReadString();
            break;
          }
          case 170: {
            if (userValue_ == null) {
              UserValue = new global::DouyinPb.TextPieceUser();
            }
            input.ReadMessage(UserValue);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      urlList_ = other.urlList_.Clone();
      uri_ = other.uri_;
      height_ = other.height_;
      width_ = other.width_;
      avgColor_ = other.avgColor_;
      imageType_ = other.imageType_;
      openWebUrl_ = other.openWebUrl_;
      content_ = other.content_ != null ? other.content_.Clone() : null;
      isAnimated_ = other.isAnimated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "urlList" field.</summary>
    public const int UrlListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_urlList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> urlList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UrlList {
      get { return urlList_; }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "avgColor" field.</summary>
    public const int AvgColorFieldNumber = 5;
    private string avgColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvgColor {
      get { return avgColor_; }
      set {
        avgColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageType" field.</summary>
    public const int ImageTypeFieldNumber = 6;
    private int imageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageType {
      get { return imageType_; }
      set {
        imageType_ = value;
      }
    }

    /// <summary>Field number for the "openWebUrl" field.</summary>
    public const int OpenWebUrlFieldNumber = 7;
    private string openWebUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenWebUrl {
      get { return openWebUrl_; }
      set {
        openWebUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private global::DouyinPb.Image.Types.Content content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image.Types.Content Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "isAnimated" field.</summary>
    public const int IsAnimatedFieldNumber = 9;
    private bool isAnimated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnimated {
      get { return isAnimated_; }
      set {
        isAnimated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!urlList_.Equals(other.urlList_)) return false;
      if (Uri != other.Uri) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (AvgColor != other.AvgColor) return false;
      if (ImageType != other.ImageType) return false;
      if (OpenWebUrl != other.OpenWebUrl) return false;
      if (!object.Equals(Content, other.Content)) return false;
      if (IsAnimated != other.IsAnimated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= urlList_.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (AvgColor.Length != 0) hash ^= AvgColor.GetHashCode();
      if (ImageType != 0) hash ^= ImageType.GetHashCode();
      if (OpenWebUrl.Length != 0) hash ^= OpenWebUrl.GetHashCode();
      if (content_ != null) hash ^= Content.GetHashCode();
      if (IsAnimated != false) hash ^= IsAnimated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      urlList_.WriteTo(output, _repeated_urlList_codec);
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (Height != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Height);
      }
      if (Width != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Width);
      }
      if (AvgColor.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AvgColor);
      }
      if (ImageType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImageType);
      }
      if (OpenWebUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OpenWebUrl);
      }
      if (content_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Content);
      }
      if (IsAnimated != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAnimated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += urlList_.CalculateSize(_repeated_urlList_codec);
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (AvgColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvgColor);
      }
      if (ImageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageType);
      }
      if (OpenWebUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenWebUrl);
      }
      if (content_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Content);
      }
      if (IsAnimated != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      urlList_.Add(other.urlList_);
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.AvgColor.Length != 0) {
        AvgColor = other.AvgColor;
      }
      if (other.ImageType != 0) {
        ImageType = other.ImageType;
      }
      if (other.OpenWebUrl.Length != 0) {
        OpenWebUrl = other.OpenWebUrl;
      }
      if (other.content_ != null) {
        if (content_ == null) {
          Content = new global::DouyinPb.Image.Types.Content();
        }
        Content.MergeFrom(other.Content);
      }
      if (other.IsAnimated != false) {
        IsAnimated = other.IsAnimated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            urlList_.AddEntriesFrom(input, _repeated_urlList_codec);
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 24: {
            Height = input.ReadInt64();
            break;
          }
          case 32: {
            Width = input.ReadInt64();
            break;
          }
          case 42: {
            AvgColor = input.ReadString();
            break;
          }
          case 48: {
            ImageType = input.ReadInt32();
            break;
          }
          case 58: {
            OpenWebUrl = input.ReadString();
            break;
          }
          case 66: {
            if (content_ == null) {
              Content = new global::DouyinPb.Image.Types.Content();
            }
            input.ReadMessage(Content);
            break;
          }
          case 72: {
            IsAnimated = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Image message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Content : pb::IMessage<Content> {
        private static readonly pb::MessageParser<Content> _parser = new pb::MessageParser<Content>(() => new Content());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Content> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.Image.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Content() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Content(Content other) : this() {
          name_ = other.name_;
          fontColor_ = other.fontColor_;
          level_ = other.level_;
          alternativeText_ = other.alternativeText_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Content Clone() {
          return new Content(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fontColor" field.</summary>
        public const int FontColorFieldNumber = 2;
        private string fontColor_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FontColor {
          get { return fontColor_; }
          set {
            fontColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private long level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "alternativeText" field.</summary>
        public const int AlternativeTextFieldNumber = 4;
        private string alternativeText_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AlternativeText {
          get { return alternativeText_; }
          set {
            alternativeText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Content);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Content other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (FontColor != other.FontColor) return false;
          if (Level != other.Level) return false;
          if (AlternativeText != other.AlternativeText) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (FontColor.Length != 0) hash ^= FontColor.GetHashCode();
          if (Level != 0L) hash ^= Level.GetHashCode();
          if (AlternativeText.Length != 0) hash ^= AlternativeText.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (FontColor.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FontColor);
          }
          if (Level != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Level);
          }
          if (AlternativeText.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(AlternativeText);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (FontColor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FontColor);
          }
          if (Level != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
          }
          if (AlternativeText.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AlternativeText);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Content other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.FontColor.Length != 0) {
            FontColor = other.FontColor;
          }
          if (other.Level != 0L) {
            Level = other.Level;
          }
          if (other.AlternativeText.Length != 0) {
            AlternativeText = other.AlternativeText;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                FontColor = input.ReadString();
                break;
              }
              case 24: {
                Level = input.ReadInt64();
                break;
              }
              case 34: {
                AlternativeText = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TextPieceUser : pb::IMessage<TextPieceUser> {
    private static readonly pb::MessageParser<TextPieceUser> _parser = new pb::MessageParser<TextPieceUser>(() => new TextPieceUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPieceUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceUser(TextPieceUser other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      withColon_ = other.withColon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceUser Clone() {
      return new TextPieceUser(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "withColon" field.</summary>
    public const int WithColonFieldNumber = 2;
    private bool withColon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithColon {
      get { return withColon_; }
      set {
        withColon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPieceUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPieceUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (WithColon != other.WithColon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (WithColon != false) hash ^= WithColon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (WithColon != false) {
        output.WriteRawTag(16);
        output.WriteBool(WithColon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (WithColon != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPieceUser other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.WithColon != false) {
        WithColon = other.WithColon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            WithColon = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicAreaCommon : pb::IMessage<PublicAreaCommon> {
    private static readonly pb::MessageParser<PublicAreaCommon> _parser = new pb::MessageParser<PublicAreaCommon>(() => new PublicAreaCommon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicAreaCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicAreaCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicAreaCommon(PublicAreaCommon other) : this() {
      userLabel_ = other.userLabel_ != null ? other.userLabel_.Clone() : null;
      userConsumeInRoom_ = other.userConsumeInRoom_;
      userSendGiftCntInRoom_ = other.userSendGiftCntInRoom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicAreaCommon Clone() {
      return new PublicAreaCommon(this);
    }

    /// <summary>Field number for the "userLabel" field.</summary>
    public const int UserLabelFieldNumber = 1;
    private global::DouyinPb.Image userLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image UserLabel {
      get { return userLabel_; }
      set {
        userLabel_ = value;
      }
    }

    /// <summary>Field number for the "userConsumeInRoom" field.</summary>
    public const int UserConsumeInRoomFieldNumber = 2;
    private long userConsumeInRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserConsumeInRoom {
      get { return userConsumeInRoom_; }
      set {
        userConsumeInRoom_ = value;
      }
    }

    /// <summary>Field number for the "userSendGiftCntInRoom" field.</summary>
    public const int UserSendGiftCntInRoomFieldNumber = 3;
    private long userSendGiftCntInRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserSendGiftCntInRoom {
      get { return userSendGiftCntInRoom_; }
      set {
        userSendGiftCntInRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicAreaCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicAreaCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserLabel, other.UserLabel)) return false;
      if (UserConsumeInRoom != other.UserConsumeInRoom) return false;
      if (UserSendGiftCntInRoom != other.UserSendGiftCntInRoom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userLabel_ != null) hash ^= UserLabel.GetHashCode();
      if (UserConsumeInRoom != 0L) hash ^= UserConsumeInRoom.GetHashCode();
      if (UserSendGiftCntInRoom != 0L) hash ^= UserSendGiftCntInRoom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userLabel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserLabel);
      }
      if (UserConsumeInRoom != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserConsumeInRoom);
      }
      if (UserSendGiftCntInRoom != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserSendGiftCntInRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userLabel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLabel);
      }
      if (UserConsumeInRoom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserConsumeInRoom);
      }
      if (UserSendGiftCntInRoom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserSendGiftCntInRoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicAreaCommon other) {
      if (other == null) {
        return;
      }
      if (other.userLabel_ != null) {
        if (userLabel_ == null) {
          UserLabel = new global::DouyinPb.Image();
        }
        UserLabel.MergeFrom(other.UserLabel);
      }
      if (other.UserConsumeInRoom != 0L) {
        UserConsumeInRoom = other.UserConsumeInRoom;
      }
      if (other.UserSendGiftCntInRoom != 0L) {
        UserSendGiftCntInRoom = other.UserSendGiftCntInRoom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userLabel_ == null) {
              UserLabel = new global::DouyinPb.Image();
            }
            input.ReadMessage(UserLabel);
            break;
          }
          case 16: {
            UserConsumeInRoom = input.ReadInt64();
            break;
          }
          case 24: {
            UserSendGiftCntInRoom = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftIMPriority : pb::IMessage<GiftIMPriority> {
    private static readonly pb::MessageParser<GiftIMPriority> _parser = new pb::MessageParser<GiftIMPriority>(() => new GiftIMPriority());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftIMPriority> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftIMPriority() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftIMPriority(GiftIMPriority other) : this() {
      queueSizes_ = other.queueSizes_;
      selfQueuePriority_ = other.selfQueuePriority_;
      priority_ = other.priority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftIMPriority Clone() {
      return new GiftIMPriority(this);
    }

    /// <summary>Field number for the "queueSizes" field.</summary>
    public const int QueueSizesFieldNumber = 1;
    private string queueSizes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueSizes {
      get { return queueSizes_; }
      set {
        queueSizes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selfQueuePriority" field.</summary>
    public const int SelfQueuePriorityFieldNumber = 2;
    private long selfQueuePriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfQueuePriority {
      get { return selfQueuePriority_; }
      set {
        selfQueuePriority_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 3;
    private long priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftIMPriority);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftIMPriority other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QueueSizes != other.QueueSizes) return false;
      if (SelfQueuePriority != other.SelfQueuePriority) return false;
      if (Priority != other.Priority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QueueSizes.Length != 0) hash ^= QueueSizes.GetHashCode();
      if (SelfQueuePriority != 0L) hash ^= SelfQueuePriority.GetHashCode();
      if (Priority != 0L) hash ^= Priority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QueueSizes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(QueueSizes);
      }
      if (SelfQueuePriority != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfQueuePriority);
      }
      if (Priority != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Priority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QueueSizes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueSizes);
      }
      if (SelfQueuePriority != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfQueuePriority);
      }
      if (Priority != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Priority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftIMPriority other) {
      if (other == null) {
        return;
      }
      if (other.QueueSizes.Length != 0) {
        QueueSizes = other.QueueSizes;
      }
      if (other.SelfQueuePriority != 0L) {
        SelfQueuePriority = other.SelfQueuePriority;
      }
      if (other.Priority != 0L) {
        Priority = other.Priority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            QueueSizes = input.ReadString();
            break;
          }
          case 16: {
            SelfQueuePriority = input.ReadInt64();
            break;
          }
          case 24: {
            Priority = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftTrayInfo : pb::IMessage<GiftTrayInfo> {
    private static readonly pb::MessageParser<GiftTrayInfo> _parser = new pb::MessageParser<GiftTrayInfo>(() => new GiftTrayInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftTrayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftTrayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftTrayInfo(GiftTrayInfo other) : this() {
      trayDisplayText_ = other.trayDisplayText_ != null ? other.trayDisplayText_.Clone() : null;
      trayBaseImg_ = other.trayBaseImg_ != null ? other.trayBaseImg_.Clone() : null;
      trayHeadImg_ = other.trayHeadImg_ != null ? other.trayHeadImg_.Clone() : null;
      trayRightImg_ = other.trayRightImg_ != null ? other.trayRightImg_.Clone() : null;
      trayLevel_ = other.trayLevel_;
      trayDynamicImg_ = other.trayDynamicImg_ != null ? other.trayDynamicImg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftTrayInfo Clone() {
      return new GiftTrayInfo(this);
    }

    /// <summary>Field number for the "trayDisplayText" field.</summary>
    public const int TrayDisplayTextFieldNumber = 1;
    private global::DouyinPb.Text trayDisplayText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Text TrayDisplayText {
      get { return trayDisplayText_; }
      set {
        trayDisplayText_ = value;
      }
    }

    /// <summary>Field number for the "trayBaseImg" field.</summary>
    public const int TrayBaseImgFieldNumber = 2;
    private global::DouyinPb.Image trayBaseImg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image TrayBaseImg {
      get { return trayBaseImg_; }
      set {
        trayBaseImg_ = value;
      }
    }

    /// <summary>Field number for the "trayHeadImg" field.</summary>
    public const int TrayHeadImgFieldNumber = 3;
    private global::DouyinPb.Image trayHeadImg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image TrayHeadImg {
      get { return trayHeadImg_; }
      set {
        trayHeadImg_ = value;
      }
    }

    /// <summary>Field number for the "trayRightImg" field.</summary>
    public const int TrayRightImgFieldNumber = 4;
    private global::DouyinPb.Image trayRightImg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image TrayRightImg {
      get { return trayRightImg_; }
      set {
        trayRightImg_ = value;
      }
    }

    /// <summary>Field number for the "trayLevel" field.</summary>
    public const int TrayLevelFieldNumber = 5;
    private long trayLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TrayLevel {
      get { return trayLevel_; }
      set {
        trayLevel_ = value;
      }
    }

    /// <summary>Field number for the "trayDynamicImg" field.</summary>
    public const int TrayDynamicImgFieldNumber = 6;
    private global::DouyinPb.Image trayDynamicImg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image TrayDynamicImg {
      get { return trayDynamicImg_; }
      set {
        trayDynamicImg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftTrayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftTrayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TrayDisplayText, other.TrayDisplayText)) return false;
      if (!object.Equals(TrayBaseImg, other.TrayBaseImg)) return false;
      if (!object.Equals(TrayHeadImg, other.TrayHeadImg)) return false;
      if (!object.Equals(TrayRightImg, other.TrayRightImg)) return false;
      if (TrayLevel != other.TrayLevel) return false;
      if (!object.Equals(TrayDynamicImg, other.TrayDynamicImg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trayDisplayText_ != null) hash ^= TrayDisplayText.GetHashCode();
      if (trayBaseImg_ != null) hash ^= TrayBaseImg.GetHashCode();
      if (trayHeadImg_ != null) hash ^= TrayHeadImg.GetHashCode();
      if (trayRightImg_ != null) hash ^= TrayRightImg.GetHashCode();
      if (TrayLevel != 0L) hash ^= TrayLevel.GetHashCode();
      if (trayDynamicImg_ != null) hash ^= TrayDynamicImg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trayDisplayText_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrayDisplayText);
      }
      if (trayBaseImg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrayBaseImg);
      }
      if (trayHeadImg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrayHeadImg);
      }
      if (trayRightImg_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TrayRightImg);
      }
      if (TrayLevel != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TrayLevel);
      }
      if (trayDynamicImg_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrayDynamicImg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trayDisplayText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrayDisplayText);
      }
      if (trayBaseImg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrayBaseImg);
      }
      if (trayHeadImg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrayHeadImg);
      }
      if (trayRightImg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrayRightImg);
      }
      if (TrayLevel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TrayLevel);
      }
      if (trayDynamicImg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrayDynamicImg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftTrayInfo other) {
      if (other == null) {
        return;
      }
      if (other.trayDisplayText_ != null) {
        if (trayDisplayText_ == null) {
          TrayDisplayText = new global::DouyinPb.Text();
        }
        TrayDisplayText.MergeFrom(other.TrayDisplayText);
      }
      if (other.trayBaseImg_ != null) {
        if (trayBaseImg_ == null) {
          TrayBaseImg = new global::DouyinPb.Image();
        }
        TrayBaseImg.MergeFrom(other.TrayBaseImg);
      }
      if (other.trayHeadImg_ != null) {
        if (trayHeadImg_ == null) {
          TrayHeadImg = new global::DouyinPb.Image();
        }
        TrayHeadImg.MergeFrom(other.TrayHeadImg);
      }
      if (other.trayRightImg_ != null) {
        if (trayRightImg_ == null) {
          TrayRightImg = new global::DouyinPb.Image();
        }
        TrayRightImg.MergeFrom(other.TrayRightImg);
      }
      if (other.TrayLevel != 0L) {
        TrayLevel = other.TrayLevel;
      }
      if (other.trayDynamicImg_ != null) {
        if (trayDynamicImg_ == null) {
          TrayDynamicImg = new global::DouyinPb.Image();
        }
        TrayDynamicImg.MergeFrom(other.TrayDynamicImg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trayDisplayText_ == null) {
              TrayDisplayText = new global::DouyinPb.Text();
            }
            input.ReadMessage(TrayDisplayText);
            break;
          }
          case 18: {
            if (trayBaseImg_ == null) {
              TrayBaseImg = new global::DouyinPb.Image();
            }
            input.ReadMessage(TrayBaseImg);
            break;
          }
          case 26: {
            if (trayHeadImg_ == null) {
              TrayHeadImg = new global::DouyinPb.Image();
            }
            input.ReadMessage(TrayHeadImg);
            break;
          }
          case 34: {
            if (trayRightImg_ == null) {
              TrayRightImg = new global::DouyinPb.Image();
            }
            input.ReadMessage(TrayRightImg);
            break;
          }
          case 40: {
            TrayLevel = input.ReadInt64();
            break;
          }
          case 50: {
            if (trayDynamicImg_ == null) {
              TrayDynamicImg = new global::DouyinPb.Image();
            }
            input.ReadMessage(TrayDynamicImg);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftStruct : pb::IMessage<GiftStruct> {
    private static readonly pb::MessageParser<GiftStruct> _parser = new pb::MessageParser<GiftStruct>(() => new GiftStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftStruct(GiftStruct other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      describe_ = other.describe_;
      notify_ = other.notify_;
      duration_ = other.duration_;
      id_ = other.id_;
      fansclubInfo_ = other.fansclubInfo_ != null ? other.fansclubInfo_.Clone() : null;
      forLinkmic_ = other.forLinkmic_;
      doodle_ = other.doodle_;
      forFansclub_ = other.forFansclub_;
      combo_ = other.combo_;
      type_ = other.type_;
      diamondCount_ = other.diamondCount_;
      isDisplayedOnPanel_ = other.isDisplayedOnPanel_;
      primaryEffectId_ = other.primaryEffectId_;
      giftLabelIcon_ = other.giftLabelIcon_ != null ? other.giftLabelIcon_.Clone() : null;
      name_ = other.name_;
      region_ = other.region_;
      manual_ = other.manual_;
      forCustom_ = other.forCustom_;
      specialEffects_ = other.specialEffects_.Clone();
      icon_ = other.icon_ != null ? other.icon_.Clone() : null;
      actionType_ = other.actionType_;
      watermelonSeeds_ = other.watermelonSeeds_;
      goldEffect_ = other.goldEffect_;
      subs_ = other.subs_.Clone();
      goldenBeans_ = other.goldenBeans_;
      honorLevel_ = other.honorLevel_;
      itemType_ = other.itemType_;
      schemeUrl_ = other.schemeUrl_;
      giftOperation_ = other.giftOperation_ != null ? other.giftOperation_.Clone() : null;
      eventName_ = other.eventName_;
      nobleLevel_ = other.nobleLevel_;
      guideUrl_ = other.guideUrl_;
      punishMedicine_ = other.punishMedicine_;
      forPortal_ = other.forPortal_;
      businessText_ = other.businessText_;
      cnyGift_ = other.cnyGift_;
      appId_ = other.appId_;
      vipLevel_ = other.vipLevel_;
      isGray_ = other.isGray_;
      graySchemeUrl_ = other.graySchemeUrl_;
      giftScene_ = other.giftScene_;
      giftBanner_ = other.giftBanner_ != null ? other.giftBanner_.Clone() : null;
      triggerWords_ = other.triggerWords_.Clone();
      giftBuffInfos_ = other.giftBuffInfos_.Clone();
      forFirstRecharge_ = other.forFirstRecharge_;
      dynamicImgForSelected_ = other.dynamicImgForSelected_ != null ? other.dynamicImgForSelected_.Clone() : null;
      afterSendAction_ = other.afterSendAction_;
      giftOfflineTime_ = other.giftOfflineTime_;
      topBarText_ = other.topBarText_;
      topRightAvatar_ = other.topRightAvatar_ != null ? other.topRightAvatar_.Clone() : null;
      bannerSchemeUrl_ = other.bannerSchemeUrl_;
      isLocked_ = other.isLocked_;
      reqExtraType_ = other.reqExtraType_;
      assetIds_ = other.assetIds_.Clone();
      giftPreviewInfo_ = other.giftPreviewInfo_ != null ? other.giftPreviewInfo_.Clone() : null;
      giftTip_ = other.giftTip_ != null ? other.giftTip_.Clone() : null;
      needSweepLightCount_ = other.needSweepLightCount_;
      groupInfo_ = other.groupInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftStruct Clone() {
      return new GiftStruct(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::DouyinPb.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 2;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notify" field.</summary>
    public const int NotifyFieldNumber = 3;
    private bool notify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Notify {
      get { return notify_; }
      set {
        notify_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fansclubInfo" field.</summary>
    public const int FansclubInfoFieldNumber = 6;
    private global::DouyinPb.GiftStruct.Types.GiftStructFansClubInfo fansclubInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftStruct.Types.GiftStructFansClubInfo FansclubInfo {
      get { return fansclubInfo_; }
      set {
        fansclubInfo_ = value;
      }
    }

    /// <summary>Field number for the "forLinkmic" field.</summary>
    public const int ForLinkmicFieldNumber = 7;
    private bool forLinkmic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForLinkmic {
      get { return forLinkmic_; }
      set {
        forLinkmic_ = value;
      }
    }

    /// <summary>Field number for the "doodle" field.</summary>
    public const int DoodleFieldNumber = 8;
    private bool doodle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Doodle {
      get { return doodle_; }
      set {
        doodle_ = value;
      }
    }

    /// <summary>Field number for the "forFansclub" field.</summary>
    public const int ForFansclubFieldNumber = 9;
    private bool forFansclub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForFansclub {
      get { return forFansclub_; }
      set {
        forFansclub_ = value;
      }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 10;
    private bool combo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Combo {
      get { return combo_; }
      set {
        combo_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "diamondCount" field.</summary>
    public const int DiamondCountFieldNumber = 12;
    private int diamondCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiamondCount {
      get { return diamondCount_; }
      set {
        diamondCount_ = value;
      }
    }

    /// <summary>Field number for the "isDisplayedOnPanel" field.</summary>
    public const int IsDisplayedOnPanelFieldNumber = 13;
    private int isDisplayedOnPanel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsDisplayedOnPanel {
      get { return isDisplayedOnPanel_; }
      set {
        isDisplayedOnPanel_ = value;
      }
    }

    /// <summary>Field number for the "primaryEffectId" field.</summary>
    public const int PrimaryEffectIdFieldNumber = 14;
    private long primaryEffectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PrimaryEffectId {
      get { return primaryEffectId_; }
      set {
        primaryEffectId_ = value;
      }
    }

    /// <summary>Field number for the "giftLabelIcon" field.</summary>
    public const int GiftLabelIconFieldNumber = 15;
    private global::DouyinPb.Image giftLabelIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image GiftLabelIcon {
      get { return giftLabelIcon_; }
      set {
        giftLabelIcon_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 16;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 17;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manual" field.</summary>
    public const int ManualFieldNumber = 18;
    private string manual_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manual {
      get { return manual_; }
      set {
        manual_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forCustom" field.</summary>
    public const int ForCustomFieldNumber = 19;
    private bool forCustom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForCustom {
      get { return forCustom_; }
      set {
        forCustom_ = value;
      }
    }

    /// <summary>Field number for the "specialEffects" field.</summary>
    public const int SpecialEffectsFieldNumber = 20;
    private static readonly pbc::MapField<string, long>.Codec _map_specialEffects_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 162);
    private readonly pbc::MapField<string, long> specialEffects_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> SpecialEffects {
      get { return specialEffects_; }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 21;
    private global::DouyinPb.Image icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 22;
    private int actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "watermelonSeeds" field.</summary>
    public const int WatermelonSeedsFieldNumber = 23;
    private int watermelonSeeds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatermelonSeeds {
      get { return watermelonSeeds_; }
      set {
        watermelonSeeds_ = value;
      }
    }

    /// <summary>Field number for the "goldEffect" field.</summary>
    public const int GoldEffectFieldNumber = 24;
    private string goldEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoldEffect {
      get { return goldEffect_; }
      set {
        goldEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subs" field.</summary>
    public const int SubsFieldNumber = 25;
    private static readonly pb::FieldCodec<global::DouyinPb.LuckyMoneyGiftMeta> _repeated_subs_codec
        = pb::FieldCodec.ForMessage(202, global::DouyinPb.LuckyMoneyGiftMeta.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.LuckyMoneyGiftMeta> subs_ = new pbc::RepeatedField<global::DouyinPb.LuckyMoneyGiftMeta>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.LuckyMoneyGiftMeta> Subs {
      get { return subs_; }
    }

    /// <summary>Field number for the "goldenBeans" field.</summary>
    public const int GoldenBeansFieldNumber = 26;
    private long goldenBeans_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoldenBeans {
      get { return goldenBeans_; }
      set {
        goldenBeans_ = value;
      }
    }

    /// <summary>Field number for the "honorLevel" field.</summary>
    public const int HonorLevelFieldNumber = 27;
    private long honorLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HonorLevel {
      get { return honorLevel_; }
      set {
        honorLevel_ = value;
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 28;
    private int itemType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "schemeUrl" field.</summary>
    public const int SchemeUrlFieldNumber = 29;
    private string schemeUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemeUrl {
      get { return schemeUrl_; }
      set {
        schemeUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "giftOperation" field.</summary>
    public const int GiftOperationFieldNumber = 30;
    private global::DouyinPb.GiftPanelOperation giftOperation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftPanelOperation GiftOperation {
      get { return giftOperation_; }
      set {
        giftOperation_ = value;
      }
    }

    /// <summary>Field number for the "eventName" field.</summary>
    public const int EventNameFieldNumber = 31;
    private string eventName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventName {
      get { return eventName_; }
      set {
        eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nobleLevel" field.</summary>
    public const int NobleLevelFieldNumber = 32;
    private long nobleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NobleLevel {
      get { return nobleLevel_; }
      set {
        nobleLevel_ = value;
      }
    }

    /// <summary>Field number for the "guideUrl" field.</summary>
    public const int GuideUrlFieldNumber = 33;
    private string guideUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuideUrl {
      get { return guideUrl_; }
      set {
        guideUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "punishMedicine" field.</summary>
    public const int PunishMedicineFieldNumber = 34;
    private bool punishMedicine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PunishMedicine {
      get { return punishMedicine_; }
      set {
        punishMedicine_ = value;
      }
    }

    /// <summary>Field number for the "forPortal" field.</summary>
    public const int ForPortalFieldNumber = 35;
    private bool forPortal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForPortal {
      get { return forPortal_; }
      set {
        forPortal_ = value;
      }
    }

    /// <summary>Field number for the "businessText" field.</summary>
    public const int BusinessTextFieldNumber = 36;
    private string businessText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessText {
      get { return businessText_; }
      set {
        businessText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cnyGift" field.</summary>
    public const int CnyGiftFieldNumber = 37;
    private bool cnyGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CnyGift {
      get { return cnyGift_; }
      set {
        cnyGift_ = value;
      }
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 38;
    private long appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AppId {
      get { return appId_; }
      set {
        appId_ = value;
      }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 39;
    private long vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "isGray" field.</summary>
    public const int IsGrayFieldNumber = 40;
    private bool isGray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGray {
      get { return isGray_; }
      set {
        isGray_ = value;
      }
    }

    /// <summary>Field number for the "graySchemeUrl" field.</summary>
    public const int GraySchemeUrlFieldNumber = 41;
    private string graySchemeUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraySchemeUrl {
      get { return graySchemeUrl_; }
      set {
        graySchemeUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "giftScene" field.</summary>
    public const int GiftSceneFieldNumber = 42;
    private long giftScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiftScene {
      get { return giftScene_; }
      set {
        giftScene_ = value;
      }
    }

    /// <summary>Field number for the "giftBanner" field.</summary>
    public const int GiftBannerFieldNumber = 43;
    private global::DouyinPb.GiftBanner giftBanner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftBanner GiftBanner {
      get { return giftBanner_; }
      set {
        giftBanner_ = value;
      }
    }

    /// <summary>Field number for the "triggerWords" field.</summary>
    public const int TriggerWordsFieldNumber = 44;
    private static readonly pb::FieldCodec<string> _repeated_triggerWords_codec
        = pb::FieldCodec.ForString(354);
    private readonly pbc::RepeatedField<string> triggerWords_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TriggerWords {
      get { return triggerWords_; }
    }

    /// <summary>Field number for the "giftBuffInfos" field.</summary>
    public const int GiftBuffInfosFieldNumber = 45;
    private static readonly pb::FieldCodec<global::DouyinPb.GiftBuffInfo> _repeated_giftBuffInfos_codec
        = pb::FieldCodec.ForMessage(362, global::DouyinPb.GiftBuffInfo.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.GiftBuffInfo> giftBuffInfos_ = new pbc::RepeatedField<global::DouyinPb.GiftBuffInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.GiftBuffInfo> GiftBuffInfos {
      get { return giftBuffInfos_; }
    }

    /// <summary>Field number for the "forFirstRecharge" field.</summary>
    public const int ForFirstRechargeFieldNumber = 46;
    private bool forFirstRecharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForFirstRecharge {
      get { return forFirstRecharge_; }
      set {
        forFirstRecharge_ = value;
      }
    }

    /// <summary>Field number for the "dynamicImgForSelected" field.</summary>
    public const int DynamicImgForSelectedFieldNumber = 47;
    private global::DouyinPb.Image dynamicImgForSelected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image DynamicImgForSelected {
      get { return dynamicImgForSelected_; }
      set {
        dynamicImgForSelected_ = value;
      }
    }

    /// <summary>Field number for the "afterSendAction" field.</summary>
    public const int AfterSendActionFieldNumber = 48;
    private int afterSendAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterSendAction {
      get { return afterSendAction_; }
      set {
        afterSendAction_ = value;
      }
    }

    /// <summary>Field number for the "giftOfflineTime" field.</summary>
    public const int GiftOfflineTimeFieldNumber = 49;
    private long giftOfflineTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiftOfflineTime {
      get { return giftOfflineTime_; }
      set {
        giftOfflineTime_ = value;
      }
    }

    /// <summary>Field number for the "topBarText" field.</summary>
    public const int TopBarTextFieldNumber = 50;
    private string topBarText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TopBarText {
      get { return topBarText_; }
      set {
        topBarText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topRightAvatar" field.</summary>
    public const int TopRightAvatarFieldNumber = 51;
    private global::DouyinPb.Image topRightAvatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Image TopRightAvatar {
      get { return topRightAvatar_; }
      set {
        topRightAvatar_ = value;
      }
    }

    /// <summary>Field number for the "bannerSchemeUrl" field.</summary>
    public const int BannerSchemeUrlFieldNumber = 52;
    private string bannerSchemeUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BannerSchemeUrl {
      get { return bannerSchemeUrl_; }
      set {
        bannerSchemeUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLocked" field.</summary>
    public const int IsLockedFieldNumber = 53;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    /// <summary>Field number for the "reqExtraType" field.</summary>
    public const int ReqExtraTypeFieldNumber = 54;
    private long reqExtraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReqExtraType {
      get { return reqExtraType_; }
      set {
        reqExtraType_ = value;
      }
    }

    /// <summary>Field number for the "assetIds" field.</summary>
    public const int AssetIdsFieldNumber = 55;
    private static readonly pb::FieldCodec<long> _repeated_assetIds_codec
        = pb::FieldCodec.ForInt64(442);
    private readonly pbc::RepeatedField<long> assetIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> AssetIds {
      get { return assetIds_; }
    }

    /// <summary>Field number for the "giftPreviewInfo" field.</summary>
    public const int GiftPreviewInfoFieldNumber = 56;
    private global::DouyinPb.GiftPreviewInfo giftPreviewInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftPreviewInfo GiftPreviewInfo {
      get { return giftPreviewInfo_; }
      set {
        giftPreviewInfo_ = value;
      }
    }

    /// <summary>Field number for the "giftTip" field.</summary>
    public const int GiftTipFieldNumber = 57;
    private global::DouyinPb.GiftTip giftTip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftTip GiftTip {
      get { return giftTip_; }
      set {
        giftTip_ = value;
      }
    }

    /// <summary>Field number for the "needSweepLightCount" field.</summary>
    public const int NeedSweepLightCountFieldNumber = 58;
    private int needSweepLightCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedSweepLightCount {
      get { return needSweepLightCount_; }
      set {
        needSweepLightCount_ = value;
      }
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 59;
    private static readonly pb::FieldCodec<global::DouyinPb.GiftGroupInfo> _repeated_groupInfo_codec
        = pb::FieldCodec.ForMessage(474, global::DouyinPb.GiftGroupInfo.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.GiftGroupInfo> groupInfo_ = new pbc::RepeatedField<global::DouyinPb.GiftGroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.GiftGroupInfo> GroupInfo {
      get { return groupInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (Describe != other.Describe) return false;
      if (Notify != other.Notify) return false;
      if (Duration != other.Duration) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(FansclubInfo, other.FansclubInfo)) return false;
      if (ForLinkmic != other.ForLinkmic) return false;
      if (Doodle != other.Doodle) return false;
      if (ForFansclub != other.ForFansclub) return false;
      if (Combo != other.Combo) return false;
      if (Type != other.Type) return false;
      if (DiamondCount != other.DiamondCount) return false;
      if (IsDisplayedOnPanel != other.IsDisplayedOnPanel) return false;
      if (PrimaryEffectId != other.PrimaryEffectId) return false;
      if (!object.Equals(GiftLabelIcon, other.GiftLabelIcon)) return false;
      if (Name != other.Name) return false;
      if (Region != other.Region) return false;
      if (Manual != other.Manual) return false;
      if (ForCustom != other.ForCustom) return false;
      if (!SpecialEffects.Equals(other.SpecialEffects)) return false;
      if (!object.Equals(Icon, other.Icon)) return false;
      if (ActionType != other.ActionType) return false;
      if (WatermelonSeeds != other.WatermelonSeeds) return false;
      if (GoldEffect != other.GoldEffect) return false;
      if(!subs_.Equals(other.subs_)) return false;
      if (GoldenBeans != other.GoldenBeans) return false;
      if (HonorLevel != other.HonorLevel) return false;
      if (ItemType != other.ItemType) return false;
      if (SchemeUrl != other.SchemeUrl) return false;
      if (!object.Equals(GiftOperation, other.GiftOperation)) return false;
      if (EventName != other.EventName) return false;
      if (NobleLevel != other.NobleLevel) return false;
      if (GuideUrl != other.GuideUrl) return false;
      if (PunishMedicine != other.PunishMedicine) return false;
      if (ForPortal != other.ForPortal) return false;
      if (BusinessText != other.BusinessText) return false;
      if (CnyGift != other.CnyGift) return false;
      if (AppId != other.AppId) return false;
      if (VipLevel != other.VipLevel) return false;
      if (IsGray != other.IsGray) return false;
      if (GraySchemeUrl != other.GraySchemeUrl) return false;
      if (GiftScene != other.GiftScene) return false;
      if (!object.Equals(GiftBanner, other.GiftBanner)) return false;
      if(!triggerWords_.Equals(other.triggerWords_)) return false;
      if(!giftBuffInfos_.Equals(other.giftBuffInfos_)) return false;
      if (ForFirstRecharge != other.ForFirstRecharge) return false;
      if (!object.Equals(DynamicImgForSelected, other.DynamicImgForSelected)) return false;
      if (AfterSendAction != other.AfterSendAction) return false;
      if (GiftOfflineTime != other.GiftOfflineTime) return false;
      if (TopBarText != other.TopBarText) return false;
      if (!object.Equals(TopRightAvatar, other.TopRightAvatar)) return false;
      if (BannerSchemeUrl != other.BannerSchemeUrl) return false;
      if (IsLocked != other.IsLocked) return false;
      if (ReqExtraType != other.ReqExtraType) return false;
      if(!assetIds_.Equals(other.assetIds_)) return false;
      if (!object.Equals(GiftPreviewInfo, other.GiftPreviewInfo)) return false;
      if (!object.Equals(GiftTip, other.GiftTip)) return false;
      if (NeedSweepLightCount != other.NeedSweepLightCount) return false;
      if(!groupInfo_.Equals(other.groupInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (Notify != false) hash ^= Notify.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (fansclubInfo_ != null) hash ^= FansclubInfo.GetHashCode();
      if (ForLinkmic != false) hash ^= ForLinkmic.GetHashCode();
      if (Doodle != false) hash ^= Doodle.GetHashCode();
      if (ForFansclub != false) hash ^= ForFansclub.GetHashCode();
      if (Combo != false) hash ^= Combo.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DiamondCount != 0) hash ^= DiamondCount.GetHashCode();
      if (IsDisplayedOnPanel != 0) hash ^= IsDisplayedOnPanel.GetHashCode();
      if (PrimaryEffectId != 0L) hash ^= PrimaryEffectId.GetHashCode();
      if (giftLabelIcon_ != null) hash ^= GiftLabelIcon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Manual.Length != 0) hash ^= Manual.GetHashCode();
      if (ForCustom != false) hash ^= ForCustom.GetHashCode();
      hash ^= SpecialEffects.GetHashCode();
      if (icon_ != null) hash ^= Icon.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (WatermelonSeeds != 0) hash ^= WatermelonSeeds.GetHashCode();
      if (GoldEffect.Length != 0) hash ^= GoldEffect.GetHashCode();
      hash ^= subs_.GetHashCode();
      if (GoldenBeans != 0L) hash ^= GoldenBeans.GetHashCode();
      if (HonorLevel != 0L) hash ^= HonorLevel.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (SchemeUrl.Length != 0) hash ^= SchemeUrl.GetHashCode();
      if (giftOperation_ != null) hash ^= GiftOperation.GetHashCode();
      if (EventName.Length != 0) hash ^= EventName.GetHashCode();
      if (NobleLevel != 0L) hash ^= NobleLevel.GetHashCode();
      if (GuideUrl.Length != 0) hash ^= GuideUrl.GetHashCode();
      if (PunishMedicine != false) hash ^= PunishMedicine.GetHashCode();
      if (ForPortal != false) hash ^= ForPortal.GetHashCode();
      if (BusinessText.Length != 0) hash ^= BusinessText.GetHashCode();
      if (CnyGift != false) hash ^= CnyGift.GetHashCode();
      if (AppId != 0L) hash ^= AppId.GetHashCode();
      if (VipLevel != 0L) hash ^= VipLevel.GetHashCode();
      if (IsGray != false) hash ^= IsGray.GetHashCode();
      if (GraySchemeUrl.Length != 0) hash ^= GraySchemeUrl.GetHashCode();
      if (GiftScene != 0L) hash ^= GiftScene.GetHashCode();
      if (giftBanner_ != null) hash ^= GiftBanner.GetHashCode();
      hash ^= triggerWords_.GetHashCode();
      hash ^= giftBuffInfos_.GetHashCode();
      if (ForFirstRecharge != false) hash ^= ForFirstRecharge.GetHashCode();
      if (dynamicImgForSelected_ != null) hash ^= DynamicImgForSelected.GetHashCode();
      if (AfterSendAction != 0) hash ^= AfterSendAction.GetHashCode();
      if (GiftOfflineTime != 0L) hash ^= GiftOfflineTime.GetHashCode();
      if (TopBarText.Length != 0) hash ^= TopBarText.GetHashCode();
      if (topRightAvatar_ != null) hash ^= TopRightAvatar.GetHashCode();
      if (BannerSchemeUrl.Length != 0) hash ^= BannerSchemeUrl.GetHashCode();
      if (IsLocked != false) hash ^= IsLocked.GetHashCode();
      if (ReqExtraType != 0L) hash ^= ReqExtraType.GetHashCode();
      hash ^= assetIds_.GetHashCode();
      if (giftPreviewInfo_ != null) hash ^= GiftPreviewInfo.GetHashCode();
      if (giftTip_ != null) hash ^= GiftTip.GetHashCode();
      if (NeedSweepLightCount != 0) hash ^= NeedSweepLightCount.GetHashCode();
      hash ^= groupInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Describe);
      }
      if (Notify != false) {
        output.WriteRawTag(24);
        output.WriteBool(Notify);
      }
      if (Duration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Duration);
      }
      if (Id != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Id);
      }
      if (fansclubInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FansclubInfo);
      }
      if (ForLinkmic != false) {
        output.WriteRawTag(56);
        output.WriteBool(ForLinkmic);
      }
      if (Doodle != false) {
        output.WriteRawTag(64);
        output.WriteBool(Doodle);
      }
      if (ForFansclub != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForFansclub);
      }
      if (Combo != false) {
        output.WriteRawTag(80);
        output.WriteBool(Combo);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Type);
      }
      if (DiamondCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DiamondCount);
      }
      if (IsDisplayedOnPanel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IsDisplayedOnPanel);
      }
      if (PrimaryEffectId != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(PrimaryEffectId);
      }
      if (giftLabelIcon_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(GiftLabelIcon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Name);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Region);
      }
      if (Manual.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Manual);
      }
      if (ForCustom != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ForCustom);
      }
      specialEffects_.WriteTo(output, _map_specialEffects_codec);
      if (icon_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Icon);
      }
      if (ActionType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ActionType);
      }
      if (WatermelonSeeds != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(WatermelonSeeds);
      }
      if (GoldEffect.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(GoldEffect);
      }
      subs_.WriteTo(output, _repeated_subs_codec);
      if (GoldenBeans != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(GoldenBeans);
      }
      if (HonorLevel != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(HonorLevel);
      }
      if (ItemType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ItemType);
      }
      if (SchemeUrl.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(SchemeUrl);
      }
      if (giftOperation_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GiftOperation);
      }
      if (EventName.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(EventName);
      }
      if (NobleLevel != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(NobleLevel);
      }
      if (GuideUrl.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(GuideUrl);
      }
      if (PunishMedicine != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(PunishMedicine);
      }
      if (ForPortal != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(ForPortal);
      }
      if (BusinessText.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(BusinessText);
      }
      if (CnyGift != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(CnyGift);
      }
      if (AppId != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(AppId);
      }
      if (VipLevel != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(VipLevel);
      }
      if (IsGray != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsGray);
      }
      if (GraySchemeUrl.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(GraySchemeUrl);
      }
      if (GiftScene != 0L) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(GiftScene);
      }
      if (giftBanner_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(GiftBanner);
      }
      triggerWords_.WriteTo(output, _repeated_triggerWords_codec);
      giftBuffInfos_.WriteTo(output, _repeated_giftBuffInfos_codec);
      if (ForFirstRecharge != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ForFirstRecharge);
      }
      if (dynamicImgForSelected_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(DynamicImgForSelected);
      }
      if (AfterSendAction != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(AfterSendAction);
      }
      if (GiftOfflineTime != 0L) {
        output.WriteRawTag(136, 3);
        output.WriteInt64(GiftOfflineTime);
      }
      if (TopBarText.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(TopBarText);
      }
      if (topRightAvatar_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TopRightAvatar);
      }
      if (BannerSchemeUrl.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(BannerSchemeUrl);
      }
      if (IsLocked != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IsLocked);
      }
      if (ReqExtraType != 0L) {
        output.WriteRawTag(176, 3);
        output.WriteInt64(ReqExtraType);
      }
      assetIds_.WriteTo(output, _repeated_assetIds_codec);
      if (giftPreviewInfo_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(GiftPreviewInfo);
      }
      if (giftTip_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(GiftTip);
      }
      if (NeedSweepLightCount != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(NeedSweepLightCount);
      }
      groupInfo_.WriteTo(output, _repeated_groupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (Notify != false) {
        size += 1 + 1;
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (fansclubInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FansclubInfo);
      }
      if (ForLinkmic != false) {
        size += 1 + 1;
      }
      if (Doodle != false) {
        size += 1 + 1;
      }
      if (ForFansclub != false) {
        size += 1 + 1;
      }
      if (Combo != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (DiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiamondCount);
      }
      if (IsDisplayedOnPanel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsDisplayedOnPanel);
      }
      if (PrimaryEffectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrimaryEffectId);
      }
      if (giftLabelIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftLabelIcon);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Region.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Manual.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Manual);
      }
      if (ForCustom != false) {
        size += 2 + 1;
      }
      size += specialEffects_.CalculateSize(_map_specialEffects_codec);
      if (icon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Icon);
      }
      if (ActionType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
      }
      if (WatermelonSeeds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WatermelonSeeds);
      }
      if (GoldEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GoldEffect);
      }
      size += subs_.CalculateSize(_repeated_subs_codec);
      if (GoldenBeans != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GoldenBeans);
      }
      if (HonorLevel != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HonorLevel);
      }
      if (ItemType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
      }
      if (SchemeUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SchemeUrl);
      }
      if (giftOperation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GiftOperation);
      }
      if (EventName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EventName);
      }
      if (NobleLevel != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NobleLevel);
      }
      if (GuideUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GuideUrl);
      }
      if (PunishMedicine != false) {
        size += 2 + 1;
      }
      if (ForPortal != false) {
        size += 2 + 1;
      }
      if (BusinessText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BusinessText);
      }
      if (CnyGift != false) {
        size += 2 + 1;
      }
      if (AppId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AppId);
      }
      if (VipLevel != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VipLevel);
      }
      if (IsGray != false) {
        size += 2 + 1;
      }
      if (GraySchemeUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GraySchemeUrl);
      }
      if (GiftScene != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GiftScene);
      }
      if (giftBanner_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GiftBanner);
      }
      size += triggerWords_.CalculateSize(_repeated_triggerWords_codec);
      size += giftBuffInfos_.CalculateSize(_repeated_giftBuffInfos_codec);
      if (ForFirstRecharge != false) {
        size += 2 + 1;
      }
      if (dynamicImgForSelected_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DynamicImgForSelected);
      }
      if (AfterSendAction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AfterSendAction);
      }
      if (GiftOfflineTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GiftOfflineTime);
      }
      if (TopBarText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TopBarText);
      }
      if (topRightAvatar_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopRightAvatar);
      }
      if (BannerSchemeUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BannerSchemeUrl);
      }
      if (IsLocked != false) {
        size += 2 + 1;
      }
      if (ReqExtraType != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ReqExtraType);
      }
      size += assetIds_.CalculateSize(_repeated_assetIds_codec);
      if (giftPreviewInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GiftPreviewInfo);
      }
      if (giftTip_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GiftTip);
      }
      if (NeedSweepLightCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NeedSweepLightCount);
      }
      size += groupInfo_.CalculateSize(_repeated_groupInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftStruct other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::DouyinPb.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.Notify != false) {
        Notify = other.Notify;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.fansclubInfo_ != null) {
        if (fansclubInfo_ == null) {
          FansclubInfo = new global::DouyinPb.GiftStruct.Types.GiftStructFansClubInfo();
        }
        FansclubInfo.MergeFrom(other.FansclubInfo);
      }
      if (other.ForLinkmic != false) {
        ForLinkmic = other.ForLinkmic;
      }
      if (other.Doodle != false) {
        Doodle = other.Doodle;
      }
      if (other.ForFansclub != false) {
        ForFansclub = other.ForFansclub;
      }
      if (other.Combo != false) {
        Combo = other.Combo;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DiamondCount != 0) {
        DiamondCount = other.DiamondCount;
      }
      if (other.IsDisplayedOnPanel != 0) {
        IsDisplayedOnPanel = other.IsDisplayedOnPanel;
      }
      if (other.PrimaryEffectId != 0L) {
        PrimaryEffectId = other.PrimaryEffectId;
      }
      if (other.giftLabelIcon_ != null) {
        if (giftLabelIcon_ == null) {
          GiftLabelIcon = new global::DouyinPb.Image();
        }
        GiftLabelIcon.MergeFrom(other.GiftLabelIcon);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Manual.Length != 0) {
        Manual = other.Manual;
      }
      if (other.ForCustom != false) {
        ForCustom = other.ForCustom;
      }
      specialEffects_.Add(other.specialEffects_);
      if (other.icon_ != null) {
        if (icon_ == null) {
          Icon = new global::DouyinPb.Image();
        }
        Icon.MergeFrom(other.Icon);
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.WatermelonSeeds != 0) {
        WatermelonSeeds = other.WatermelonSeeds;
      }
      if (other.GoldEffect.Length != 0) {
        GoldEffect = other.GoldEffect;
      }
      subs_.Add(other.subs_);
      if (other.GoldenBeans != 0L) {
        GoldenBeans = other.GoldenBeans;
      }
      if (other.HonorLevel != 0L) {
        HonorLevel = other.HonorLevel;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.SchemeUrl.Length != 0) {
        SchemeUrl = other.SchemeUrl;
      }
      if (other.giftOperation_ != null) {
        if (giftOperation_ == null) {
          GiftOperation = new global::DouyinPb.GiftPanelOperation();
        }
        GiftOperation.MergeFrom(other.GiftOperation);
      }
      if (other.EventName.Length != 0) {
        EventName = other.EventName;
      }
      if (other.NobleLevel != 0L) {
        NobleLevel = other.NobleLevel;
      }
      if (other.GuideUrl.Length != 0) {
        GuideUrl = other.GuideUrl;
      }
      if (other.PunishMedicine != false) {
        PunishMedicine = other.PunishMedicine;
      }
      if (other.ForPortal != false) {
        ForPortal = other.ForPortal;
      }
      if (other.BusinessText.Length != 0) {
        BusinessText = other.BusinessText;
      }
      if (other.CnyGift != false) {
        CnyGift = other.CnyGift;
      }
      if (other.AppId != 0L) {
        AppId = other.AppId;
      }
      if (other.VipLevel != 0L) {
        VipLevel = other.VipLevel;
      }
      if (other.IsGray != false) {
        IsGray = other.IsGray;
      }
      if (other.GraySchemeUrl.Length != 0) {
        GraySchemeUrl = other.GraySchemeUrl;
      }
      if (other.GiftScene != 0L) {
        GiftScene = other.GiftScene;
      }
      if (other.giftBanner_ != null) {
        if (giftBanner_ == null) {
          GiftBanner = new global::DouyinPb.GiftBanner();
        }
        GiftBanner.MergeFrom(other.GiftBanner);
      }
      triggerWords_.Add(other.triggerWords_);
      giftBuffInfos_.Add(other.giftBuffInfos_);
      if (other.ForFirstRecharge != false) {
        ForFirstRecharge = other.ForFirstRecharge;
      }
      if (other.dynamicImgForSelected_ != null) {
        if (dynamicImgForSelected_ == null) {
          DynamicImgForSelected = new global::DouyinPb.Image();
        }
        DynamicImgForSelected.MergeFrom(other.DynamicImgForSelected);
      }
      if (other.AfterSendAction != 0) {
        AfterSendAction = other.AfterSendAction;
      }
      if (other.GiftOfflineTime != 0L) {
        GiftOfflineTime = other.GiftOfflineTime;
      }
      if (other.TopBarText.Length != 0) {
        TopBarText = other.TopBarText;
      }
      if (other.topRightAvatar_ != null) {
        if (topRightAvatar_ == null) {
          TopRightAvatar = new global::DouyinPb.Image();
        }
        TopRightAvatar.MergeFrom(other.TopRightAvatar);
      }
      if (other.BannerSchemeUrl.Length != 0) {
        BannerSchemeUrl = other.BannerSchemeUrl;
      }
      if (other.IsLocked != false) {
        IsLocked = other.IsLocked;
      }
      if (other.ReqExtraType != 0L) {
        ReqExtraType = other.ReqExtraType;
      }
      assetIds_.Add(other.assetIds_);
      if (other.giftPreviewInfo_ != null) {
        if (giftPreviewInfo_ == null) {
          GiftPreviewInfo = new global::DouyinPb.GiftPreviewInfo();
        }
        GiftPreviewInfo.MergeFrom(other.GiftPreviewInfo);
      }
      if (other.giftTip_ != null) {
        if (giftTip_ == null) {
          GiftTip = new global::DouyinPb.GiftTip();
        }
        GiftTip.MergeFrom(other.GiftTip);
      }
      if (other.NeedSweepLightCount != 0) {
        NeedSweepLightCount = other.NeedSweepLightCount;
      }
      groupInfo_.Add(other.groupInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::DouyinPb.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 18: {
            Describe = input.ReadString();
            break;
          }
          case 24: {
            Notify = input.ReadBool();
            break;
          }
          case 32: {
            Duration = input.ReadInt64();
            break;
          }
          case 40: {
            Id = input.ReadInt64();
            break;
          }
          case 50: {
            if (fansclubInfo_ == null) {
              FansclubInfo = new global::DouyinPb.GiftStruct.Types.GiftStructFansClubInfo();
            }
            input.ReadMessage(FansclubInfo);
            break;
          }
          case 56: {
            ForLinkmic = input.ReadBool();
            break;
          }
          case 64: {
            Doodle = input.ReadBool();
            break;
          }
          case 72: {
            ForFansclub = input.ReadBool();
            break;
          }
          case 80: {
            Combo = input.ReadBool();
            break;
          }
          case 88: {
            Type = input.ReadInt32();
            break;
          }
          case 96: {
            DiamondCount = input.ReadInt32();
            break;
          }
          case 104: {
            IsDisplayedOnPanel = input.ReadInt32();
            break;
          }
          case 112: {
            PrimaryEffectId = input.ReadInt64();
            break;
          }
          case 122: {
            if (giftLabelIcon_ == null) {
              GiftLabelIcon = new global::DouyinPb.Image();
            }
            input.ReadMessage(GiftLabelIcon);
            break;
          }
          case 130: {
            Name = input.ReadString();
            break;
          }
          case 138: {
            Region = input.ReadString();
            break;
          }
          case 146: {
            Manual = input.ReadString();
            break;
          }
          case 152: {
            ForCustom = input.ReadBool();
            break;
          }
          case 162: {
            specialEffects_.AddEntriesFrom(input, _map_specialEffects_codec);
            break;
          }
          case 170: {
            if (icon_ == null) {
              Icon = new global::DouyinPb.Image();
            }
            input.ReadMessage(Icon);
            break;
          }
          case 176: {
            ActionType = input.ReadInt32();
            break;
          }
          case 184: {
            WatermelonSeeds = input.ReadInt32();
            break;
          }
          case 194: {
            GoldEffect = input.ReadString();
            break;
          }
          case 202: {
            subs_.AddEntriesFrom(input, _repeated_subs_codec);
            break;
          }
          case 208: {
            GoldenBeans = input.ReadInt64();
            break;
          }
          case 216: {
            HonorLevel = input.ReadInt64();
            break;
          }
          case 224: {
            ItemType = input.ReadInt32();
            break;
          }
          case 234: {
            SchemeUrl = input.ReadString();
            break;
          }
          case 242: {
            if (giftOperation_ == null) {
              GiftOperation = new global::DouyinPb.GiftPanelOperation();
            }
            input.ReadMessage(GiftOperation);
            break;
          }
          case 250: {
            EventName = input.ReadString();
            break;
          }
          case 256: {
            NobleLevel = input.ReadInt64();
            break;
          }
          case 266: {
            GuideUrl = input.ReadString();
            break;
          }
          case 272: {
            PunishMedicine = input.ReadBool();
            break;
          }
          case 280: {
            ForPortal = input.ReadBool();
            break;
          }
          case 290: {
            BusinessText = input.ReadString();
            break;
          }
          case 296: {
            CnyGift = input.ReadBool();
            break;
          }
          case 304: {
            AppId = input.ReadInt64();
            break;
          }
          case 312: {
            VipLevel = input.ReadInt64();
            break;
          }
          case 320: {
            IsGray = input.ReadBool();
            break;
          }
          case 330: {
            GraySchemeUrl = input.ReadString();
            break;
          }
          case 336: {
            GiftScene = input.ReadInt64();
            break;
          }
          case 346: {
            if (giftBanner_ == null) {
              GiftBanner = new global::DouyinPb.GiftBanner();
            }
            input.ReadMessage(GiftBanner);
            break;
          }
          case 354: {
            triggerWords_.AddEntriesFrom(input, _repeated_triggerWords_codec);
            break;
          }
          case 362: {
            giftBuffInfos_.AddEntriesFrom(input, _repeated_giftBuffInfos_codec);
            break;
          }
          case 368: {
            ForFirstRecharge = input.ReadBool();
            break;
          }
          case 378: {
            if (dynamicImgForSelected_ == null) {
              DynamicImgForSelected = new global::DouyinPb.Image();
            }
            input.ReadMessage(DynamicImgForSelected);
            break;
          }
          case 384: {
            AfterSendAction = input.ReadInt32();
            break;
          }
          case 392: {
            GiftOfflineTime = input.ReadInt64();
            break;
          }
          case 402: {
            TopBarText = input.ReadString();
            break;
          }
          case 410: {
            if (topRightAvatar_ == null) {
              TopRightAvatar = new global::DouyinPb.Image();
            }
            input.ReadMessage(TopRightAvatar);
            break;
          }
          case 418: {
            BannerSchemeUrl = input.ReadString();
            break;
          }
          case 424: {
            IsLocked = input.ReadBool();
            break;
          }
          case 432: {
            ReqExtraType = input.ReadInt64();
            break;
          }
          case 442:
          case 440: {
            assetIds_.AddEntriesFrom(input, _repeated_assetIds_codec);
            break;
          }
          case 450: {
            if (giftPreviewInfo_ == null) {
              GiftPreviewInfo = new global::DouyinPb.GiftPreviewInfo();
            }
            input.ReadMessage(GiftPreviewInfo);
            break;
          }
          case 458: {
            if (giftTip_ == null) {
              GiftTip = new global::DouyinPb.GiftTip();
            }
            input.ReadMessage(GiftTip);
            break;
          }
          case 464: {
            NeedSweepLightCount = input.ReadInt32();
            break;
          }
          case 474: {
            groupInfo_.AddEntriesFrom(input, _repeated_groupInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GiftStruct message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GiftStructFansClubInfo : pb::IMessage<GiftStructFansClubInfo> {
        private static readonly pb::MessageParser<GiftStructFansClubInfo> _parser = new pb::MessageParser<GiftStructFansClubInfo>(() => new GiftStructFansClubInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GiftStructFansClubInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DouyinPb.GiftStruct.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GiftStructFansClubInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GiftStructFansClubInfo(GiftStructFansClubInfo other) : this() {
          minLevel_ = other.minLevel_;
          insertPos_ = other.insertPos_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GiftStructFansClubInfo Clone() {
          return new GiftStructFansClubInfo(this);
        }

        /// <summary>Field number for the "minLevel" field.</summary>
        public const int MinLevelFieldNumber = 1;
        private int minLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinLevel {
          get { return minLevel_; }
          set {
            minLevel_ = value;
          }
        }

        /// <summary>Field number for the "insertPos" field.</summary>
        public const int InsertPosFieldNumber = 2;
        private int insertPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int InsertPos {
          get { return insertPos_; }
          set {
            insertPos_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GiftStructFansClubInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GiftStructFansClubInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MinLevel != other.MinLevel) return false;
          if (InsertPos != other.InsertPos) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
          if (InsertPos != 0) hash ^= InsertPos.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MinLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MinLevel);
          }
          if (InsertPos != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(InsertPos);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MinLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLevel);
          }
          if (InsertPos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InsertPos);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GiftStructFansClubInfo other) {
          if (other == null) {
            return;
          }
          if (other.MinLevel != 0) {
            MinLevel = other.MinLevel;
          }
          if (other.InsertPos != 0) {
            InsertPos = other.InsertPos;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MinLevel = input.ReadInt32();
                break;
              }
              case 16: {
                InsertPos = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AssetEffectMixInfo : pb::IMessage<AssetEffectMixInfo> {
    private static readonly pb::MessageParser<AssetEffectMixInfo> _parser = new pb::MessageParser<AssetEffectMixInfo>(() => new AssetEffectMixInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetEffectMixInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEffectMixInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEffectMixInfo(AssetEffectMixInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetEffectMixInfo Clone() {
      return new AssetEffectMixInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetEffectMixInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetEffectMixInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetEffectMixInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LuckyMoneyGiftMeta : pb::IMessage<LuckyMoneyGiftMeta> {
    private static readonly pb::MessageParser<LuckyMoneyGiftMeta> _parser = new pb::MessageParser<LuckyMoneyGiftMeta>(() => new LuckyMoneyGiftMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LuckyMoneyGiftMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyMoneyGiftMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyMoneyGiftMeta(LuckyMoneyGiftMeta other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyMoneyGiftMeta Clone() {
      return new LuckyMoneyGiftMeta(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LuckyMoneyGiftMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LuckyMoneyGiftMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LuckyMoneyGiftMeta other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GiftPanelOperation : pb::IMessage<GiftPanelOperation> {
    private static readonly pb::MessageParser<GiftPanelOperation> _parser = new pb::MessageParser<GiftPanelOperation>(() => new GiftPanelOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftPanelOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftPanelOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftPanelOperation(GiftPanelOperation other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftPanelOperation Clone() {
      return new GiftPanelOperation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftPanelOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftPanelOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftPanelOperation other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GiftBanner : pb::IMessage<GiftBanner> {
    private static readonly pb::MessageParser<GiftBanner> _parser = new pb::MessageParser<GiftBanner>(() => new GiftBanner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftBanner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftBanner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftBanner(GiftBanner other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftBanner Clone() {
      return new GiftBanner(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftBanner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftBanner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftBanner other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GiftBuffInfo : pb::IMessage<GiftBuffInfo> {
    private static readonly pb::MessageParser<GiftBuffInfo> _parser = new pb::MessageParser<GiftBuffInfo>(() => new GiftBuffInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftBuffInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftBuffInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftBuffInfo(GiftBuffInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftBuffInfo Clone() {
      return new GiftBuffInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftBuffInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftBuffInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftBuffInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GiftPreviewInfo : pb::IMessage<GiftPreviewInfo> {
    private static readonly pb::MessageParser<GiftPreviewInfo> _parser = new pb::MessageParser<GiftPreviewInfo>(() => new GiftPreviewInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftPreviewInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftPreviewInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftPreviewInfo(GiftPreviewInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftPreviewInfo Clone() {
      return new GiftPreviewInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftPreviewInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftPreviewInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftPreviewInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GiftTip : pb::IMessage<GiftTip> {
    private static readonly pb::MessageParser<GiftTip> _parser = new pb::MessageParser<GiftTip>(() => new GiftTip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftTip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftTip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftTip(GiftTip other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftTip Clone() {
      return new GiftTip(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftTip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftTip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftTip other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GiftGroupInfo : pb::IMessage<GiftGroupInfo> {
    private static readonly pb::MessageParser<GiftGroupInfo> _parser = new pb::MessageParser<GiftGroupInfo>(() => new GiftGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftGroupInfo(GiftGroupInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftGroupInfo Clone() {
      return new GiftGroupInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftGroupInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class EffectMixImageInfo : pb::IMessage<EffectMixImageInfo> {
    private static readonly pb::MessageParser<EffectMixImageInfo> _parser = new pb::MessageParser<EffectMixImageInfo>(() => new EffectMixImageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectMixImageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectMixImageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectMixImageInfo(EffectMixImageInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectMixImageInfo Clone() {
      return new EffectMixImageInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectMixImageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectMixImageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectMixImageInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RoomStatsMessage : pb::IMessage<RoomStatsMessage> {
    private static readonly pb::MessageParser<RoomStatsMessage> _parser = new pb::MessageParser<RoomStatsMessage>(() => new RoomStatsMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomStatsMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatsMessage(RoomStatsMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      describe_ = other.describe_;
      num_ = other.num_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatsMessage Clone() {
      return new RoomStatsMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 4;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 5;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomStatsMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomStatsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Describe != other.Describe) return false;
      if (Num != other.Num) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Describe);
      }
      if (Num != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Num);
      }
      if (Time != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomStatsMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 34: {
            Describe = input.ReadString();
            break;
          }
          case 40: {
            Num = input.ReadInt32();
            break;
          }
          case 48: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioChatMessage : pb::IMessage<AudioChatMessage> {
    private static readonly pb::MessageParser<AudioChatMessage> _parser = new pb::MessageParser<AudioChatMessage>(() => new AudioChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioChatMessage(AudioChatMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      content_ = other.content_;
      uri_ = other.uri_;
      size_ = other.size_;
      imags_ = other.imags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioChatMessage Clone() {
      return new AudioChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 4;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "imags" field.</summary>
    public const int ImagsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::DouyinPb.Image> _repeated_imags_codec
        = pb::FieldCodec.ForMessage(50, global::DouyinPb.Image.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.Image> imags_ = new pbc::RepeatedField<global::DouyinPb.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.Image> Imags {
      get { return imags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Content != other.Content) return false;
      if (Uri != other.Uri) return false;
      if (Size != other.Size) return false;
      if(!imags_.Equals(other.imags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      hash ^= imags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uri);
      }
      if (Size != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Size);
      }
      imags_.WriteTo(output, _repeated_imags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      size += imags_.CalculateSize(_repeated_imags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      imags_.Add(other.imags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            Uri = input.ReadString();
            break;
          }
          case 40: {
            Size = input.ReadInt32();
            break;
          }
          case 50: {
            imags_.AddEntriesFrom(input, _repeated_imags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BindingGiftMessage : pb::IMessage<BindingGiftMessage> {
    private static readonly pb::MessageParser<BindingGiftMessage> _parser = new pb::MessageParser<BindingGiftMessage>(() => new BindingGiftMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BindingGiftMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindingGiftMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindingGiftMessage(BindingGiftMessage other) : this() {
      gift_ = other.gift_ != null ? other.gift_.Clone() : null;
      common_ = other.common_ != null ? other.common_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindingGiftMessage Clone() {
      return new BindingGiftMessage(this);
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 1;
    private global::DouyinPb.GiftMessage gift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.GiftMessage Gift {
      get { return gift_; }
      set {
        gift_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 2;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BindingGiftMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BindingGiftMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Gift, other.Gift)) return false;
      if (!object.Equals(Common, other.Common)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gift_ != null) hash ^= Gift.GetHashCode();
      if (common_ != null) hash ^= Common.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gift_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Gift);
      }
      if (common_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Common);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gift_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gift);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BindingGiftMessage other) {
      if (other == null) {
        return;
      }
      if (other.gift_ != null) {
        if (gift_ == null) {
          Gift = new global::DouyinPb.GiftMessage();
        }
        Gift.MergeFrom(other.Gift);
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gift_ == null) {
              Gift = new global::DouyinPb.GiftMessage();
            }
            input.ReadMessage(Gift);
            break;
          }
          case 18: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExhibitionChatMessage : pb::IMessage<ExhibitionChatMessage> {
    private static readonly pb::MessageParser<ExhibitionChatMessage> _parser = new pb::MessageParser<ExhibitionChatMessage>(() => new ExhibitionChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExhibitionChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExhibitionChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExhibitionChatMessage(ExhibitionChatMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExhibitionChatMessage Clone() {
      return new ExhibitionChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private global::DouyinPb.Text text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Text Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExhibitionChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExhibitionChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (text_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExhibitionChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::DouyinPb.Text();
        }
        Text.MergeFrom(other.Text);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (text_ == null) {
              Text = new global::DouyinPb.Text();
            }
            input.ReadMessage(Text);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomRankMessage : pb::IMessage<RoomRankMessage> {
    private static readonly pb::MessageParser<RoomRankMessage> _parser = new pb::MessageParser<RoomRankMessage>(() => new RoomRankMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomRankMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRankMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRankMessage(RoomRankMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRankMessage Clone() {
      return new RoomRankMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DouyinPb.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(18, global::DouyinPb.User.Parser);
    private readonly pbc::RepeatedField<global::DouyinPb.User> users_ = new pbc::RepeatedField<global::DouyinPb.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DouyinPb.User> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomRankMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomRankMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomRankMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HighlightComment : pb::IMessage<HighlightComment> {
    private static readonly pb::MessageParser<HighlightComment> _parser = new pb::MessageParser<HighlightComment>(() => new HighlightComment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HighlightComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HighlightComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HighlightComment(HighlightComment other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      content_ = other.content_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HighlightComment Clone() {
      return new HighlightComment(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HighlightComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HighlightComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Content != other.Content) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HighlightComment other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InRoomBannerMessage : pb::IMessage<InRoomBannerMessage> {
    private static readonly pb::MessageParser<InRoomBannerMessage> _parser = new pb::MessageParser<InRoomBannerMessage>(() => new InRoomBannerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InRoomBannerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InRoomBannerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InRoomBannerMessage(InRoomBannerMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      json_ = other.json_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InRoomBannerMessage Clone() {
      return new InRoomBannerMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 2;
    private string json_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InRoomBannerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InRoomBannerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Json != other.Json) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Json.Length != 0) hash ^= Json.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InRoomBannerMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Json.Length != 0) {
        Json = other.Json;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScreenChatMessage : pb::IMessage<ScreenChatMessage> {
    private static readonly pb::MessageParser<ScreenChatMessage> _parser = new pb::MessageParser<ScreenChatMessage>(() => new ScreenChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenChatMessage(ScreenChatMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      content_ = other.content_;
      area_ = other.area_ != null ? other.area_.Clone() : null;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenChatMessage Clone() {
      return new ScreenChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::DouyinPb.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 10;
    private global::DouyinPb.PublicAreaCommon area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.PublicAreaCommon Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 12;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Content != other.Content) return false;
      if (!object.Equals(Area, other.Area)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (area_ != null) hash ^= Area.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (area_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Area);
      }
      if (Time != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (area_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Area);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::DouyinPb.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.area_ != null) {
        if (area_ == null) {
          Area = new global::DouyinPb.PublicAreaCommon();
        }
        Area.MergeFrom(other.Area);
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::DouyinPb.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 82: {
            if (area_ == null) {
              Area = new global::DouyinPb.PublicAreaCommon();
            }
            input.ReadMessage(Area);
            break;
          }
          case 96: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomMessage : pb::IMessage<RoomMessage> {
    private static readonly pb::MessageParser<RoomMessage> _parser = new pb::MessageParser<RoomMessage>(() => new RoomMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMessage(RoomMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      describe_ = other.describe_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMessage Clone() {
      return new RoomMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 2;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Describe != other.Describe) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Describe);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            Describe = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HotChatMessage : pb::IMessage<HotChatMessage> {
    private static readonly pb::MessageParser<HotChatMessage> _parser = new pb::MessageParser<HotChatMessage>(() => new HotChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HotChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DouyinPb.DouyinPbReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotChatMessage(HotChatMessage other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      describe_ = other.describe_;
      content_ = other.content_;
      d3_ = other.d3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotChatMessage Clone() {
      return new HotChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DouyinPb.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DouyinPb.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 2;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "d3" field.</summary>
    public const int D3FieldNumber = 6;
    private string d3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string D3 {
      get { return d3_; }
      set {
        d3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HotChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HotChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Describe != other.Describe) return false;
      if (Content != other.Content) return false;
      if (D3 != other.D3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (D3.Length != 0) hash ^= D3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Describe);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (D3.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(D3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (D3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(D3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HotChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DouyinPb.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.D3.Length != 0) {
        D3 = other.D3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DouyinPb.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            Describe = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 50: {
            D3 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
